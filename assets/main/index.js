System.register("chunks:///_virtual/arrow.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './gameManager.ts', './resourceUtil.ts', './constant.ts', './monster.ts', './poolManager.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, BoxColliderComponent, ParticleSystemComponent, Vec3, math, Node, Component, Util, GameManager, ResourceUtil, Constant, Monster, PoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      BoxColliderComponent = module.BoxColliderComponent;
      ParticleSystemComponent = module.ParticleSystemComponent;
      Vec3 = module.Vec3;
      math = module.math;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      Util = module.Util;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      Monster = module.Monster;
    }, function (module) {
      PoolManager = module.PoolManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "9b706mx99ZI/ZmcpsAOpihz", "arrow", undefined); //单只弓箭脚本


      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Arrow = exports('Arrow', (_dec = ccclass('Arrow'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Arrow, _Component);

        function Arrow() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._isAutoRotate = true; //箭是否自动调整角度

          _this._isArrowLaunch = false; //箭是否弹射

          _this._ndBody = null; //放弓箭特效的节点

          _this._curSpeed = 0; //当前速度

          _this._targetSpeed = 0; //目标速度

          _this._oriPos = null; //初始默认位置

          _this._oriEulerAngles = null; //初始默认角度

          _this._offsetPos = new Vec3(); //和玩家之间的向量差

          _this._curWorPos = new Vec3(); //当前节点世界坐标

          _this._disappearRange = 25; //箭节点超过玩家这个范围则隐藏

          _this._isLoadEffectOver = false; //是否已经加载完所有特效

          _this._isNeedShowEffect = false; //是否需要特效

          _this._targetWorPos = new Vec3(); //箭的下次目标位置

          _this._curEulerAngles = new Vec3(); //当前角度

          _this._oriForward = null; //初始朝向

          _this._curForward = new Vec3(); //当前朝向

          _this._releaseWorPos = new Vec3(); //技能释放位置的世界坐标

          _this._offsetPos_1 = new Vec3(); //向量差

          _this._offsetPos_2 = new Vec3(); //向量差

          _this._cross = new Vec3(); //两个向量叉乘

          _this._colliderCom = null;
          return _this;
        }

        var _proto = Arrow.prototype; //

        _proto.onLoad = function onLoad() {
          this._colliderCom = this.node.getComponent(BoxColliderComponent);
        };

        _proto.onEnable = function onEnable() {
          this._colliderCom.on('onTriggerEnter', this._onTriggerEnterCb, this);
        };

        _proto.onDisable = function onDisable() {
          this._colliderCom.off('onTriggerEnter', this._onTriggerEnterCb, this);
        };

        _proto.start = function start() {// [3]
        }
        /**
        * 初始化 
        */
        ;

        _proto.init = function init(speed, releaseWorPos, isPreload) {
          if (isPreload === void 0) {
            isPreload = false;
          }

          this._releaseWorPos.set(releaseWorPos);

          if (!this._ndBody) {
            this._ndBody = this.node.getChildByName("body");
          }

          this._isLoadEffectOver = false;
          this._isNeedShowEffect = false;
          this._disappearRange = isPreload ? 5 : 25;
          this.isArrowLaunch = false;

          if (!this._oriPos) {
            this._oriPos = this.node.position.clone();
          }

          if (!this._oriEulerAngles) {
            this._oriEulerAngles = this.node.eulerAngles.clone();
          }

          if (!this._oriForward) {
            this._oriForward = this.node.forward.clone();
          }

          this.node.active = false;
          this.node.setPosition(this._oriPos);
          this.node.eulerAngles = this._oriEulerAngles;

          this._curForward.set(this._oriForward);

          this._targetSpeed = speed;
          this._curSpeed = speed * 0.5;

          this._ndBody.children.forEach(function (ndChild) {
            if (ndChild.name.startsWith("arrow")) {
              ndChild.active = false;
            }
          });

          var isHasIce = GameManager.scriptPlayer.isArrowIce;
          var isHasFire = GameManager.scriptPlayer.isArrowFire;
          var isHasLightning = GameManager.scriptPlayer.isArrowLightning; //根据玩家拥有的不同技能展示对应特效

          if (isHasFire || isHasIce || isHasLightning) {
            this._isNeedShowEffect = true;

            if (isHasFire && isHasIce && isHasLightning) {
              this._showTrail("arrowAll");
            } else {
              if (isHasFire && isHasIce || isHasFire && isHasLightning || isHasIce && isHasLightning) {
                if (isHasFire && isHasIce) {
                  this._showTrail("arrowFireIce");
                } else if (isHasLightning && isHasFire) {
                  this._showTrail("arrowLightningFire");
                } else if (isHasLightning && isHasIce) {
                  this._showTrail("arrowLightningIce");
                }
              } else {
                if (isHasFire) {
                  this._showTrail("arrowFire");
                } else if (isHasIce) {
                  this._showTrail("arrowIce");
                } else if (isHasLightning) {
                  this._showTrail("arrowLightning");
                }
              }
            }
          } else {
            //不展示特效
            this._ndBody.children.forEach(function (ndChild) {
              if (ndChild.name.startsWith("arrow")) {
                ndChild.active = false;
              }
            });

            this.node.active = true;
          }
        }
        /**
         * 展示箭的特效拖尾
         *
         * @private
         * @param {string} effectName
         * @memberof Arrow
         */
        ;

        _proto._showTrail = function _showTrail(effectName) {
          var _this2 = this;

          var ndTrail = this._ndBody.getChildByName(effectName);

          if (ndTrail) {
            ndTrail.active = true;
            this.node.active = true;
            this._isLoadEffectOver = true;
          } else {
            ResourceUtil.loadEffectRes("arrow/" + effectName).then(function (pf) {
              ndTrail = PoolManager.instance.getNode(pf, _this2._ndBody);
              _this2.node.active = true;
              _this2._isLoadEffectOver = true;
            });
          }
        }
        /**
         *  回收弓箭组，在weapon/arrow下
         *
         * @memberof Arrow
         */
        ;

        _proto.recycleArrowGroup = function recycleArrowGroup() {
          if (this.node.parent) {
            PoolManager.instance.putNode(this.node.parent);
          }
        }
        /**
         * 击中目标,隐藏箭
         *
         * @memberof Arrow
         */
        ;

        _proto.hideArrow = function hideArrow() {
          var _this$node$parent;

          if (!this.node.parent) {
            return;
          } //清除拖尾特效残留


          var arrParticle = this._ndBody.getComponentsInChildren(ParticleSystemComponent);

          arrParticle.forEach(function (item) {
            item.simulationSpeed = 1;
            item == null ? void 0 : item.clear();
            item == null ? void 0 : item.stop();
          });
          this.node.active = false; //如果弓箭组里所有的箭都隐藏了则回收整个弓箭组

          var isAllArrowHide = (_this$node$parent = this.node.parent) == null ? void 0 : _this$node$parent.children.every(function (ndArrow) {
            return ndArrow.active === false;
          });

          if (isAllArrowHide) {
            this.recycleArrowGroup();
          }
        }
        /**
         * 箭弹射给一定范围内的某个敌人
         *
         * @param {Node} ndMonster
         * @memberof Arrow
         */
        ;

        _proto.playArrowLaunch = function playArrowLaunch(ndMonster) {
          this.isArrowLaunch = true;
          var arrTargets = GameManager.getNearbyMonster(ndMonster);

          if (arrTargets.length) {
            var ndTarget = arrTargets[0];

            this._offsetPos_1.set(this._releaseWorPos.x - this.node.worldPosition.x, 0, this._releaseWorPos.z - this.node.worldPosition.z);

            this._offsetPos_2.set(this.node.worldPosition.x - ndTarget.worldPosition.x, 0, this.node.worldPosition.z - ndTarget.worldPosition.z); //两个向量之间弧度


            var radian = Vec3.angle(this._offsetPos_1, this._offsetPos_2); //角度

            var angle = math.toDegree(radian); //叉乘

            Vec3.cross(this._cross, this._offsetPos_1, this._offsetPos_2); //判断正反角度

            if (this._cross.y > 0) {
              this._curEulerAngles.y = angle;
            } else {
              this._curEulerAngles.y = -angle;
            }

            this.node.eulerAngles = this._curEulerAngles;
          }
        };

        _proto._onTriggerEnterCb = function _onTriggerEnterCb(event) {
          // this._hitTarget(event.otherCollider, event.selfCollider);
          if (GameManager.isGameOver || !GameManager.isGameStart) {
            return;
          }

          var otherCollider = event.otherCollider;

          if (otherCollider.getGroup() === Constant.PHY_GROUP.OBSTACLE) {
            //箭碰到游戏中的障碍则回收
            var scriptArrow = this.node.getComponent(Arrow);
            scriptArrow.hideArrow();
          } else if (otherCollider.getGroup() === Constant.PHY_GROUP.MONSTER) {
            //箭碰到敌人
            var ndMonster = otherCollider.node;
            var scriptMonster = ndMonster.getComponent(Monster);

            var _scriptArrow = this.node.getComponent(Arrow); //箭是否弹射


            if (GameManager.scriptPlayer.isArrowLaunch) {
              if (!_scriptArrow.isArrowLaunch) {
                //第一次弹射
                _scriptArrow.playArrowLaunch(ndMonster);
              } else {
                //第二次直接隐藏
                _scriptArrow.hideArrow();
              }
            } else if (GameManager.scriptPlayer.isArrowPenetrate) ;else {
              _scriptArrow.hideArrow();
            }

            scriptMonster.playHit(_scriptArrow.isArrowLaunch); //龙被射到龙改变颜色

            if (ndMonster.name === "dragon") {
              //@ts-ignore
              scriptMonster.changeDragonMat();
            }
          }
        };

        _proto.update = function update(deltaTime) {
          if (!this.node.parent || !GameManager.ndPlayer || GameManager.isGameOver || GameManager.isGamePause || this._isNeedShowEffect && !this._isLoadEffectOver) {
            return;
          } //朝forward方向飞行


          this._curSpeed = Util.lerp(this._targetSpeed, this._curSpeed, 0.25);

          this._targetWorPos.set(0, 0, -deltaTime * this._curSpeed);

          this.node.translate(this._targetWorPos, Node.NodeSpace.LOCAL);

          this._curWorPos.set(this.node.worldPosition); //超过玩家一定范围则隐藏


          Vec3.subtract(this._offsetPos, this._curWorPos, GameManager.ndPlayer.worldPosition);

          if (this._offsetPos && this._offsetPos.length() >= this._disappearRange) {
            this.hideArrow();
          }
        };

        _createClass(Arrow, [{
          key: "isAutoRotate",
          get: function get() {
            return this._isAutoRotate;
          },
          set: function set(v) {
            this._isAutoRotate = v;
          }
        }, {
          key: "isArrowLaunch",
          get: function get() {
            return this._isArrowLaunch;
          },
          set: function set(v) {
            this._isArrowLaunch = v;
          }
        }]);

        return Arrow;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/audioManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts', './resourceUtil.ts'], function (exports) {
  var _createForOfIteratorHelperLoose, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, Node, director, AudioSource, assetManager, AudioClip, Constant, ResourceUtil;

  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      director = module.director;
      AudioSource = module.AudioSource;
      assetManager = module.assetManager;
      AudioClip = module.AudioClip;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }],
    execute: function () {
      cclegacy._RF.push({}, "5e2ecZFEJFEHoCgx6lXVYHB", "audioManager", undefined);

      var AudioManager = exports('AudioManager', /*#__PURE__*/function () {
        function AudioManager() {
          this.dictWeaponSoundIndex = {};
          this.mainVolume = 1; // 主音量

          this.environmentalVolume = 1;
          this._musicVolume = 1; //背景音乐音量

          this._soundVolume = 1; //音效音量

          this._musicSwitch = 1; //音乐开关

          this._soundSwitch = 1; //音效开关

          this._mapSound = new Map(); //所有的音效

          this._mapMusic = new Map(); //所有的音乐

          this._persistRootNode = null;
          this._musicSource = null;
          this._curSounds = [];
        }

        var _proto = AudioManager.prototype;
        /**
         * 初始化
         * @returns 
         */

        _proto.init = function init(music, sound, mainVolume, soundVolume, musicVolume, environmentalVolume) {
          if (this._persistRootNode) return; //避免切换场景初始化报错

          this._persistRootNode = new Node('audio');
          director.getScene().addChild(this._persistRootNode);
          director.addPersistRootNode(this._persistRootNode);
          this._musicSwitch = music ? 1 : 0;
          this._soundSwitch = sound ? 1 : 0;
          this.mainVolume = mainVolume;
          this.soundVolume = soundVolume;
          this.musicVolume = musicVolume;
          this.environmentalVolume = environmentalVolume;
        }
        /**
         * 设置当前音乐音量
         */
        ;

        _proto._setCurMusicVolume = function _setCurMusicVolume() {
          //@ts-ignore
          for (var _iterator = _createForOfIteratorHelperLoose(this._mapMusic.values()), _step; !(_step = _iterator()).done;) {
            var value = _step.value;
            value.volume = this.musicVolume;
          }
        }
        /**
         * 设置当前音效音量
         */
        ;

        _proto._setCurSoundVolume = function _setCurSoundVolume() {
          var _this = this; //@ts-ignore


          for (var _iterator2 = _createForOfIteratorHelperLoose(this._mapSound.values()), _step2; !(_step2 = _iterator2()).done;) {
            var value = _step2.value;
            value.forEach(function (source) {
              source.volume = _this.soundVolume;
            });
          }
        }
        /**
        * 获取音效
        * @param clip 
        * @returns 
        */
        ;

        _proto._getAudioSource = function _getAudioSource(clip) {
          var _this2 = this;

          var result;

          this._mapSound.forEach(function (sounds, name) {
            if (clip.name == name) {
              if (sounds.length > 0) {
                var source = sounds.pop();
                result = source;

                _this2._mapSound.set(name, sounds);
              }

              return;
            }
          });

          if (!result) {
            result = this._persistRootNode.addComponent(AudioSource);
          }

          result.clip = clip;
          result.currentTime = 0;
          return result;
        }
        /**
        * 播放音乐
        * @param {String} name 音乐名称可通过Constant.AUDIO_MUSIC 获取
        * @param {Boolean} loop 是否循环播放
        * @param {Function} cb 播放开始时回调
        */
        ;

        _proto.playMusic = /*#__PURE__*/function () {
          var _playMusic = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(name, loop, cb) {
            var path, source, musicSource, clip;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  path = Constant.RESOURCES_FILE_NAME.AUDIO + "/" + Constant.AUDIO_FILE_NAME.MUSIC + "/" + name;
                  source = this._musicSource;
                  source && source.stop();

                  if (!(source && source.clip.name == name)) {
                    _context.next = 6;
                    break;
                  }

                  _context.next = 19;
                  break;

                case 6:
                  if (!this._mapMusic.get(name)) {
                    _context.next = 11;
                    break;
                  } //先把之前的那个背景音乐存起来


                  if (source && !this._mapMusic.get(source.clip.name)) {
                    this._mapMusic.set(source.clip.name, source);
                  } //原来已经创建的就从里面取


                  source = this._mapMusic.get(name);
                  _context.next = 19;
                  break;

                case 11:
                  //如果已经有这个组件了就不用再添加了
                  musicSource = this._getExistMusicSource(name);

                  if (musicSource) {
                    _context.next = 18;
                    break;
                  }

                  _context.next = 15;
                  return ResourceUtil.loadRes(path, AudioClip);

                case 15:
                  clip = _context.sent; //防止网速慢情况下，同时调用多次playMusic,导致短时间多个await

                  musicSource = this._getExistMusicSource(name);

                  if (!musicSource) {
                    musicSource = this._persistRootNode.addComponent(AudioSource);
                    musicSource.clip = clip;

                    this._mapMusic.set(name, musicSource);
                  }

                case 18:
                  source = musicSource;

                case 19:
                  source.currentTime = 0;
                  source.volume = this.musicVolume * this.mainVolume;
                  source.loop = loop;
                  source.playOnAwake = false;
                  this._musicSource = source;

                  if (this._musicSwitch) {
                    source.play();
                  }

                  cb && cb();

                case 26:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function playMusic(_x, _x2, _x3) {
            return _playMusic.apply(this, arguments);
          }

          return playMusic;
        }()
        /**
         * 获取audio节点下已经存在的同名称AudioSource组件
         *
         * @private
         * @param {string} name
         * @return {*} 
         * @memberof AudioManager
         */
        ;

        _proto._getExistMusicSource = function _getExistMusicSource(name) {
          for (var i = this._persistRootNode.components.length - 1; i >= 0; i--) {
            var com = this._persistRootNode.components[i];

            if (com instanceof AudioSource && com.clip.name == name) {
              console.log("###已经有这个音乐组件了", name);
              return com;
            }
          }

          return null;
        }
        /**
         * 播放音效
         * @param {String} name 音效名称可通过Constant.AUDIO_SOUND 获取
         * @param {Boolean} loop 是否循环播放
         */
        ;

        _proto.playSound = /*#__PURE__*/function () {
          var _playSound = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(name, loop, cb) {
            var _this3 = this;

            var path, clip, source;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  if (loop === void 0) {
                    loop = false;
                  }

                  path = Constant.RESOURCES_FILE_NAME.AUDIO + "/" + Constant.AUDIO_FILE_NAME.SOUND + "/" + name;
                  _context2.next = 4;
                  return ResourceUtil.loadRes(path, AudioClip);

                case 4:
                  clip = _context2.sent;
                  source = this._getAudioSource(clip);
                  source.volume = this.soundVolume * this.mainVolume;
                  source.loop = loop;
                  source.playOnAwake = false;

                  this._curSounds.push(source); // console.log(this._curSounds);


                  if (this._soundSwitch) {
                    source.play();
                    setTimeout(function () {
                      if (_this3._curSounds.indexOf(source) >= 0) {
                        _this3._curSounds.splice(_this3._curSounds.indexOf(source), 1);
                      }

                      if (!_this3._mapSound.get(name)) {
                        _this3._mapSound.set(name, [source]);
                      } else {
                        var sounds = _this3._mapSound.get(name);

                        sounds.push(source);

                        _this3._mapSound.set(name, sounds);
                      }

                      cb == null ? void 0 : cb();
                    }, source.duration * 1000);
                  }

                case 11:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function playSound(_x4, _x5, _x6) {
            return _playSound.apply(this, arguments);
          }

          return playSound;
        }()
        /**
         * 当前是否正在播放指定音效
         *
         * @param {string} name
         * @return {*} 
         * @memberof AudioManager
         */
        ;

        _proto.isSoundPlaying = function isSoundPlaying(name) {
          return this._curSounds.some(function (source) {
            var _source$clip;

            return ((_source$clip = source.clip) == null ? void 0 : _source$clip.name) == name;
          });
        }
        /**
         * 是否存在指定音乐
         *
         * @param {string} name
         * @return {*} 
         * @memberof AudioManager
         */
        ;

        _proto.isMusicExist = function isMusicExist(name) {
          return this._mapMusic.get(name) != null;
        }
        /**
         * 指定背景音乐是否正在播放
         *
         * @param {string} name
         * @return {*} 
         * @memberof AudioManager
         */
        ;

        _proto.isMusicPlaying = function isMusicPlaying(name) {
          return this._musicSource && this._musicSource.clip.name == name && this._musicSource.playing;
        }
        /**
         * 预加载音乐
         * @param musics 
         */
        ;

        _proto.preLoadMusics = /*#__PURE__*/function () {
          var _preLoadMusics = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(musics) {
            var i, name, path, clip, musicSource;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  i = 0;

                case 1:
                  if (!(i < musics.length)) {
                    _context3.next = 11;
                    break;
                  }

                  name = musics[i];
                  path = Constant.RESOURCES_FILE_NAME.AUDIO + "/" + Constant.AUDIO_FILE_NAME.MUSIC + "/" + name;
                  _context3.next = 6;
                  return ResourceUtil.loadRes(path, AudioClip);

                case 6:
                  clip = _context3.sent;

                  if (clip) {
                    musicSource = this._persistRootNode.addComponent(AudioSource);
                    musicSource.clip = clip;

                    this._mapMusic.set(name, musicSource);
                  }

                case 8:
                  i++;
                  _context3.next = 1;
                  break;

                case 11:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));

          function preLoadMusics(_x7) {
            return _preLoadMusics.apply(this, arguments);
          }

          return preLoadMusics;
        }()
        /**
         * 开关音乐
         * @param open 
         */
        ;

        _proto.switchMusic = function switchMusic(open) {
          if (open) {
            this.resumeMusic();
          } else {
            this.stopMusic();
          }
        }
        /**
         * 开关音效
         * @param open 
         */
        ;

        _proto.switchSound = function switchSound(open) {
          if (open) {
            this.resumeSound();
          } else {
            this.pauseSound();
          }
        }
        /**
         * 暂停所有音频播放
         */
        ;

        _proto.stopAllAudio = function stopAllAudio() {
          this.stopMusic();
          this.pauseSound();
        }
        /**
         * 暂停当前音乐
         */
        ;

        _proto.stopMusic = function stopMusic() {
          this._musicSwitch = 0;
          this._musicSource && this._musicSource.pause();
        }
        /**
         * 停止所有正在播放的背景音乐（一般只会有一个正在播放的背景音乐）
         *
         * @memberof AudioManager
         */
        ;

        _proto.stopAllMusic = function stopAllMusic() {
          //@ts-ignore
          for (var _iterator3 = _createForOfIteratorHelperLoose(this._mapMusic.values()), _step3; !(_step3 = _iterator3()).done;) {
            var value = _step3.value;

            if (value && value.playing) {
              value.stop();
            }
          }
        }
        /**
         * 删除当前背景音乐
         */
        ;

        _proto.destroyMusic = function destroyMusic() {
          if (this._musicSource.clip) {
            if (this._mapMusic.has(this._musicSource.clip.name)) {
              this._mapMusic["delete"](this._musicSource.clip.name);
            }

            if (this._musicSource) {
              this._musicSource.destroy();

              this._musicSource = null;
            }
          }
        }
        /**
         * 暂停音效
         */
        ;

        _proto.pauseSound = function pauseSound() {
          this._soundSwitch = 0;

          this._curSounds.forEach(function (source) {
            if (source.playing) {
              source.pause();
            }
          });
        }
        /**
         * 停止播放当前所有正在播放的音效
         *
         * @memberof AudioManager
         */
        ;

        _proto.stopAllSound = function stopAllSound() {
          //@ts-ignore
          for (var _iterator4 = _createForOfIteratorHelperLoose(this._mapSound.values()), _step4; !(_step4 = _iterator4()).done;) {
            var value = _step4.value;

            if (value && value.length) {
              value.forEach(function (audio) {
                if (audio && audio.playing) {
                  audio.stop();
                }
              });
            }
          }

          for (var idx = 0; idx < this._curSounds.length; idx++) {
            var audio = this._curSounds[idx];

            if (audio && audio.playing) {
              audio.stop();
            }
          }
        }
        /**
         * 停止播放当前在arr里面的所有音效
         *
         * @param {Array<string>} arr
         * @memberof AudioManager
         */
        ;

        _proto.stopSoundArr = function stopSoundArr(arr) {
          //@ts-ignore
          for (var _iterator5 = _createForOfIteratorHelperLoose(this._mapSound.values()), _step5; !(_step5 = _iterator5()).done;) {
            var value = _step5.value;

            if (value && value.length) {
              value.forEach(function (audio) {
                if (audio && audio.playing && arr.indexOf(audio.clip.name) != -1) {
                  audio.stop();
                }
              });
            }
          }

          for (var idx = 0; idx < this._curSounds.length; idx++) {
            var audio = this._curSounds[idx];

            if (audio && audio.playing && arr.indexOf(audio.clip.name) != -1) {
              audio.stop();
            }
          }
        }
        /**
         * 停止播放当前在arr里面的所有音乐（一般只会有一个正在播放的背景音乐）
         *
         * @param {Array<string>} arr
         * @memberof AudioManager
         */
        ;

        _proto.stopMusicArr = function stopMusicArr(arr) {
          //@ts-ignore
          for (var _iterator6 = _createForOfIteratorHelperLoose(this._mapMusic.values()), _step6; !(_step6 = _iterator6()).done;) {
            var value = _step6.value;

            if (value && value.playing && arr.indexOf(value.clip.name) != -1) {
              value.stop();
            }
          }
        }
        /**
          * 继续播放所有音效和音乐
          */
        ;

        _proto.resumeAll = function resumeAll() {
          this.resumeMusic();
          this.resumeSound();
        }
        /**
         * 恢复音乐
         */
        ;

        _proto.resumeMusic = function resumeMusic() {
          this._musicSwitch = 1;

          if (this._musicSource) {
            this._musicSource.volume = this.musicVolume;

            this._musicSource.play();
          }
        }
        /**
         * 恢复音效
         */
        ;

        _proto.resumeSound = function resumeSound() {
          var _this4 = this;

          this._soundSwitch = 1;

          this._curSounds.forEach(function (source) {
            if (source.state == AudioSource.AudioState.PAUSED) {
              source.volume = _this4.soundVolume;
              source.play();
            }
          });
        }
        /**
         * 移除不需要的音乐
         * @param musics 
         */
        ;

        _proto.removeMusic = function removeMusic(musics) {
          for (var i = 0; i < musics.length; i++) {
            var name = musics[i];

            var audioSource = this._mapMusic.get(name);

            this._mapMusic["delete"](name);

            if (audioSource) {
              //@ts-ignore
              assetManager.releaseAsset(audioSource.clip);
              audioSource.destroy(); //@ts-ignore

              this._mapMusic[name] = null;
            }
          }
        }
        /**
         * 移除不需要的音效
         * @param sounds 
         */
        ;

        _proto.removeSound = function removeSound(sounds) {
          for (var i = 0; i < sounds.length; i++) {
            var name = sounds[i];

            var arrAudioSource = this._mapSound.get(name);

            if (arrAudioSource && arrAudioSource.length) {
              this._mapSound["delete"](name);

              arrAudioSource.forEach(function (audioSource) {
                assetManager.releaseAsset(audioSource.clip);
                audioSource.destroy();
              });
            }
          }
        }
        /**
         * 设置音乐音量
         *
         * @param {number} flag
         * @memberof AudioManager
         */
        ;

        _proto.setMusic = function setMusic(flag) {
          this.musicVolume = flag; //@ts-ignore

          for (var _iterator7 = _createForOfIteratorHelperLoose(this._mapMusic.values()), _step7; !(_step7 = _iterator7()).done;) {
            var value = _step7.value;

            if (value) {
              value.volume = this.musicVolume * this.mainVolume;
            }
          }
        }
        /**
         * 设置音乐音量但是不用保存
         *
         * @param {number} flag
         * @memberof AudioManager
         */
        ;

        _proto.setMusicWithoutSave = function setMusicWithoutSave(flag) {
          //@ts-ignore
          for (var _iterator8 = _createForOfIteratorHelperLoose(this._mapMusic.values()), _step8; !(_step8 = _iterator8()).done;) {
            var value = _step8.value;

            if (value) {
              value.volume = flag * this.mainVolume;
            }
          }
        };

        _proto.setSound = function setSound(flag) {
          var _this5 = this;

          this.soundVolume = flag; //@ts-ignore

          for (var _iterator9 = _createForOfIteratorHelperLoose(this._mapSound.values()), _step9; !(_step9 = _iterator9()).done;) {
            var value = _step9.value;

            if (value && value.length) {
              value.forEach(function (audio) {
                audio.volume = _this5.soundVolume * _this5.mainVolume;
              });
            }
          }

          for (var idx = 0; idx < this._curSounds.length; idx++) {
            var audio = this._curSounds[idx];
            audio.volume = this.soundVolume * this.mainVolume;
          }
        };

        _createClass(AudioManager, [{
          key: "musicSource",
          get: function get() {
            return this._musicSource;
          }
        }, {
          key: "musicVolume",
          get: function get() {
            return this._musicVolume * this._musicSwitch;
          },
          set: function set(v) {
            this._musicVolume = v;

            this._setCurMusicVolume();
          }
        }, {
          key: "soundVolume",
          get: function get() {
            return this._soundVolume * this._soundSwitch;
          },
          set: function set(v) {
            this._soundVolume = v;

            this._setCurSoundVolume();
          }
        }], [{
          key: "instance",
          get: // 环境音音量（希壤专用）
          // public voiceVolume: number = 1;           // 语音音量（希壤专用）
          function get() {
            if (this._instance) {
              return this._instance;
            }

            this._instance = new AudioManager();
            return this._instance;
          }
        }]);

        return AudioManager;
      }());
      AudioManager._instance = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Background.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      // /**
      cclegacy._RF.push({}, "b631dlp5jtOzbNvm4GXOuZW", "Background", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './BackPanel.ts', './FightEvent.ts', './Mediator.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Button, BackPanel, FightEvent, Mediator, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
    }, null, null, function (module) {
      BackPanel = module.BackPanel;
    }, function (module) {
      FightEvent = module.FightEvent;
    }, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ef20bZqJ+lA1IL32p5qccxK", "BackMediator", undefined);
      /**
       * File: BackMediator
       * Description: 
       * Created on: 2024-11-13 10:09:40
       */


      var BackMediator = exports('BackMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(BackMediator, _Mediator);

        function BackMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UIPopup;
          _this._skin = "back/backPanel";
          return _this;
        }

        var _proto = BackMediator.prototype;

        _proto.onClickYes = function onClickYes() {
          this.hide();
          this.event(FightEvent.BackToHome);
        };

        _proto.onClickNo = function onClickNo() {
          this.hide();
        };

        _proto.onInit = function onInit() {
          _Mediator.prototype.onInit.call(this);
        };

        _proto.onShow = function onShow(param) {
          _Mediator.prototype.onShow.call(this);
        };

        _proto.addListeners = function addListeners() {
          _Mediator.prototype.addListeners.call(this);

          var view = this.getComponent(BackPanel);
          view.btnNo.node.on(Button.EventType.CLICK, this.onClickNo, this);
          view.btnYes.node.on(Button.EventType.CLICK, this.onClickYes, this);
        };

        _proto.removeListeners = function removeListeners() {
          _Mediator.prototype.removeListeners.call(this);

          var view = this.getComponent(BackPanel);
          view.btnYes.node.off(Button.EventType.CLICK, this.onClickYes, this);
          view.btnNo.node.off(Button.EventType.CLICK, this.onClickNo, this);
        };

        _proto.onHide = function onHide() {
          _Mediator.prototype.onHide.call(this);
        };

        return BackMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BackPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Component, _updateSceneRenderers;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      _updateSceneRenderers = module.updateSceneRenderers;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "79bcbGGyPFMKJgS1HgXfvYf", "BackPanel", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var BackPanel = exports('BackPanel', (_dec = ccclass("BackPanel"), _dec2 = menu("_game/module/BackPanel"), _dec3 = property(Button), _dec4 = property(Button), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BackPanel, _Component);

        function BackPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btnYes", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnNo", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = BackPanel.prototype;

        _proto.onLoad = function onLoad() {
          _updateSceneRenderers();
        };

        return BackPanel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnYes", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "btnNo", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/boot.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './GameInit.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component, GameInit;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      GameInit = module.GameInit;
    }],
    execute: function () {
      var _dec, _dec2, _class;

      cclegacy._RF.push({}, "c14709iQH1PnKO3XRlwzFju", "boot", undefined); //挂载到login场景下的canvas节点


      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var Boot = exports('Boot', (_dec = ccclass('Boot'), _dec2 = menu('_game/boot'), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Boot, _Component);

        function Boot() {
          return _Component.apply(this, arguments) || this;
        }

        var _proto = Boot.prototype;

        _proto.start = function start() {
          GameInit.start();
        };

        return Boot;
      }(Component)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/boss.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './monster.ts', './clientEvent.ts', './uiManager.ts', './constant.ts', './effectManager.ts', './gameManager.ts', './resourceUtil.ts', './jetFires.ts', './energyBall.ts', './fireBall.ts', './dispersion.ts', './tornado.ts', './fireBallBig.ts', './dispersionSurround.ts', './laser.ts', './audioManager.ts', './util.ts', './poolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Material, MeshRenderer, Vec3, ParticleSystemComponent, AnimationComponent, Monster, ClientEvent, UIManager, Constant, EffectManager, GameManager, ResourceUtil, JetFires, EnergyBall, FireBall, Dispersion, Tornado, FireBallBig, DispersionSurround, Laser, AudioManager, Util, PoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Material = module.Material;
      MeshRenderer = module.MeshRenderer;
      Vec3 = module.Vec3;
      ParticleSystemComponent = module.ParticleSystemComponent;
      AnimationComponent = module.AnimationComponent;
    }, function (module) {
      Monster = module.Monster;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, function (module) {
      JetFires = module.JetFires;
    }, function (module) {
      EnergyBall = module.EnergyBall;
    }, function (module) {
      FireBall = module.FireBall;
    }, function (module) {
      Dispersion = module.Dispersion;
    }, function (module) {
      Tornado = module.Tornado;
    }, function (module) {
      FireBallBig = module.FireBallBig;
    }, function (module) {
      DispersionSurround = module.DispersionSurround;
    }, function (module) {
      Laser = module.Laser;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Util = module.Util;
    }, function (module) {
      PoolManager = module.PoolManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "2b656AN2JJJ2KGEYhDM/3Bh", "boss", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //大龙boss脚本, 继承monster.ts

      var Boss = exports('Boss', (_dec = ccclass('Boss'), _dec2 = property(Node), _dec3 = property(Material), _dec4 = property(Material), _dec5 = property(MeshRenderer), _dec(_class = (_class2 = /*#__PURE__*/function (_Monster) {
        _inheritsLoose(Boss, _Monster);

        function Boss() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Monster.call.apply(_Monster, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ndSocketDragonHead", _descriptor, _assertThisInitialized(_this)); //龙头    


          _initializerDefineProperty(_this, "matDragon", _descriptor2, _assertThisInitialized(_this)); //大龙默认材质


          _initializerDefineProperty(_this, "matDragonHit", _descriptor3, _assertThisInitialized(_this)); //大龙受击后材质变白


          _initializerDefineProperty(_this, "meshDragon", _descriptor4, _assertThisInitialized(_this));

          _this._countdown = 0.2; //闪白倒计时

          _this._oriSkillEuler = new Vec3(); //技能默认角度

          _this._isSkillReleasing = false;
          return _this;
        }

        var _proto = Boss.prototype; //是否正在释放技能 

        _proto.init = function init(baseInfo, layerInfo) {
          var _this$meshDragon;

          _Monster.prototype.init.call(this, baseInfo, layerInfo);

          this._bloodTipOffsetPos.set(0, 50, 0);

          this._hitEffectPos.set(0, 0.04, 0);

          this._isSkillReleasing = false;
          this._countdown = 0.2;
          (_this$meshDragon = this.meshDragon) == null ? void 0 : _this$meshDragon.setMaterial(this.matDragon, 0);
        };

        _proto.refreshBlood = function refreshBlood(bloodNum, tipType) {
          ClientEvent.dispatchEvent(Constant.EVENT_TYPE.REFRESH_BOSS_BLOOD, bloodNum);
          UIManager.instance.showBloodTips(this, tipType, bloodNum, this._bloodTipOffsetPos);
        };

        _proto.playAttackAni = function playAttackAni() {
          _Monster.prototype.playAttackAni.call(this);

          this._isSkillReleasing = false;
        }
        /**
         * 向玩家释放技能
         *
         * @param {boolean} [isNormalAttack=false] 是否是普通攻击、反之喷火
         * @return {*} 
         * @memberof Boss
         */
        ;

        _proto.releaseSkillToPlayer = function releaseSkillToPlayer(isNormalAttack) {
          var _this2 = this;

          if (isNormalAttack === void 0) {
            isNormalAttack = false;
          }

          if (this._isSkillReleasing) {
            return;
          } //boss是非近战的怪物，必须带技能，这里做个容错


          if (!this._allSkillInfo.length) {
            var offsetLength = Util.getTwoNodeXZLength(this.node, GameManager.ndPlayer);

            if (offsetLength <= this._minLength * this._minLengthRatio) {
              GameManager.scriptPlayer.reduceBlood(this.baseInfo);
            }

            return;
          }

          if (isNormalAttack && this.skillInfo.id !== Constant.MONSTER_SKILL.JET_FIRES) {
            this._isSkillReleasing = true;
            ResourceUtil.loadEffectRes(this.skillInfo.resName + "/" + this.skillInfo.resName).then(function (prefab) {
              if (_this2.isMoving) {
                return;
              }

              var ndMonsterSkill = PoolManager.instance.getNode(prefab, GameManager.ndGameManager);
              ndMonsterSkill.setWorldPosition(_this2.node.worldPosition.x, 2.5, _this2.node.worldPosition.z);
              ndMonsterSkill.forward = _this2.attackForward.negative();
              var scriptSkillCollider = null; //怪物技能初始化

              switch (_this2.skillInfo.id) {
                case Constant.MONSTER_SKILL.ENERGY_BALL:
                  ndMonsterSkill.setWorldPosition(_this2.ndSocketDragonHead.worldPosition.x, 2.5, _this2.ndSocketDragonHead.worldPosition.z);
                  scriptSkillCollider = ndMonsterSkill.getComponent(EnergyBall);
                  scriptSkillCollider.init(_this2.skillInfo, _this2.baseInfo, _this2);
                  break;

                case Constant.MONSTER_SKILL.FIRE_BALL:
                  ndMonsterSkill.setWorldPosition(_this2.ndSocketDragonHead.worldPosition);
                  scriptSkillCollider = ndMonsterSkill.getComponent(FireBall);
                  scriptSkillCollider.init(_this2.skillInfo, _this2.baseInfo, _this2);
                  break;

                case Constant.MONSTER_SKILL.DISPERSION:
                  ndMonsterSkill.children.forEach(function (ndChild, idx) {
                    var scriptSkillCollider = ndChild.getComponent(Dispersion);
                    scriptSkillCollider.init(_this2.skillInfo, _this2.baseInfo);
                  });
                  break;

                case Constant.MONSTER_SKILL.TORNADO:
                  ndMonsterSkill.setWorldPosition(_this2.ndSocketDragonHead.worldPosition);
                  scriptSkillCollider = ndMonsterSkill.getComponent(Tornado);
                  scriptSkillCollider.init(_this2.skillInfo, _this2.baseInfo, _this2);
                  break;

                case Constant.MONSTER_SKILL.FIRE_BALL_BIG:
                  scriptSkillCollider = ndMonsterSkill.getComponent(FireBallBig);
                  scriptSkillCollider.init(_this2.skillInfo, _this2.baseInfo, _this2);
                  break;

                case Constant.MONSTER_SKILL.DISPERSION_SURROUND:
                  ndMonsterSkill.children.forEach(function (ndChild) {
                    var scriptSkillCollider = ndChild.getComponent(DispersionSurround);
                    scriptSkillCollider.init(_this2.skillInfo, _this2.baseInfo);
                  });
                  break;

                case Constant.MONSTER_SKILL.LASER:
                  ndMonsterSkill.setWorldPosition(_this2.ndSocketDragonHead.worldPosition);
                  scriptSkillCollider = ndMonsterSkill.getComponent(Laser);
                  scriptSkillCollider.init(_this2.skillInfo, _this2.baseInfo, _this2);
                  break;
              }

              _this2._refreshSkill();
            });
          } else if (!isNormalAttack && this.skillInfo.id === Constant.MONSTER_SKILL.JET_FIRES) {
            this._isSkillReleasing = true;
            ResourceUtil.loadEffectRes(this.skillInfo.resName + "/" + this.skillInfo.resName).then(function (prefab) {
              var _aniCom$defaultClip, _this2$scriptWarning;

              if (_this2.isMoving) {
                return;
              }

              var ndMonsterSkill = PoolManager.instance.getNode(prefab, _this2.ndSocketDragonHead);
              ndMonsterSkill.eulerAngles = _this2._oriSkillEuler;
              var ndChild = ndMonsterSkill.getChildByName("boxCollider");
              ndChild.active = true;
              var scriptSkillCollider = ndMonsterSkill.getComponent(JetFires);
              var options = {
                ndEffect: ndMonsterSkill
              };
              EffectManager.instance.playParticle(options);
              scriptSkillCollider.init(_this2.skillInfo, _this2.baseInfo, _this2);
              AudioManager.instance.playSound(Constant.SOUND.JET_FIRE);
              var arrParticle = ndMonsterSkill.getComponentsInChildren(ParticleSystemComponent);
              arrParticle.forEach(function (element) {
                element.simulationSpeed = 1;
                element == null ? void 0 : element.clear();
                element == null ? void 0 : element.stop();
                element == null ? void 0 : element.play();
              }); //播放触发器动画            

              var aniCom = ndMonsterSkill.getComponent(AnimationComponent);
              var aniState;
              var aniName = (_aniCom$defaultClip = aniCom.defaultClip) == null ? void 0 : _aniCom$defaultClip.name;

              if (aniName) {
                aniCom.getState(aniName).time = 0;
                aniCom.getState(aniName).sample();
                aniCom.play();
                aniState = aniCom.getState(aniName);
                aniState.speed = GameManager.gameSpeed;
              }

              aniCom.once(AnimationComponent.EventType.FINISHED, function () {
                ndChild.active = false;
              });
              (_this2$scriptWarning = _this2.scriptWarning) == null ? void 0 : _this2$scriptWarning.hideWarning();
              setTimeout(function () {
                PoolManager.instance.putNode(ndMonsterSkill);
              }, 4000);

              _this2._refreshSkill();
            });
          }
        }
        /**
         * 大龙受击打后闪白效果
         *
         * @memberof Boss
         */
        ;

        _proto.changeDragonMat = function changeDragonMat() {
          if (this._countdown <= 0) {
            var _this$meshDragon2;

            (_this$meshDragon2 = this.meshDragon) == null ? void 0 : _this$meshDragon2.setMaterial(this.matDragonHit, 0);
            this._countdown = 0.2;
          }
        };

        _proto.lateUpdate = function lateUpdate(deltaTime) {
          if (this._countdown > 0 && !this.isDie) {
            this._countdown -= deltaTime;

            if (this._countdown <= 0) {
              var _this$meshDragon3;

              (_this$meshDragon3 = this.meshDragon) == null ? void 0 : _this$meshDragon3.setMaterial(this.matDragon, 0);
            }
          }
        };

        return Boss;
      }(Monster), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ndSocketDragonHead", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "matDragon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "matDragonHit", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "meshDragon", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/BossBloodBar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameManager.ts', './clientEvent.ts', './constant.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, UITransform, clamp, tween, Component, GameManager, ClientEvent, Constant;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      clamp = module.clamp;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      Constant = module.Constant;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "0c31bPYxslDq6ZMGdcoRTsX", "BossBloodBar", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu; //boss血条脚本

      var BossBloodBar = exports('BossBloodBar', (_dec = ccclass('BossBloodBar'), _dec2 = menu("_game/module/fight/hud/BossBloodBar"), _dec3 = property(UITransform), _dec4 = property(UITransform), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(BossBloodBar, _Component);

        function BossBloodBar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "UIComWhiteBar", _descriptor, _assertThisInitialized(_this)); //白色进度条的UI组件


          _initializerDefineProperty(_this, "UIComRedBar", _descriptor2, _assertThisInitialized(_this)); //血量进度条的UI组件


          _this._whiteBarHeight = 28; //白色进度条高度

          _this._redBarHeight = 28; //血量进度条高度

          _this._totalBlood = 0; //总的血量

          _this._curBlood = 0; //当前血量值

          _this._maxBossWhiteBarWidth = 560; //当前boss血条中白色进度条长度

          _this._maxBossRedBarWidth = 560; //当前boss血条中血量条长度

          _this._isBloodEmpty = false;
          return _this;
        }

        var _proto = BossBloodBar.prototype; //血条是否为空

        _proto.onEnable = function onEnable() {
          ClientEvent.on(Constant.EVENT_TYPE.REFRESH_BOSS_BLOOD, this._refreshBossBlood, this);
        };

        _proto.onDisable = function onDisable() {
          ClientEvent.off(Constant.EVENT_TYPE.REFRESH_BOSS_BLOOD, this._refreshBossBlood, this);
        }
        /**
         * 展示血条
         *
         * @param {*} scriptParent 血条使用者绑定的节点，如玩家或者小怪
         * @param {number} totalBlood 总血量
         * @param {boolean} [isInit=true] 是否是初次展示，初次展示则显示完整血量，否则刷新的时候展示当前血量
         * @memberof BloodBar
         */
        ;

        _proto.show = function show(scriptParent, totalBlood, isInit) {
          if (isInit === void 0) {
            isInit = true;
          }

          this.node.active = true;
          this._totalBlood = totalBlood;
          this._isBloodEmpty = false;

          if (isInit) {
            this._curBlood = this._totalBlood;
          } //当前血量占全部的比例


          var ratio = this._curBlood / this._totalBlood;
          ratio = clamp(ratio, 0, 1); //进度条宽度设置

          this.UIComWhiteBar.setContentSize(ratio * this._maxBossWhiteBarWidth, this._whiteBarHeight);
          this.UIComRedBar.setContentSize(ratio * this._maxBossRedBarWidth, this._redBarHeight);
        }
        /**
         * 刷新boss血量
         *
         * @param {number} num 血量值
         * @memberof BossBloodBar
         */
        ;

        _proto._refreshBossBlood = function _refreshBossBlood(num) {
          var _this2 = this;

          this._curBlood += num;
          var ratio = this._curBlood / this._totalBlood;
          ratio = ratio <= 0 ? 0 : ratio;

          if (num < 0) {
            //减血
            this.UIComRedBar.setContentSize(this._maxBossRedBarWidth * ratio, this._whiteBarHeight);

            if (!this._isBloodEmpty) {
              this._isBloodEmpty = ratio <= 0;
              tween(this.UIComWhiteBar).to(0.7, {
                width: this._maxBossWhiteBarWidth * ratio
              }).call(function () {
                if (ratio <= 0) {
                  _this2.node.active = false;
                  GameManager.scriptBoss.isDie = true;
                }
              }).start();
            }
          }
        };

        return BossBloodBar;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "UIComWhiteBar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "UIComRedBar", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/btn_adapter.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './audioManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, Component, AudioManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "5bcfd/5sbxDwocuPm/Zm+cA", "btn_adapter", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu,
          requireComponent = _decorator.requireComponent,
          disallowMultiple = _decorator.disallowMultiple; //按钮适配脚本

      var btnAdapter = exports('btnAdapter', (_dec = ccclass("btnAdapter"), _dec2 = menu('自定义组件/btnAdapter'), _dec3 = requireComponent(Button), _dec4 = property({
        tooltip: '点击后是否播放点击音效'
      }), _dec5 = property({
        tooltip: '点击音效名'
      }), _dec6 = property({
        tooltip: '是否禁止快速二次点击'
      }), _dec7 = property({
        tooltip: '点击后多久才能再次点击,仅isPreventSecondClick为true生效'
      }), _dec(_class = _dec2(_class = _dec3(_class = disallowMultiple(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(btnAdapter, _Component);

        function btnAdapter() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          /**
           * 点击后是否播放点击音效
           * @property isPlaySound
           * @type {Boolean}
           * @default true
           */

          _initializerDefineProperty(_this, "isPlaySound", _descriptor, _assertThisInitialized(_this));
          /**
           * 点击音效名
           * @property clickSoundName
           * @type {String}
           * @default true
           */


          _initializerDefineProperty(_this, "clickSoundName", _descriptor2, _assertThisInitialized(_this));
          /**
           * 是否禁止快速二次点击
           * @property isPreventSecondClick
           * @type {Boolean}
           * @default true
           */


          _initializerDefineProperty(_this, "isPreventSecondClick", _descriptor3, _assertThisInitialized(_this));
          /**
           * 点击后多久才能再次点击,仅isPreventSecondClick为true生效
           * @property preventTime
           * @type {number}
           * @default true
           */


          _initializerDefineProperty(_this, "preventTime", _descriptor4, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = btnAdapter.prototype;

        _proto.start = function start() {
          var _this2 = this;

          var button = this.node.getComponent(Button);
          this.node.on('click', function () {
            if (_this2.isPreventSecondClick) {
              button.interactable = false;

              _this2.scheduleOnce(function () {
                if (button.node) button.interactable = true;
              }, _this2.preventTime);
            }

            if (_this2.isPlaySound) AudioManager.instance.playSound(_this2.clickSoundName, false);
          });
        } // update (dt) {},
        ;

        return btnAdapter;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "isPlaySound", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return true;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "clickSoundName", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'click';
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "isPreventSecondClick", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "preventTime", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 2;
        }
      })), _class2)) || _class) || _class) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ByteBuf.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "78b89cVC8NIN4ddOTXwR3rc", "ByteBuf", undefined);

      var EDeserializeError = exports('EDeserializeError', /*#__PURE__*/function (EDeserializeError) {
        EDeserializeError[EDeserializeError["OK"] = 0] = "OK";
        EDeserializeError[EDeserializeError["NOT_ENOUGH"] = 1] = "NOT_ENOUGH";
        EDeserializeError[EDeserializeError["EXCEED_SIZE"] = 2] = "EXCEED_SIZE";
        return EDeserializeError;
      }({}));
      var MIN_CAPACITY = 16;
      var f_2power32 = Math.pow(2, 32);
      var f_2power56 = Math.pow(2, 56);
      var ByteBuf = exports('default', /*#__PURE__*/function () {
        function ByteBuf(bytes) {
          this._bytes = void 0;
          this._readerIndex = void 0;
          this._writerIndex = void 0;
          this._bytes = bytes != null ? new Uint8Array(bytes) : ByteBuf.emptyBuff;
          this._readerIndex = 0;
          this._writerIndex = bytes != null ? bytes.length : 0;
        }

        var _proto = ByteBuf.prototype;

        _proto.Replace = function Replace(bytes) {
          this._bytes = new Uint8Array(bytes);
          this._readerIndex = 0;
          this._writerIndex = bytes.length;
        };

        _proto.Replace2 = function Replace2(bytes, beginPos, endPos) {
          this._bytes = new Uint8Array(bytes.subarray(beginPos, endPos));
          this._readerIndex = beginPos;
          this._writerIndex = endPos;
        };

        _proto.getBytesNotSafe = function getBytesNotSafe() {
          return this._bytes;
        };

        _proto.AddWriteIndex = function AddWriteIndex(add) {
          this._writerIndex += add;
        };

        _proto.AddReadIndex = function AddReadIndex(add) {
          this._readerIndex += add;
        };

        _proto.CopyData = function CopyData() {
          var n = this.Remaining;

          if (n > 0) {
            return new Uint8Array(this._bytes.buffer.slice(this._readerIndex, this._writerIndex));
          } else {
            return ByteBuf.emptyBuff;
          }
        };

        _proto.DiscardReadBytes = function DiscardReadBytes() {
          this._bytes.copyWithin(0, this._readerIndex, this._writerIndex);

          this._writerIndex -= this._readerIndex;
          this._readerIndex = 0;
        };

        _proto.WriteBytesWithoutSize = function WriteBytesWithoutSize(bs) {
          this.WriteBytesWithoutSize2(bs, 0, bs.length);
        };

        _proto.WriteBytesWithoutSize2 = function WriteBytesWithoutSize2(bs, offset, len) {
          this.EnsureWrite(len);

          for (var i = 0; i < len; i++) {
            this._bytes[this._writerIndex + i] = bs[offset + i];
          }

          this._writerIndex += len;
        };

        _proto.Clear = function Clear() {
          this._readerIndex = this._writerIndex = 0;
        } //@ts-ignore
        ;

        ByteBuf.PropSize = function PropSize(initSize, needSize) {
          for (var i = Math.max(initSize, MIN_CAPACITY); i <<= 1;) {
            if (i >= needSize) {
              return i;
            }
          }
        };

        _proto.EnsureWrite0 = function EnsureWrite0(size) {
          var needSize = this._writerIndex + size - this._readerIndex;

          if (needSize <= this.Capacity) {
            this._bytes.copyWithin(0, this._readerIndex, this._writerIndex);

            this._writerIndex -= this._readerIndex;
            this._readerIndex = 0;
          } else {
            var newCapacity = ByteBuf.PropSize(this.Capacity, needSize);
            var oldBuf = this._bytes;
            this._bytes = new Uint8Array(newCapacity);

            this._bytes.set(oldBuf.subarray(this._readerIndex, this._writerIndex));

            this._writerIndex -= this._readerIndex;
            this._readerIndex = 0;
          }
        };

        _proto.EnsureWrite = function EnsureWrite(size) {
          if (this._writerIndex + size > this.Capacity) {
            this.EnsureWrite0(size);
          }
        };

        _proto.EnsureRead = function EnsureRead(size) {
          if (this._readerIndex + size > this._writerIndex) {
            throw new Error();
          }
        };

        _proto.CanRead = function CanRead(size) {
          return this._readerIndex + size <= this._writerIndex;
        };

        _proto.WriteBool = function WriteBool(b) {
          this.EnsureWrite(1);
          this._bytes[this._writerIndex++] = b ? 1 : 0;
        };

        _proto.ReadBool = function ReadBool() {
          this.EnsureRead(1);
          return this._bytes[this._readerIndex++] != 0;
        };

        _proto.WriteByte = function WriteByte(x) {
          this.EnsureWrite(1);
          this._bytes[this._writerIndex++] = x;
        };

        _proto.ReadByte = function ReadByte() {
          this.EnsureRead(1);
          return this._bytes[this._readerIndex++];
        };

        _proto.WriteShort = function WriteShort(x) {
          if (x >= 0) {
            if (x < 0x80) {
              this.EnsureWrite(1);
              this._bytes[this._writerIndex++] = x;
              return;
            } else if (x < 0x4000) {
              this.EnsureWrite(2);
              var v = x | 0x8000;
              new DataView(this._bytes.buffer).setUint16(this._writerIndex, v, false);
              this._writerIndex += 2;
              return;
            }
          }

          this.EnsureWrite(4);
          this._bytes[this._writerIndex] = 0xff;
          new DataView(this._bytes.buffer).setInt16(this._writerIndex + 1, x, false);
          this._writerIndex += 3;
        };

        _proto.ReadShort = function ReadShort() {
          this.EnsureRead(1);
          var h = this._bytes[this._readerIndex];

          if (h < 0x80) {
            this._readerIndex++;
            return h;
          } else if (h < 0xc0) {
            this.EnsureRead(2);
            var x = new DataView(this._bytes.buffer).getUint16(this._readerIndex, false) & 0x3fff;
            this._readerIndex += 2;
            return x;
          } else if (h == 0xff) {
            this.EnsureRead(3);

            var _x = new DataView(this._bytes.buffer).getInt16(this._readerIndex + 1, false);

            this._readerIndex += 3;
            return _x;
          } else {
            throw new Error();
          }
        };

        _proto.ReadFshort = function ReadFshort() {
          this.EnsureRead(2);
          var x = new DataView(this._bytes.buffer).getInt16(this._readerIndex, true);
          this._readerIndex += 2;
          return x;
        };

        _proto.WriteFshort = function WriteFshort(x) {
          this.EnsureWrite(2);
          new DataView(this._bytes.buffer).setInt16(this._writerIndex, x, true);
          this._writerIndex += 2;
        };

        _proto.WriteInt = function WriteInt(x) {
          if (x < 0) {
            this.EnsureWrite(5);
            this._bytes[this._writerIndex] = 0xff;
            new DataView(this._bytes.buffer).setInt32(this._writerIndex + 1, x, false);
            this._writerIndex += 5;
          } else if (x < 0x80) {
            this.EnsureWrite(1);
            this._bytes[this._writerIndex++] = x;
          } else if (x < 0x4000) {
            this.EnsureWrite(2);
            new DataView(this._bytes.buffer).setUint16(this._writerIndex, x | 0x8000, false);
            this._writerIndex += 2;
          } else if (x < 0x200000) {
            this.EnsureWrite(4);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex, (x | 0xc00000) << 8, false);
            this._writerIndex += 3;
          } else if (x < 0x10000000) {
            this.EnsureWrite(4);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex, x | 0xe0000000, false);
            this._writerIndex += 4;
          } else {
            this.EnsureWrite(5);
            this._bytes[this._writerIndex] = 0xf0;
            new DataView(this._bytes.buffer).setUint32(this._writerIndex + 1, x, false);
            this._writerIndex += 5;
          }
        };

        _proto.ReadInt = function ReadInt() {
          this.EnsureRead(1);
          var h = this._bytes[this._readerIndex];

          if (h < 0x80) {
            this._readerIndex++;
            return h;
          } else if (h < 0xc0) {
            this.EnsureRead(2);
            var x = new DataView(this._bytes.buffer).getUint16(this._readerIndex, false) & 0x3fff;
            this._readerIndex += 2;
            return x;
          } else if (h < 0xe0) {
            this.EnsureRead(3);

            var _x2 = (h & 0x1f) << 16 | new DataView(this._bytes.buffer).getUint16(this._readerIndex + 1, false);

            this._readerIndex += 3;
            return _x2;
          } else if (h < 0xf0) {
            this.EnsureRead(4);

            var _x3 = new DataView(this._bytes.buffer).getInt32(this._readerIndex, false) & 0x0fffffff;

            this._readerIndex += 4;
            return _x3;
          } else {
            this.EnsureRead(5);

            var _x4 = new DataView(this._bytes.buffer).getInt32(this._readerIndex + 1, false);

            this._readerIndex += 5;
            return _x4;
          }
        };

        _proto.ReadFint = function ReadFint() {
          this.EnsureRead(4);
          var x = new DataView(this._bytes.buffer).getInt32(this._readerIndex, true);
          this._readerIndex += 4;
          return x;
        };

        _proto.WriteFint = function WriteFint(x) {
          this.EnsureWrite(4);
          new DataView(this._bytes.buffer).setInt32(this._writerIndex, x, true);
          this._writerIndex += 4;
        };

        _proto.WriteNumberAsLong = function WriteNumberAsLong(x) {
          if (x < 0) {
            this.EnsureWrite(9);
            this._bytes[this._writerIndex] = 0xff;
            new DataView(this._bytes.buffer).setBigInt64(this._writerIndex + 1, BigInt(x), false);
            this._writerIndex += 9;
          } else if (x < 0x80) {
            this.EnsureWrite(1);
            this._bytes[this._writerIndex++] = x;
          } else if (x < 0x4000) {
            this.EnsureWrite(2);
            new DataView(this._bytes.buffer).setUint16(this._writerIndex, x | 0x8000, false);
            this._writerIndex += 2;
          } else if (x < 0x200000) {
            this.EnsureWrite(4);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex, (x | 0xc00000) << 8, false);
            this._writerIndex += 3;
          } else if (x < 0x10000000) {
            this.EnsureWrite(4);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex, x | 0xe0000000, false);
            this._writerIndex += 4;
          } else if (x < 0x800000000) {
            this.EnsureWrite(8);
            new DataView(this._bytes.buffer).setUint8(this._writerIndex, x / 0x100000000 | 0xf0);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex + 1, x % 0x100000000, false);
            this._writerIndex += 5;
          } else if (x < 0x40000000000) {
            this.EnsureWrite(8);
            new DataView(this._bytes.buffer).setUint16(this._writerIndex, x / 0x100000000 | 0xf800, false);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex + 2, x % 0x100000000, false);
            this._writerIndex += 6;
          } else if (x < 0x200000000000) {
            this.EnsureWrite(8);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex, (x / 0x100000000 | 0xfc0000) << 8, false);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex + 3, x % 0x100000000, false);
            this._writerIndex += 7;
          } else if (x <= Number.MAX_SAFE_INTEGER) {
            this.EnsureWrite(8);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex, x / 0x100000000 | 0xfe000000, false);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex + 4, x % 0x100000000, false);
            this._writerIndex += 8;
          } else if (x < f_2power56) {
            this.EnsureWrite(9);
            var n = BigInt(x);
            new DataView(this._bytes.buffer).setBigInt64(this._writerIndex, n | BigInt(0xfe) << BigInt(56), false);
            this._writerIndex += 8;
          } else {
            this.EnsureWrite(9);
            this._bytes[this._writerIndex] = 0xff;
            new DataView(this._bytes.buffer).setBigInt64(this._writerIndex + 1, BigInt(x), false);
            this._writerIndex += 9;
          }
        };

        _proto.ReadLongAsNumber = function ReadLongAsNumber() {
          this.EnsureRead(1);
          var h = this._bytes[this._readerIndex];

          if (h < 0x80) {
            this._readerIndex++;
            return h;
          } else if (h < 0xc0) {
            this.EnsureRead(2);
            var x = new DataView(this._bytes.buffer).getUint16(this._readerIndex, false) & 0x3fff;
            this._readerIndex += 2;
            return x;
          } else if (h < 0xe0) {
            this.EnsureRead(3);

            var _x5 = (h & 0x1f) << 16 | new DataView(this._bytes.buffer).getUint16(this._readerIndex + 1, false);

            this._readerIndex += 3;
            return _x5;
          } else if (h < 0xf0) {
            this.EnsureRead(4);

            var _x6 = new DataView(this._bytes.buffer).getInt32(this._readerIndex, false) & 0x0fffffff;

            this._readerIndex += 4;
            return _x6;
          } else if (h < 0xf8) {
            this.EnsureRead(5);
            var xl = new DataView(this._bytes.buffer).getUint32(this._readerIndex + 1, false);
            var xh = h & 0x07;
            this._readerIndex += 5;
            return xh * 0x100000000 + xl;
          } else if (h < 0xfc) {
            this.EnsureRead(6);

            var _xl = new DataView(this._bytes.buffer).getUint32(this._readerIndex + 2, false);

            var _xh = new DataView(this._bytes.buffer).getUint16(this._readerIndex, false) & 0x3ff;

            this._readerIndex += 6;
            return _xh * 0x100000000 + _xl;
          } else if (h < 0xfe) {
            this.EnsureRead(7);

            var _xl2 = new DataView(this._bytes.buffer).getUint32(this._readerIndex + 3, false);

            var _xh2 = new DataView(this._bytes.buffer).getUint32(this._readerIndex, false) >> 8 & 0x1ffff;

            this._readerIndex += 7;
            return _xh2 * 0x100000000 + _xl2;
          } else if (h < 0xff) {
            this.EnsureRead(8);

            var _xl3 = new DataView(this._bytes.buffer).getUint32(this._readerIndex + 4, false);

            var _xh3 = new DataView(this._bytes.buffer).getUint32(this._readerIndex, false) & 0xffffff;

            this._readerIndex += 8;
            return _xh3 * f_2power32 + _xl3;
          } else {
            this.EnsureRead(9);

            var _x7 = new DataView(this._bytes.buffer).getBigInt64(this._readerIndex + 1, false);

            this._readerIndex += 9;
            return Number(_x7);
          }
        };

        _proto.WriteLong = function WriteLong(n) {
          if (n < 0 || n >= f_2power56) {
            this.EnsureWrite(9);
            this._bytes[this._writerIndex] = 0xff;
            new DataView(this._bytes.buffer).setBigInt64(this._writerIndex + 1, n, false);
            this._writerIndex += 9;
            return;
          }

          if (n > Number.MAX_SAFE_INTEGER) {
            this.EnsureWrite(8);
            new DataView(this._bytes.buffer).setBigUint64(this._writerIndex, n | BigInt(0xfe) << BigInt(56), false);
            this._writerIndex += 8;
            return;
          }

          var x = Number(n);

          if (x < 0x80) {
            this.EnsureWrite(1);
            this._bytes[this._writerIndex++] = x;
          } else if (x < 0x4000) {
            this.EnsureWrite(2);
            new DataView(this._bytes.buffer).setUint16(this._writerIndex, x | 0x8000, false);
            this._writerIndex += 2;
          } else if (x < 0x200000) {
            this.EnsureWrite(4);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex, (x | 0xc00000) << 8, false);
            this._writerIndex += 3;
          } else if (x < 0x10000000) {
            this.EnsureWrite(4);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex, x | 0xe0000000, false);
            this._writerIndex += 4;
          } else if (x < 0x800000000) {
            this.EnsureWrite(8);
            new DataView(this._bytes.buffer).setUint8(this._writerIndex, x / 0x100000000 | 0xf0);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex + 1, x % 0x100000000, false);
            this._writerIndex += 5;
          } else if (x < 0x40000000000) {
            this.EnsureWrite(8);
            new DataView(this._bytes.buffer).setUint16(this._writerIndex, x / 0x100000000 | 0xf800, false);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex + 2, x % 0x100000000, false);
            this._writerIndex += 6;
          } else if (x < 0x200000000000) {
            this.EnsureWrite(8);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex, (x / 0x100000000 | 0xfc0000) << 8, false);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex + 3, x % 0x100000000, false);
            this._writerIndex += 7;
          } else {
            this.EnsureWrite(8);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex, x / 0x100000000 | 0xfe000000, false);
            new DataView(this._bytes.buffer).setUint32(this._writerIndex + 4, x % 0x100000000, false);
            this._writerIndex += 8;
          }
        };

        _proto.ReadLong = function ReadLong() {
          this.EnsureRead(1);
          var h = this._bytes[this._readerIndex];

          if (h < 0x80) {
            this._readerIndex++;
            return BigInt(h);
          } else if (h < 0xc0) {
            this.EnsureRead(2);
            var x = new DataView(this._bytes.buffer).getUint16(this._readerIndex, false) & 0x3fff;
            this._readerIndex += 2;
            return BigInt(x);
          } else if (h < 0xe0) {
            this.EnsureRead(3);

            var _x8 = (h & 0x1f) << 16 | new DataView(this._bytes.buffer).getUint16(this._readerIndex + 1, false);

            this._readerIndex += 3;
            return BigInt(_x8);
          } else if (h < 0xf0) {
            this.EnsureRead(4);

            var _x9 = new DataView(this._bytes.buffer).getInt32(this._readerIndex, false) & 0x0fffffff;

            this._readerIndex += 4;
            return BigInt(_x9);
          } else if (h < 0xf8) {
            this.EnsureRead(5);
            var xl = new DataView(this._bytes.buffer).getUint32(this._readerIndex + 1, false);
            var xh = h & 0x07;
            this._readerIndex += 5;
            return BigInt(xh * 0x100000000 + xl);
          } else if (h < 0xfc) {
            this.EnsureRead(6);

            var _xl4 = new DataView(this._bytes.buffer).getUint32(this._readerIndex + 2, false);

            var _xh4 = new DataView(this._bytes.buffer).getUint16(this._readerIndex, false) & 0x3ff;

            this._readerIndex += 6;
            return BigInt(_xh4 * 0x100000000 + _xl4);
          } else if (h < 0xfe) {
            this.EnsureRead(7);

            var _xl5 = new DataView(this._bytes.buffer).getUint32(this._readerIndex + 3, false);

            var _xh5 = new DataView(this._bytes.buffer).getUint32(this._readerIndex, false) >> 8 & 0x1ffff;

            this._readerIndex += 7;
            return BigInt(_xh5 * 0x100000000 + _xl5);
          } else if (h < 0xff) {
            this.EnsureRead(8);

            var _xl6 = new DataView(this._bytes.buffer).getUint32(this._readerIndex + 4, false);

            var _xh6 = new DataView(this._bytes.buffer).getUint32(this._readerIndex, false) & 0xffffff;

            this._readerIndex += 8;
            return BigInt(_xh6) << BigInt(32) | BigInt(_xl6);
          } else {
            this.EnsureRead(9);

            var _x10 = new DataView(this._bytes.buffer).getBigInt64(this._readerIndex + 1, false);

            this._readerIndex += 9;
            return _x10;
          }
        };

        _proto.WriteFlong = function WriteFlong(x) {
          this.EnsureWrite(8);
          new DataView(this._bytes.buffer).setBigInt64(this._writerIndex, x, true);
          this._writerIndex += 8;
        };

        _proto.ReadFlong = function ReadFlong() {
          this.EnsureRead(8);
          var x = new DataView(this._bytes.buffer).getBigInt64(this._readerIndex, true);
          this._readerIndex += 8;
          return x;
        };

        _proto.WriteFloat = function WriteFloat(x) {
          this.EnsureWrite(4);
          new DataView(this._bytes.buffer).setFloat32(this._writerIndex, x, true);
          this._writerIndex += 4;
        };

        _proto.ReadFloat = function ReadFloat() {
          this.EnsureRead(4);
          var x = new DataView(this._bytes.buffer).getFloat32(this._readerIndex, true);
          this._readerIndex += 4;
          return x;
        };

        _proto.WriteDouble = function WriteDouble(x) {
          this.EnsureWrite(8);
          new DataView(this._bytes.buffer).setFloat64(this._writerIndex, x, true);
          this._writerIndex += 8;
        };

        _proto.ReadDouble = function ReadDouble() {
          this.EnsureRead(8);
          var x = new DataView(this._bytes.buffer).getFloat64(this._readerIndex, true);
          this._readerIndex += 8;
          return x;
        };

        _proto.WriteSize = function WriteSize(n) {
          this.WriteInt(n);
        };

        _proto.ReadSize = function ReadSize() {
          return this.ReadInt();
        };

        _proto.WriteString = function WriteString(x) {
          var n = new TextEncoder().encode(x).length;
          this.WriteSize(n);

          if (n > 0) {
            this.EnsureWrite(n);
            new TextEncoder().encodeInto(x, this._bytes.subarray(this._writerIndex, this._writerIndex + n));
            this._writerIndex += n;
          }
        };

        _proto.ReadString = function ReadString() {
          var n = this.ReadSize();

          if (n > 0) {
            this.EnsureRead(n);
            var s = new TextDecoder().decode(this._bytes.subarray(this._readerIndex, this._readerIndex + n));
            this._readerIndex += n;
            return s;
          } else {
            return "";
          }
        };

        _proto.WriteBytes = function WriteBytes(x) {
          var n = x != null ? x.length : 0;
          this.WriteSize(n);

          if (n > 0) {
            this.EnsureWrite(n);

            this._bytes.set(x, this._writerIndex);

            this._writerIndex += n;
          }
        };

        _proto.ReadBytes = function ReadBytes() {
          var n = this.ReadSize();

          if (n > 0) {
            this.EnsureRead(n);

            var x = this._bytes.subarray(this._readerIndex, this._readerIndex + n);

            this._readerIndex += n;
            return x;
          } else {
            return ByteBuf.emptyBuff;
          }
        };

        _proto.WriteArrayBuffer = function WriteArrayBuffer(b) {
          this.WriteBytes(new Uint8Array(b));
        };

        _proto.ReadArrayBuffer = function ReadArrayBuffer() {
          return this.ReadBytes().buffer;
        };

        _proto.SkipBytes = function SkipBytes() {
          var n = this.ReadSize();
          this.EnsureRead(n);
          this._readerIndex += n;
        };

        _proto.WriteByteBufWithSize = function WriteByteBufWithSize(o) {
          var n = o.Size;

          if (n > 0) {
            this.WriteSize(n);
            this.WriteBytesWithoutSize2(o._bytes, o._readerIndex, n);
          } else {
            this.WriteByte(0);
          }
        };

        _proto.WriteByteBufWithoutSize = function WriteByteBufWithoutSize(o) {
          var n = o.Size;

          if (n > 0) {
            this.WriteBytesWithoutSize2(o._bytes, o._readerIndex, n);
          }
        };

        _proto.WriteRawTag1 = function WriteRawTag1(b1) {
          this.EnsureWrite(1);
          this._bytes[this._writerIndex++] = b1;
        };

        _proto.WriteRawTag2 = function WriteRawTag2(b1, b2) {
          this.EnsureWrite(2);
          this._bytes[this._writerIndex] = b1;
          this._bytes[this._writerIndex + 1] = b2;
          this._writerIndex += 2;
        };

        _proto.WriteRawTag3 = function WriteRawTag3(b1, b2, b3) {
          this.EnsureWrite(3);
          this._bytes[this._writerIndex] = b1;
          this._bytes[this._writerIndex + 1] = b2;
          this._bytes[this._writerIndex + 2] = b3;
          this._writerIndex += 3;
        };

        _createClass(ByteBuf, [{
          key: "Capacity",
          get: function get() {
            return this._bytes.length;
          }
        }, {
          key: "Size",
          get: function get() {
            return this._writerIndex - this._readerIndex;
          }
        }, {
          key: "Empty",
          get: function get() {
            return this._writerIndex <= this._readerIndex;
          }
        }, {
          key: "NotEmpty",
          get: function get() {
            return this._writerIndex > this._readerIndex;
          }
        }, {
          key: "Remaining",
          get: function get() {
            return this._writerIndex - this._readerIndex;
          }
        }, {
          key: "NotCompactWritable",
          get: function get() {
            return this._bytes.length - this._writerIndex;
          }
        }]);

        return ByteBuf;
      }());
      ByteBuf.emptyBuff = new Uint8Array(0);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/camera.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, input, Input, macro, EventMouse, Quat, Node, Vec3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      input = module.input;
      Input = module.Input;
      macro = module.macro;
      EventMouse = module.EventMouse;
      Quat = module.Quat;
      Node = module.Node;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "f3a75nrXmNBnonqqdUdW9xz", "camera", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //方便上下移动摄像机观察

      var Camera = exports('Camera', (_dec = ccclass('Camera'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Camera, _Component);

        function Camera() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._lookButtonDown = false;
          _this._targetPos = new Vec3();
          _this._vertical = 0;
          _this._horizontal = 0;
          _this._speed = 50;
          _this._rotateSpeed = 0.1;
          _this._panButtonDown = false;
          _this._ratio = 0.2; //倍率

          _this._translatePos = new Vec3();
          _this._mouseWheelPos = new Vec3();
          return _this;
        }

        var _proto = Camera.prototype;

        _proto.onLoad = function onLoad() {};

        _proto.start = function start() {
          this._targetPos = this.node.position;
        };

        _proto.onEnable = function onEnable() {
          this._addEvents();
        };

        _proto.onDisable = function onDisable() {
          this._removeEvents();
        };

        _proto._addEvents = function _addEvents() {
          input.on(Input.EventType.MOUSE_WHEEL, this._onMouseWheel, this);
          input.on(Input.EventType.MOUSE_MOVE, this._onMouseMove, this);
          input.on(Input.EventType.MOUSE_UP, this._onMouseUp, this);
          input.on(Input.EventType.MOUSE_DOWN, this._onMouseDown, this);
          input.on(Input.EventType.KEY_DOWN, this._onKeyDown, this);
          input.on(Input.EventType.KEY_UP, this._onKeyUp, this);
        };

        _proto._removeEvents = function _removeEvents() {
          input.off(Input.EventType.MOUSE_WHEEL, this._onMouseWheel, this);
          input.off(Input.EventType.MOUSE_MOVE, this._onMouseMove, this);
          input.off(Input.EventType.MOUSE_UP, this._onMouseUp, this);
          input.off(Input.EventType.MOUSE_DOWN, this._onMouseDown, this);
          input.off(Input.EventType.KEY_DOWN, this._onKeyDown, this);
          input.off(Input.EventType.KEY_UP, this._onKeyUp, this);
        };

        _proto._onKeyDown = function _onKeyDown(event) {
          if (event.keyCode == macro.KEY.w) {
            this._vertical = -1 * this._ratio;
          } else if (event.keyCode == macro.KEY.s) {
            this._vertical = 1 * this._ratio;
          } else if (event.keyCode == macro.KEY.a) {
            this._horizontal = -1 * this._ratio;
          } else if (event.keyCode == macro.KEY.d) {
            this._horizontal = 1 * this._ratio;
          }
        };

        _proto._onKeyUp = function _onKeyUp(event) {
          if (event.keyCode == macro.KEY.w && this._vertical < 0) {
            this._vertical = 0;
          } else if (event.keyCode == macro.KEY.s && this._vertical > 0) {
            this._vertical = 0;
          } else if (event.keyCode == macro.KEY.a && this._horizontal < 0) {
            this._horizontal = 0;
          } else if (event.keyCode == macro.KEY.d && this._horizontal > 0) {
            this._horizontal = 0;
          }
        };

        _proto._onMouseDown = function _onMouseDown(event) {
          switch (event.getButton()) {
            case EventMouse.BUTTON_LEFT:
              // this.lookButtonDown = true;
              break;
            // case EventMouse.BUTTON_MIDDLE:

            case EventMouse.BUTTON_RIGHT:
              this._panButtonDown = true;
              break;
          }
        };

        _proto._onMouseUp = function _onMouseUp(event) {
          switch (event.getButton()) {
            case EventMouse.BUTTON_LEFT:
              // this.lookButtonDown = false;
              break;
            // case EventMouse.BUTTON_MIDDLE:

            case EventMouse.BUTTON_RIGHT:
              this._panButtonDown = false;
              break;
          }
        };

        _proto._onMouseMove = function _onMouseMove(event) {
          if (this._panButtonDown) {
            var delta = event.getDelta(); // this.targetPos.x -= delta.x;
            // this.targetPos.y -= delta.y;

            this.node.rotate(Quat.fromEuler(new Quat(), 0, -delta.x * this._rotateSpeed, 0), Node.NodeSpace.WORLD);
            this.node.rotate(Quat.fromEuler(new Quat(), delta.y * this._rotateSpeed, 0, 0), Node.NodeSpace.LOCAL);
          }
        };

        _proto._onMouseWheel = function _onMouseWheel(event) {
          var wheel = 0;

          if (event.getScrollY() > 0) {
            wheel = -1 * this._ratio;
          } else if (event.getScrollY() < 0) {
            wheel = 1 * this._ratio;
          }

          this._mouseWheelPos.set(0, 0, wheel * 10);

          this.node.translate(this._mouseWheelPos, Node.NodeSpace.LOCAL);
        };

        _proto.update = function update(deltaTime) {
          // Your update function goes here.
          this._translatePos.set(this._horizontal * deltaTime * this._speed, 0, this._vertical * deltaTime * this._speed);

          this.node.translate(this._translatePos, Node.NodeSpace.LOCAL);
        };

        _createClass(Camera, [{
          key: "lookButtonDown",
          get: function get() {
            return this._lookButtonDown;
          },
          set: function set(v) {
            this._lookButtonDown = v;
          }
        }]);

        return Camera;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/characterRigid.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Vec3, RigidBodyComponent, EPSILON, Component, Constant;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      RigidBodyComponent = module.RigidBodyComponent;
      EPSILON = module.EPSILON;
      Component = module.Component;
    }, function (module) {
      Constant = module.Constant;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "661afbK8/hPNbWGsBzk8GsI", "characterRigid", undefined); //角色刚体碰撞检测脚本


      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var v3_0 = new Vec3();
      var v3_1 = new Vec3();
      var CharacterRigid = exports('CharacterRigid', (_dec = ccclass('CharacterRigid'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(CharacterRigid, _Component);

        function CharacterRigid() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "damping", _descriptor, _assertThisInitialized(_this)); //阻尼


          _initializerDefineProperty(_this, "gravity", _descriptor2, _assertThisInitialized(_this));

          _this._rigidBody = null;
          _this._grounded = true; //是否着地

          _this._velocity = new Vec3(); //线性速度

          _this._curMaxSpeed = 0; //当前最大速度

          _this._prevAngleY = 0; //之前的Y角度值

          _this._stateX = 0; // 1 positive, 0 static, -1 negative

          _this._stateZ = 0;
          return _this;
        }

        var _proto = CharacterRigid.prototype;

        _proto.onLoad = function onLoad() {
          this._rigidBody = this.getComponent(RigidBodyComponent);
        };

        _proto.start = function start() {
          this._prevAngleY = this.node.eulerAngles.y;
        }
        /**
         * 初始化角色最大速度
         *
         * @param {number} moveSpeed
         * @param {number} [ratio=1]
         * @memberof CharacterRigid
         */
        ;

        _proto.initSpeed = function initSpeed(moveSpeed, ratio) {
          if (ratio === void 0) {
            ratio = 1;
          }

          this._curMaxSpeed = moveSpeed * ratio;
        }
        /**
         * 角色移动传入x和z
         *
         * @param {number} x
         * @param {number} z
         */
        ;

        _proto.move = function move(x, z) {
          if (x > 0 && this._stateX < 0 || x < 0 && this._stateX > 0 || z > 0 && this._stateZ < 0 || z < 0 && this._stateZ > 0) {
            this.clearVelocity(); // console.log("当前跟之前方向不一致则清除速度,避免惯性太大");
          }

          this._stateX = x;
          this._stateZ = z; // console.log("_stateX", this._stateX, "z", this._stateZ);
        }
        /**
         * 刚体停止移动
         *
         */
        ;

        _proto.stopMove = function stopMove() {
          this._stateX = 0;
          this._stateZ = 0;
          this.clearVelocity();
        }
        /**
         * 更新刚体状态
         *
         * @private
         * @param {number} dt
         * @return {*} 
         */
        ;

        _proto._updateCharacter = function _updateCharacter(dt) {
          this.updateFunction(dt);
          if (!this.onGround) return;

          if (this._stateX || this._stateZ) {
            v3_0.set(this._stateX, 0, this._stateZ);
            v3_0.normalize().negative();
            this.rigidMove(v3_0, 1);
          }
        }
        /**
         * 清除移动速度
         */
        ;

        _proto.clearVelocity = function clearVelocity() {
          this._rigidBody.clearVelocity();
        }
        /**
         * 刚体移动
         *
         * @param {Vec3} dir
         * @param {number} speed
         */
        ;

        _proto.rigidMove = function rigidMove(dir, speed) {
          this._rigidBody.getLinearVelocity(v3_1);

          Vec3.scaleAndAdd(v3_1, v3_1, dir, speed); // console.log('v3_1' + v3_1);

          var ms = this._curMaxSpeed;
          var len = v3_1.lengthSqr();
          var ratio = 1;

          if (len > ms) {
            if (Math.abs(this.node.eulerAngles.y - this._prevAngleY) >= 10) {
              ratio = 2;
            }

            this._prevAngleY = this.node.eulerAngles.y;
            v3_1.normalize();
            v3_1.multiplyScalar(ms / ratio);
          }

          this._rigidBody.setLinearVelocity(v3_1); // console.log('setLinearVelocity1' + v3_1);

        }
        /**
         * 刷新
         * @param dt 
         */
        ;

        _proto.updateFunction = function updateFunction(dt) {
          // this._updateContactInfo();
          this._applyGravity();

          this._applyDamping();

          this._saveState();
        }
        /**
         * 施加阻尼
         *
         * @private
         * @param {number} [dt=1 / constant.GAME_FRAME]
         */
        ;

        _proto._applyDamping = function _applyDamping(dt) {
          if (dt === void 0) {
            dt = 1 / Constant.GAME_FRAME;
          }

          this._rigidBody.getLinearVelocity(v3_1); // console.log('getLinearVelocity2' + v3_1);


          if (v3_1.lengthSqr() > EPSILON) {
            v3_1.multiplyScalar(Math.pow(1.0 - this.damping, dt));

            this._rigidBody.setLinearVelocity(v3_1); // console.log('setLinearVelocity2' + v3_1);

          }
        }
        /**
         * 施加重力
         *
         * @private
         */
        ;

        _proto._applyGravity = function _applyGravity() {
          var g = this.gravity;
          var m = this._rigidBody.mass;
          v3_1.set(0, m * g, 0);

          this._rigidBody.applyForce(v3_1);
        }
        /**
         * 获取线性速度
         *
         * @private
         */
        ;

        _proto._saveState = function _saveState() {
          this._rigidBody.getLinearVelocity(this._velocity); // console.log('getLinearVelocity3' + this._velocity  + ":" + this._grounded);

        };

        _proto.update = function update(dtS) {
          var dt = 1000 / Constant.GAME_FRAME;

          this._updateCharacter(dt);
        };

        _createClass(CharacterRigid, [{
          key: "velocity",
          get: //重力
          function get() {
            return this._velocity;
          }
        }, {
          key: "onGround",
          get: function get() {
            return this._grounded;
          }
        }]);

        return CharacterRigid;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "damping", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 0.5;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "gravity", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return -10;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/clientEvent.ts", ['cc'], function (exports) {
  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "e55dbzBNn1NUrh8r5zusvCZ", "clientEvent", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ClientEvent = exports('ClientEvent', (_dec = ccclass("ClientEvent"), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function ClientEvent() {}
        /**
         * 监听事件
         * @param {string} eventName 事件名称
         * @param {function} handler 监听函数
         * @param {object} target 监听目标
         */


        ClientEvent.on = function on(eventName, handler, target) {
          var objHandler = {
            handler: handler,
            target: target
          };
          var handlerList = ClientEvent._handlers[eventName];

          if (!handlerList) {
            handlerList = [];
            ClientEvent._handlers[eventName] = handlerList;
          }

          for (var i = 0; i < handlerList.length; i++) {
            if (!handlerList[i]) {
              handlerList[i] = objHandler;
              return i;
            }
          }

          handlerList.push(objHandler);
          return handlerList.length;
        };
        /**
         * 取消监听
         * @param {string} eventName 监听事件
         * @param {function} handler 监听函数
         * @param {object} target 监听目标
         */


        ClientEvent.off = function off(eventName, handler, target) {
          var handlerList = ClientEvent._handlers[eventName];

          if (!handlerList) {
            return;
          }

          for (var i = 0; i < handlerList.length; i++) {
            var oldObj = handlerList[i];

            if (oldObj.handler === handler && (!target || target === oldObj.target)) {
              handlerList.splice(i, 1);
              break;
            }
          }
        };
        /**
         * 分发事件
         * @param {string} eventName 分发事件名
         * @param  {...any} params 分发事件参数
         */


        ClientEvent.dispatchEvent = function dispatchEvent(eventName) {
          for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            args[_key - 1] = arguments[_key];
          }

          var handlerList = ClientEvent._handlers[eventName];
          var args1 = [];
          var i;

          for (i = 1; i < arguments.length; i++) {
            args1.push(arguments[i]);
          }

          if (!handlerList) {
            return;
          }

          for (i = 0; i < handlerList.length; i++) {
            var objHandler = handlerList[i];

            if (objHandler.handler) {
              objHandler.handler.apply(objHandler.target, args1);
            }
          }
        };

        return ClientEvent;
      }(), _class2._handlers = {}, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/cocosAnalytics.min.js", ['./cjs-loader.mjs'], function (exports, module) {
  var loader;
  return {
    setters: [function (module) {
      loader = module.default;
    }],
    execute: function () {
      exports('default', void 0);

      var _cjsExports;

      var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        // #region ORIGINAL CODE

        /*! For license information please see cocosAnalytics.min.js.LICENSE.txt */
        !function (t) {
          var e = {};

          function r(n) {
            if (e[n]) return e[n].exports;
            var i = e[n] = {
              i: n,
              l: !1,
              exports: {}
            };
            return t[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
          }

          r.m = t, r.c = e, r.d = function (t, e, n) {
            r.o(t, e) || Object.defineProperty(t, e, {
              enumerable: !0,
              get: n
            });
          }, r.r = function (t) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(t, Symbol.toStringTag, {
              value: "Module"
            }), Object.defineProperty(t, "__esModule", {
              value: !0
            });
          }, r.t = function (t, e) {
            if (1 & e && (t = r(t)), 8 & e) return t;
            if (4 & e && "object" == typeof t && t && t.__esModule) return t;
            var n = Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", {
              enumerable: !0,
              value: t
            }), 2 & e && "string" != typeof t) for (var i in t) r.d(n, i, function (e) {
              return t[e];
            }.bind(null, i));
            return n;
          }, r.n = function (t) {
            var e = t && t.__esModule ? function () {
              return t["default"];
            } : function () {
              return t;
            };
            return r.d(e, "a", e), e;
          }, r.o = function (t, e) {
            return Object.prototype.hasOwnProperty.call(t, e);
          }, r.p = "/assets/", r(r.s = 3);
        }([function (t, e) {
          var r;

          r = function () {
            return this;
          }();

          try {
            r = r || new Function("return this")();
          } catch (t) {
            "object" == typeof window && (r = window);
          }

          t.exports = r;
        }, function (t, e) {
          t.exports = function (t) {
            return t.webpackPolyfill || (t.deprecate = function () {}, t.paths = [], t.children || (t.children = []), Object.defineProperty(t, "loaded", {
              enumerable: !0,
              get: function get() {
                return t.l;
              }
            }), Object.defineProperty(t, "id", {
              enumerable: !0,
              get: function get() {
                return t.i;
              }
            }), t.webpackPolyfill = 1), t;
          };
        }, function (t, e) {
          var r = {
            utf8: {
              stringToBytes: function stringToBytes(t) {
                return r.bin.stringToBytes(unescape(encodeURIComponent(t)));
              },
              bytesToString: function bytesToString(t) {
                return decodeURIComponent(escape(r.bin.bytesToString(t)));
              }
            },
            bin: {
              stringToBytes: function stringToBytes(t) {
                for (var e = [], r = 0; r < t.length; r++) e.push(255 & t.charCodeAt(r));

                return e;
              },
              bytesToString: function bytesToString(t) {
                for (var e = [], r = 0; r < t.length; r++) e.push(String.fromCharCode(t[r]));

                return e.join("");
              }
            }
          };
          t.exports = r;
        }, function (t, e, r) {
          (function (t, n) {
            var i, o;
            !function (s, a, u) {
              var h = {
                "function": !0,
                object: !0
              },
                  l = h[typeof window] && window || this,
                  c = h[typeof e] && e,
                  f = h[typeof t] && t && !t.nodeType && t,
                  p = c && f && "object" == typeof n && n;
              !p || p.global !== p && p.window !== p && p.self !== p || (l = p), void 0 === (o = "function" == typeof (i = u) ? i.call(e, r, e, t) : i) || (t.exports = o), l.cocosAnalytics = u();
            }(0, window, function () {
              return r(4);
            });
          }).call(this, r(1)(t), r(0));
        }, function (t, e, r) {
          var n = r(5),
              i = r(11),
              o = r(12),
              s = r(15),
              a = r(16),
              u = r(17),
              h = r(18),
              l = r(19),
              c = r(20),
              f = r(21),
              p = r(22),
              d = r(23),
              g = r(24),
              v = {
            data: {
              msgPlus: 0,
              isInit: !1,
              isShowLog: !1,
              msgPool: [],
              apiURL: "https://logstorage.cocos.com/log/v2",
              apiURLReserved: "http://logstorage.cocos.com/log/v2",
              versionCode: "v2"
            },
            version: "2.2.1",
            browserVersion: void 0,
            isActive: !0,
            init: function init(t) {
              this.CAAccount = new a(this), this.CAEvent = new u(this), this.CAPayment = new h(this), this.CALevels = new l(this), this.CATask = new c(this), this.CAItem = new f(this), this.CAVirtual = new p(this), this.CATaskType = new d(this), this.CACustomEvent = new s(this), this.CAAdvertising = new g(this), i.manufacturer = i.manufacturer || "", this.data.appVersion = t.version, this.data.appBuild = t.build, this.data.engine = t.engine || "", this.data.resolution = this._getScreenResolution(), this.data.uniqueID = this._getUniqueID(), this.data.CCID = this._getCCID(), this.data.age = 0, this.data.sex = 0, this._runInterval(), this._bindPageVisibilityEvent(), this.data.isInit = !0, console.log("cocos analytics version :" + this.version);
              var e = this._getLocalStorage("_SDK_APPID_") || "",
                  r = this._getLocalStorage("_SDK_STORE_") || "",
                  n = this._getLocalStorage("_SDK_CALLNUMBER_") || "";

              if (e.length > 0 && e != t.appID || r.length > 0 && r != t.storeID || n.length > 0 && n != t.callNumber) {
                var o = this._getLocalStorage("onlineDuration"),
                    v = this._getLocalStorage("_UID_" + e) || "";

                v.length > 0 && parseInt(o) > 0 && (this.data.appID = e, this.data.userID = v, this.data.storeID = r, this.data.callNumber = n, this.CAAccount.logout());
              }

              return t.appID ? (this.data.appID = t.appID, t.storeID = t.storeID, t.storeID && 0 != t.storeID.replace(/\s/g, "").length ? (this.data.storeID = t.storeID, this.data.callNumber = t.callNumber || "", this.data.userID = "", this.data.channel = "", this._addLocalStorage("_SDK_STORE_", this.data.storeID), this._addLocalStorage("_SDK_APPID_", t.appID), this._addLocalStorage("_SDK_CALLNUMBER_", this.data.callNumber), void this._sendInitEvent()) : (console.log("storeID 不能为空!"), void (this.data.isInit = !1))) : (console.log("appID 不能为空!"), void (this.data.isInit = !1));
            },
            isInited: function isInited() {
              return this.data.isInit;
            },
            onPause: function onPause() {
              this.isActive = !1, this.data.end = (new Date().getTime() + "").substr(0, 10);
              var t = this.data.end - this.data.start;
              this.log("duration..." + t + "s");

              var e = this._generatePostData({
                eventValue: {
                  action: "background",
                  start: this.data.start,
                  end: this.data.end
                },
                eventTag: "successed",
                eventID: "view"
              });

              this._upload(e);
            },
            onResume: function onResume() {
              (this.isActive = !0, this.data.start = (new Date().getTime() + "").substr(0, 10), this.data.end) && this.data.start - this.data.end > 3600 && this._sendInitEvent();
            },
            enableDebug: function enableDebug(t) {
              this.data.isShowLog = t;
            },
            _sendInitEvent: function _sendInitEvent() {
              if (i.runtimeMask) {
                var t = null;
                t = setInterval(function () {
                  if (!i.runtimeMask) {
                    clearInterval(t);

                    var e = this._generatePostData({
                      eventTag: "successed",
                      eventID: "init"
                    });

                    this._upload(e);
                  }
                }.bind(this), 10);
              } else {
                var e = this._generatePostData({
                  eventTag: "successed",
                  eventID: "init"
                });

                this._upload(e);
              }
            },
            _runInterval: function _runInterval() {
              var t = this;
              this.isInited() || (setInterval(function () {
                t.log("cocos analytics check and upload log...");

                for (var e = t._getLocalStorage("_MSG_" + t.data.appID), r = JSON.parse(e || "[]") || t.data.msgPool; 0 !== r.length;) if (r.length <= 100) r.forEach(function (e) {
                  t._submit(e);
                }), r = [], t.data.msgPool = r, t._addLocalStorage("_MSG_" + t.data.appID, t._toJson(t.data.msgPool));else {
                  var n = r.splice(0, 100);
                  t._submit(n), t.data.msgPool = r, t._addLocalStorage("_MSG_" + t.data.appID, t._toJson(t.data.msgPool));
                }
              }, 3e4), setInterval(function () {
                t.isActive && t.data.heartBeat && (t.data.onlineTime = parseInt(t.data.onlineTime || 0) + 1, t._addLocalStorage("onlineDuration", t.data.onlineTime));
              }, 1e3));
            },
            _bindPageVisibilityEvent: function _bindPageVisibilityEvent() {
              var t = "hidden";
              t in document ? document.addEventListener("visibilitychange", r) : (t = "mozHidden") in document ? document.addEventListener("mozvisibilitychange", r) : (t = "webkitHidden") in document ? document.addEventListener("webkitvisibilitychange", r) : (t = "msHidden") in document ? document.addEventListener("msvisibilitychange", r) : "onfocusin" in document ? document.onfocusin = document.onfocusout = r : window.onpageshow = window.onpagehide = window.onfocus = window.onblur = r;
              var e = this;

              function r() {
                var t = document.visibilityState;
                "visible" === t && e.onResume(), "hidden" === t && e.onPause();
              }

              void 0 !== document[t] && r();
            },
            _generatePostData: function _generatePostData(t) {
              var e = this._generateBasePostData();

              if (null == t) return e;

              for (var r in t) null != t[r] && e[r] !== t[r] && (e[r] = t[r]);

              return e;
            },
            _lastMsgID: function _lastMsgID() {
              return this.data.saveMsgID || "";
            },
            _msgID: function _msgID() {
              return this.data.saveMsgID = o(this.data.CCID + (new Date().getTime() + this.data.msgPlus)), this.data.msgPlus = this.data.msgPlus + 1, this.data.saveMsgID;
            },
            _generateBasePostData: function _generateBasePostData() {
              var t = (new Date().getTime() + "").substr(0, 10),
                  e = {
                appVersion: this.data.appVersion,
                versionCode: this.data.versionCode,
                uniqueID: this.data.uniqueID,
                appID: this.data.appID,
                channelID: this.data.channel,
                platform: "H5",
                engine: this.data.engine,
                chargeTime: t,
                userID: this.data.userID,
                resolution: this.data.resolution,
                osVersion: i.os.version,
                language: this._getLanguage(),
                manufacturer: i.manufacturer || "",
                store: this.data.storeID,
                age: this.data.age,
                sex: this.data.sex,
                callNumber: this.data.callNumber,
                model: i.product
              };
              return e.lastMsgID = this._lastMsgID(), e.msgID = this._msgID(), e;
            },
            _toJson: function _toJson(t) {
              return JSON.stringify(t);
            },
            _fromJson: function _fromJson(t) {
              return JSON.parse(t);
            },
            _upload: function _upload(t) {
              this.data.isInit ? this._submit(t) : console.log("Please init first!");
            },
            log: function log() {
              if (!0 === this.data.isShowLog) for (var t in arguments) console.log(arguments[t]);
            },
            _submit: function _submit(t) {
              var e;
              e = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("Microsoft.XMLHTTP");
              var r = this;
              e.onreadystatechange = function () {
                if (4 == e.readyState) {
                  if (0 == e.status && r.data.apiURL != r.data.apiURLReserved) return r.data.apiURL = r.data.apiURLReserved, void r._msgPersist(t);
                  200 == e.status && r.log(r._toJson(t));
                }
              }, e.onerror = function (e) {
                r._msgPersist(t);
              };
              var i = n.encryptPostData(this._toJson(t));
              e.open("POST", this.data.apiURL, !0), e.setRequestHeader("Content-Type", "text/plain;charset=UTF-8"), e.send(i);
            },
            _msgPersist: function _msgPersist(t) {
              this.data.msgPool.push(t), this._addLocalStorage("_MSG_" + this.data.appID, this._toJson(this.data.msgPool));
            },
            _getUniqueID: function _getUniqueID() {
              var t = "_SDK_UNIQUE_ID_",
                  e = this._getLocalStorage(t);

              return e || (e = n.random32Str(), this._addLocalStorage(t, e)), e;
            },
            _getCCID: function _getCCID() {
              var t = n.x64hash128(),
                  e = this._getLocalStorage(t);

              return e || (e = n.random32Str(), this._addLocalStorage(t, e)), e;
            },
            "extends": function _extends(t) {
              t.data = this.data, t.log = this.log, t._toJson = this._toJson, t._upload = this._upload, t._submit = this._submit, t._msgPersist = this._msgPersist, t._generatePostData = this._generatePostData, t._generateBasePostData = this._generateBasePostData, t._addLocalStorage = this._addLocalStorage, t._delLocalStorage = this._delLocalStorage, t._getLocalStorage = this._getLocalStorage, t._getLanguage = this._getLanguage, t._setHeartBeat = this._setHeartBeat, t._lastMsgID = this._lastMsgID, t._msgID = this._msgID;
            },
            _addLocalStorage: function _addLocalStorage(t, e) {
              e = e.toString(), window.localStorage && ("sessionId" == t && window.sessionStorage ? sessionStorage.setItem("__CA_" + t, e) : window.wx && wx.setStorage ? wx.setStorage({
                key: "__CA_" + t,
                data: e
              }) : localStorage.setItem("__CA_" + t, e));
            },
            _delLocalStorage: function _delLocalStorage(t) {
              window.localStorage && ("sessionId" == t && window.sessionStorage ? sessionStorage.removeItem("__CA_" + t) : window.wx && wx.removeStorageSync ? wx.removeStorageSync("__CA_" + t) : localStorage.removeItem("__CA_" + t));
            },
            _getLocalStorage: function _getLocalStorage(t) {
              if (window.localStorage) return "sessionId" == t && window.sessionStorage ? sessionStorage.getItem("__CA_" + t) : window.wx && wx.getStorageSync ? wx.getStorageSync("__CA_" + t) : localStorage.getItem("__CA_" + t);
            },
            _getScreenResolution: function _getScreenResolution() {
              if (null != window.BK && null != window.BK.Director) {
                var t = window.BK.Director.renderSize;
                return t.width + "*" + t.height;
              }

              return null == window.screen.width ? window.screen.availWidth + "*" + window.screen.availHeight : window.screen.width + "*" + window.screen.height;
            },
            _getBrowserVersion: function _getBrowserVersion() {
              if (!this.browserVersion) {
                var t = window.navigator.userAgent.toLowerCase(),
                    e = /micromessenger|qqbrowser|sogou|qzone|liebao|ucbrowser|360 aphone|360browser|edge|baiduboxapp|bidubrowser|baidubrowser|maxthon|mxbrowser|trident|miuibrowser/i.exec(t);
                e || (e = /chrome|safari|firefox|opr|oupeng|opera/i.exec(t));
                var r = e ? e[0] : "unknown";
                "micromessenger" === r ? r = "wechat" : "safari" === r && t.match(/android.*applewebkit/) ? r = "androidbrowser" : "trident" === r ? r = "ie" : "360 aphone" === r ? r = "360browser" : "mxbrowser" === r ? r = "maxthon" : "opr" === r ? r = "opera" : "bidubrowser" === r && (r = "baidubrowser");
                var n = t.match(/(micromessenger|qq|mx|maxthon|edge|bidu|baidu|sogou)(mobile)?(browserType)?\/?([\d.]+)/i);
                n || (n = t.match(/(msie |rv:|firefox|chrome|ucbrowser|oupeng|opera|opr|safari|miui)(mobile)?(browserType)?\/?([\d.]+)/i));
                var i = n ? n[4] : "";
                this.browserVersion = r, i && (this.browserVersion += "-" + i);
              }

              return this.browserVersion;
            },
            _getLanguage: function _getLanguage() {
              var t = window.navigator.language;
              return t = (t = t || window.navigator.browserLanguage) ? t.split("-")[0] : "en";
            },
            _setHeartBeat: function _setHeartBeat(t) {
              this.data.heartBeat = t || !1, this.data.onlineTime = this._getLocalStorage("onlineDuration") || 0;
            }
          };
          t.exports = v;
        }, function (t, e, r) {
          (function (e) {
            r(10);

            function n(t, e) {
              var r = 0,
                  n = t.length;
              if (!t) return 0;

              for (; e < n;) {
                var i = e,
                    o = t.charCodeAt(e);

                if ((r += o <= 127 ? 1 : o <= 2047 ? 2 : o <= 65535 ? 3 : o <= 2097151 ? 4 : o <= 67108863 ? 5 : 6) > 117) {
                  e = i;
                  break;
                }

                e++;
              }

              return e;
            }

            function i(t) {
              var e = new JSEncrypt();
              return e.setPublicKey("-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQC9LCzyypg24REurnyflGy2LdFj\nc63hBk/69r84TAJHlE7x92kUpZBF+7cRf0bFRIRA52OsKlF/ljzCjfOPBE9JfNIq\n+dwF/rSqns+eyQHPQFd5lY692loz9Mo1pNgElpHuJbfydju7F5KTnQYqviCWompm\nLKKdzAPcY1AVJfWd+QIDAQAB\n-----END PUBLIC KEY-----"), e.key.encrypt(t);
            }

            var o = {
              urlsafe_b64encode: function urlsafe_b64encode(t) {
                return t.replace(/\+/g, "-").replace(/\//g, "_").replace(/=+$/, "");
              },
              encryptPostData: function encryptPostData(t) {
                for (var r = new e(0), o = 0, s = t.length; s - o > 0;) {
                  var a = o,
                      u = n(t, o),
                      h = "";

                  do {
                    h = i(t.substr(a, u - a));
                  } while (256 != h.length);

                  r += h, o = u;
                }

                var l = e.from(r, "hex").toString("base64");
                return l = this.urlsafe_b64encode(l);
              },
              x64Add: function x64Add(t, e) {
                t = [t[0] >>> 16, 65535 & t[0], t[1] >>> 16, 65535 & t[1]], e = [e[0] >>> 16, 65535 & e[0], e[1] >>> 16, 65535 & e[1]];
                var r = [0, 0, 0, 0];
                return r[3] += t[3] + e[3], r[2] += r[3] >>> 16, r[3] &= 65535, r[2] += t[2] + e[2], r[1] += r[2] >>> 16, r[2] &= 65535, r[1] += t[1] + e[1], r[0] += r[1] >>> 16, r[1] &= 65535, r[0] += t[0] + e[0], r[0] &= 65535, [r[0] << 16 | r[1], r[2] << 16 | r[3]];
              },
              x64Multiply: function x64Multiply(t, e) {
                t = [t[0] >>> 16, 65535 & t[0], t[1] >>> 16, 65535 & t[1]], e = [e[0] >>> 16, 65535 & e[0], e[1] >>> 16, 65535 & e[1]];
                var r = [0, 0, 0, 0];
                return r[3] += t[3] * e[3], r[2] += r[3] >>> 16, r[3] &= 65535, r[2] += t[2] * e[3], r[1] += r[2] >>> 16, r[2] &= 65535, r[2] += t[3] * e[2], r[1] += r[2] >>> 16, r[2] &= 65535, r[1] += t[1] * e[3], r[0] += r[1] >>> 16, r[1] &= 65535, r[1] += t[2] * e[2], r[0] += r[1] >>> 16, r[1] &= 65535, r[1] += t[3] * e[1], r[0] += r[1] >>> 16, r[1] &= 65535, r[0] += t[0] * e[3] + t[1] * e[2] + t[2] * e[1] + t[3] * e[0], r[0] &= 65535, [r[0] << 16 | r[1], r[2] << 16 | r[3]];
              },
              x64Rotl: function x64Rotl(t, e) {
                return 32 === (e %= 64) ? [t[1], t[0]] : e < 32 ? [t[0] << e | t[1] >>> 32 - e, t[1] << e | t[0] >>> 32 - e] : (e -= 32, [t[1] << e | t[0] >>> 32 - e, t[0] << e | t[1] >>> 32 - e]);
              },
              x64LeftShift: function x64LeftShift(t, e) {
                return 0 === (e %= 64) ? t : e < 32 ? [t[0] << e | t[1] >>> 32 - e, t[1] << e] : [t[1] << e - 32, 0];
              },
              x64Xor: function x64Xor(t, e) {
                return [t[0] ^ e[0], t[1] ^ e[1]];
              },
              x64Fmix: function x64Fmix(t) {
                return t = this.x64Xor(t, [0, t[0] >>> 1]), t = this.x64Multiply(t, [4283543511, 3981806797]), t = this.x64Xor(t, [0, t[0] >>> 1]), t = this.x64Multiply(t, [3301882366, 444984403]), t = this.x64Xor(t, [0, t[0] >>> 1]);
              },
              x64hash128: function x64hash128(t, e) {
                e = e || 0;

                for (var r = (t = t || "0").length % 16, n = t.length - r, i = [0, e], o = [0, e], s = [0, 0], a = [0, 0], u = [2277735313, 289559509], h = [1291169091, 658871167], l = 0; l < n; l += 16) s = [255 & t.charCodeAt(l + 4) | (255 & t.charCodeAt(l + 5)) << 8 | (255 & t.charCodeAt(l + 6)) << 16 | (255 & t.charCodeAt(l + 7)) << 24, 255 & t.charCodeAt(l) | (255 & t.charCodeAt(l + 1)) << 8 | (255 & t.charCodeAt(l + 2)) << 16 | (255 & t.charCodeAt(l + 3)) << 24], a = [255 & t.charCodeAt(l + 12) | (255 & t.charCodeAt(l + 13)) << 8 | (255 & t.charCodeAt(l + 14)) << 16 | (255 & t.charCodeAt(l + 15)) << 24, 255 & t.charCodeAt(l + 8) | (255 & t.charCodeAt(l + 9)) << 8 | (255 & t.charCodeAt(l + 10)) << 16 | (255 & t.charCodeAt(l + 11)) << 24], s = this.x64Multiply(s, u), s = this.x64Rotl(s, 31), s = this.x64Multiply(s, h), i = this.x64Xor(i, s), i = this.x64Rotl(i, 27), i = this.x64Add(i, o), i = this.x64Add(this.x64Multiply(i, [0, 5]), [0, 1390208809]), a = this.x64Multiply(a, h), a = this.x64Rotl(a, 33), a = this.x64Multiply(a, u), o = this.x64Xor(o, a), o = this.x64Rotl(o, 31), o = this.x64Add(o, i), o = this.x64Add(this.x64Multiply(o, [0, 5]), [0, 944331445]);

                switch (s = [0, 0], a = [0, 0], r) {
                  case 15:
                    a = this.x64Xor(a, this.x64LeftShift([0, t.charCodeAt(l + 14)], 48));

                  case 14:
                    a = this.x64Xor(a, this.x64LeftShift([0, t.charCodeAt(l + 13)], 40));

                  case 13:
                    a = this.x64Xor(a, this.x64LeftShift([0, t.charCodeAt(l + 12)], 32));

                  case 12:
                    a = this.x64Xor(a, this.x64LeftShift([0, t.charCodeAt(l + 11)], 24));

                  case 11:
                    a = this.x64Xor(a, this.x64LeftShift([0, t.charCodeAt(l + 10)], 16));

                  case 10:
                    a = this.x64Xor(a, this.x64LeftShift([0, t.charCodeAt(l + 9)], 8));

                  case 9:
                    a = this.x64Xor(a, [0, t.charCodeAt(l + 8)]), a = this.x64Multiply(a, h), a = this.x64Rotl(a, 33), a = this.x64Multiply(a, u), o = this.x64Xor(o, a);

                  case 8:
                    s = this.x64Xor(s, this.x64LeftShift([0, t.charCodeAt(l + 7)], 56));

                  case 7:
                    s = this.x64Xor(s, this.x64LeftShift([0, t.charCodeAt(l + 6)], 48));

                  case 6:
                    s = this.x64Xor(s, this.x64LeftShift([0, t.charCodeAt(l + 5)], 40));

                  case 5:
                    s = this.x64Xor(s, this.x64LeftShift([0, t.charCodeAt(l + 4)], 32));

                  case 4:
                    s = this.x64Xor(s, this.x64LeftShift([0, t.charCodeAt(l + 3)], 24));

                  case 3:
                    s = this.x64Xor(s, this.x64LeftShift([0, t.charCodeAt(l + 2)], 16));

                  case 2:
                    s = this.x64Xor(s, this.x64LeftShift([0, t.charCodeAt(l + 1)], 8));

                  case 1:
                    s = this.x64Xor(s, [0, t.charCodeAt(l)]), s = this.x64Multiply(s, u), s = this.x64Rotl(s, 31), s = this.x64Multiply(s, h), i = this.x64Xor(i, s);
                }

                return i = this.x64Xor(i, [0, t.length]), o = this.x64Xor(o, [0, t.length]), i = this.x64Add(i, o), o = this.x64Add(o, i), i = this.x64Fmix(i), o = this.x64Fmix(o), i = this.x64Add(i, o), o = this.x64Add(o, i), ("00000000" + (i[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (i[1] >>> 0).toString(16)).slice(-8) + ("00000000" + (o[0] >>> 0).toString(16)).slice(-8) + ("00000000" + (o[1] >>> 0).toString(16)).slice(-8);
              },
              random32Str: function random32Str() {
                var t,
                    e = Date.now().toString(32).toUpperCase();
                return t = Date.now(), (e || "") + "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (e) {
                  var r;
                  return r = (t + 16 * Math.random()) % 16 | 0, t = Math.floor(t / 16), "x" === e ? r.toString(16) : (7 & r | 8).toString(16);
                }).replace(/-/g, "").toUpperCase();
              }
            };
            t.exports = o;
          }).call(this, r(6).Buffer);
        }, function (t, e, r) {
          (function (t) {
            var n = r(7),
                i = r(8),
                o = r(9);

            function s() {
              return u.TYPED_ARRAY_SUPPORT ? 2147483647 : 1073741823;
            }

            function a(t, e) {
              if (s() < e) throw new RangeError("Invalid typed array length");
              return u.TYPED_ARRAY_SUPPORT ? (t = new Uint8Array(e)).__proto__ = u.prototype : (null === t && (t = new u(e)), t.length = e), t;
            }

            function u(t, e, r) {
              if (!(u.TYPED_ARRAY_SUPPORT || this instanceof u)) return new u(t, e, r);

              if ("number" == typeof t) {
                if ("string" == typeof e) throw new Error("If encoding is specified then the first argument must be a string");
                return c(this, t);
              }

              return h(this, t, e, r);
            }

            function h(t, e, r, n) {
              if ("number" == typeof e) throw new TypeError('"value" argument must not be a number');
              return "undefined" != typeof ArrayBuffer && e instanceof ArrayBuffer ? function (t, e, r, n) {
                if (e.byteLength, r < 0 || e.byteLength < r) throw new RangeError("'offset' is out of bounds");
                if (e.byteLength < r + (n || 0)) throw new RangeError("'length' is out of bounds");
                e = void 0 === r && void 0 === n ? new Uint8Array(e) : void 0 === n ? new Uint8Array(e, r) : new Uint8Array(e, r, n);
                u.TYPED_ARRAY_SUPPORT ? (t = e).__proto__ = u.prototype : t = f(t, e);
                return t;
              }(t, e, r, n) : "string" == typeof e ? function (t, e, r) {
                "string" == typeof r && "" !== r || (r = "utf8");
                if (!u.isEncoding(r)) throw new TypeError('"encoding" must be a valid string encoding');
                var n = 0 | d(e, r),
                    i = (t = a(t, n)).write(e, r);
                i !== n && (t = t.slice(0, i));
                return t;
              }(t, e, r) : function (t, e) {
                if (u.isBuffer(e)) {
                  var r = 0 | p(e.length);
                  return 0 === (t = a(t, r)).length || e.copy(t, 0, 0, r), t;
                }

                if (e) {
                  if ("undefined" != typeof ArrayBuffer && e.buffer instanceof ArrayBuffer || "length" in e) return "number" != typeof e.length || (n = e.length) != n ? a(t, 0) : f(t, e);
                  if ("Buffer" === e.type && o(e.data)) return f(t, e.data);
                }

                var n;
                throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
              }(t, e);
            }

            function l(t) {
              if ("number" != typeof t) throw new TypeError('"size" argument must be a number');
              if (t < 0) throw new RangeError('"size" argument must not be negative');
            }

            function c(t, e) {
              if (l(e), t = a(t, e < 0 ? 0 : 0 | p(e)), !u.TYPED_ARRAY_SUPPORT) for (var r = 0; r < e; ++r) t[r] = 0;
              return t;
            }

            function f(t, e) {
              var r = e.length < 0 ? 0 : 0 | p(e.length);
              t = a(t, r);

              for (var n = 0; n < r; n += 1) t[n] = 255 & e[n];

              return t;
            }

            function p(t) {
              if (t >= s()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + s().toString(16) + " bytes");
              return 0 | t;
            }

            function d(t, e) {
              if (u.isBuffer(t)) return t.length;
              if ("undefined" != typeof ArrayBuffer && "function" == typeof ArrayBuffer.isView && (ArrayBuffer.isView(t) || t instanceof ArrayBuffer)) return t.byteLength;
              "string" != typeof t && (t = "" + t);
              var r = t.length;
              if (0 === r) return 0;

              for (var n = !1;;) switch (e) {
                case "ascii":
                case "latin1":
                case "binary":
                  return r;

                case "utf8":
                case "utf-8":
                case void 0:
                  return F(t).length;

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return 2 * r;

                case "hex":
                  return r >>> 1;

                case "base64":
                  return j(t).length;

                default:
                  if (n) return F(t).length;
                  e = ("" + e).toLowerCase(), n = !0;
              }
            }

            function g(t, e, r) {
              var n = !1;
              if ((void 0 === e || e < 0) && (e = 0), e > this.length) return "";
              if ((void 0 === r || r > this.length) && (r = this.length), r <= 0) return "";
              if ((r >>>= 0) <= (e >>>= 0)) return "";

              for (t || (t = "utf8");;) switch (t) {
                case "hex":
                  return P(this, e, r);

                case "utf8":
                case "utf-8":
                  return T(this, e, r);

                case "ascii":
                  return A(this, e, r);

                case "latin1":
                case "binary":
                  return E(this, e, r);

                case "base64":
                  return I(this, e, r);

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return B(this, e, r);

                default:
                  if (n) throw new TypeError("Unknown encoding: " + t);
                  t = (t + "").toLowerCase(), n = !0;
              }
            }

            function v(t, e, r) {
              var n = t[e];
              t[e] = t[r], t[r] = n;
            }

            function y(t, e, r, n, i) {
              if (0 === t.length) return -1;

              if ("string" == typeof r ? (n = r, r = 0) : r > 2147483647 ? r = 2147483647 : r < -2147483648 && (r = -2147483648), r = +r, isNaN(r) && (r = i ? 0 : t.length - 1), r < 0 && (r = t.length + r), r >= t.length) {
                if (i) return -1;
                r = t.length - 1;
              } else if (r < 0) {
                if (!i) return -1;
                r = 0;
              }

              if ("string" == typeof e && (e = u.from(e, n)), u.isBuffer(e)) return 0 === e.length ? -1 : m(t, e, r, n, i);
              if ("number" == typeof e) return e &= 255, u.TYPED_ARRAY_SUPPORT && "function" == typeof Uint8Array.prototype.indexOf ? i ? Uint8Array.prototype.indexOf.call(t, e, r) : Uint8Array.prototype.lastIndexOf.call(t, e, r) : m(t, [e], r, n, i);
              throw new TypeError("val must be string, number or Buffer");
            }

            function m(t, e, r, n, i) {
              var o,
                  s = 1,
                  a = t.length,
                  u = e.length;

              if (void 0 !== n && ("ucs2" === (n = String(n).toLowerCase()) || "ucs-2" === n || "utf16le" === n || "utf-16le" === n)) {
                if (t.length < 2 || e.length < 2) return -1;
                s = 2, a /= 2, u /= 2, r /= 2;
              }

              function h(t, e) {
                return 1 === s ? t[e] : t.readUInt16BE(e * s);
              }

              if (i) {
                var l = -1;

                for (o = r; o < a; o++) if (h(t, o) === h(e, -1 === l ? 0 : o - l)) {
                  if (-1 === l && (l = o), o - l + 1 === u) return l * s;
                } else -1 !== l && (o -= o - l), l = -1;
              } else for (r + u > a && (r = a - u), o = r; o >= 0; o--) {
                for (var c = !0, f = 0; f < u; f++) if (h(t, o + f) !== h(e, f)) {
                  c = !1;
                  break;
                }

                if (c) return o;
              }

              return -1;
            }

            function b(t, e, r, n) {
              r = Number(r) || 0;
              var i = t.length - r;
              n ? (n = Number(n)) > i && (n = i) : n = i;
              var o = e.length;
              if (o % 2 != 0) throw new TypeError("Invalid hex string");
              n > o / 2 && (n = o / 2);

              for (var s = 0; s < n; ++s) {
                var a = parseInt(e.substr(2 * s, 2), 16);
                if (isNaN(a)) return s;
                t[r + s] = a;
              }

              return s;
            }

            function w(t, e, r, n) {
              return X(F(e, t.length - r), t, r, n);
            }

            function x(t, e, r, n) {
              return X(function (t) {
                for (var e = [], r = 0; r < t.length; ++r) e.push(255 & t.charCodeAt(r));

                return e;
              }(e), t, r, n);
            }

            function S(t, e, r, n) {
              return x(t, e, r, n);
            }

            function _(t, e, r, n) {
              return X(j(e), t, r, n);
            }

            function D(t, e, r, n) {
              return X(function (t, e) {
                for (var r, n, i, o = [], s = 0; s < t.length && !((e -= 2) < 0); ++s) r = t.charCodeAt(s), n = r >> 8, i = r % 256, o.push(i), o.push(n);

                return o;
              }(e, t.length - r), t, r, n);
            }

            function I(t, e, r) {
              return 0 === e && r === t.length ? n.fromByteArray(t) : n.fromByteArray(t.slice(e, r));
            }

            function T(t, e, r) {
              r = Math.min(t.length, r);

              for (var n = [], i = e; i < r;) {
                var o,
                    s,
                    a,
                    u,
                    h = t[i],
                    l = null,
                    c = h > 239 ? 4 : h > 223 ? 3 : h > 191 ? 2 : 1;
                if (i + c <= r) switch (c) {
                  case 1:
                    h < 128 && (l = h);
                    break;

                  case 2:
                    128 == (192 & (o = t[i + 1])) && (u = (31 & h) << 6 | 63 & o) > 127 && (l = u);
                    break;

                  case 3:
                    o = t[i + 1], s = t[i + 2], 128 == (192 & o) && 128 == (192 & s) && (u = (15 & h) << 12 | (63 & o) << 6 | 63 & s) > 2047 && (u < 55296 || u > 57343) && (l = u);
                    break;

                  case 4:
                    o = t[i + 1], s = t[i + 2], a = t[i + 3], 128 == (192 & o) && 128 == (192 & s) && 128 == (192 & a) && (u = (15 & h) << 18 | (63 & o) << 12 | (63 & s) << 6 | 63 & a) > 65535 && u < 1114112 && (l = u);
                }
                null === l ? (l = 65533, c = 1) : l > 65535 && (l -= 65536, n.push(l >>> 10 & 1023 | 55296), l = 56320 | 1023 & l), n.push(l), i += c;
              }

              return function (t) {
                var e = t.length;
                if (e <= 4096) return String.fromCharCode.apply(String, t);
                var r = "",
                    n = 0;

                for (; n < e;) r += String.fromCharCode.apply(String, t.slice(n, n += 4096));

                return r;
              }(n);
            }

            e.Buffer = u, e.SlowBuffer = function (t) {
              +t != t && (t = 0);
              return u.alloc(+t);
            }, e.INSPECT_MAX_BYTES = 50, u.TYPED_ARRAY_SUPPORT = void 0 !== t.TYPED_ARRAY_SUPPORT ? t.TYPED_ARRAY_SUPPORT : function () {
              try {
                var t = new Uint8Array(1);
                return t.__proto__ = {
                  __proto__: Uint8Array.prototype,
                  foo: function foo() {
                    return 42;
                  }
                }, 42 === t.foo() && "function" == typeof t.subarray && 0 === t.subarray(1, 1).byteLength;
              } catch (t) {
                return !1;
              }
            }(), e.kMaxLength = s(), u.poolSize = 8192, u._augment = function (t) {
              return t.__proto__ = u.prototype, t;
            }, u.from = function (t, e, r) {
              return h(null, t, e, r);
            }, u.TYPED_ARRAY_SUPPORT && (u.prototype.__proto__ = Uint8Array.prototype, u.__proto__ = Uint8Array, "undefined" != typeof Symbol && Symbol.species && u[Symbol.species] === u && Object.defineProperty(u, Symbol.species, {
              value: null,
              configurable: !0
            })), u.alloc = function (t, e, r) {
              return function (t, e, r, n) {
                return l(e), e <= 0 ? a(t, e) : void 0 !== r ? "string" == typeof n ? a(t, e).fill(r, n) : a(t, e).fill(r) : a(t, e);
              }(null, t, e, r);
            }, u.allocUnsafe = function (t) {
              return c(null, t);
            }, u.allocUnsafeSlow = function (t) {
              return c(null, t);
            }, u.isBuffer = function (t) {
              return !(null == t || !t._isBuffer);
            }, u.compare = function (t, e) {
              if (!u.isBuffer(t) || !u.isBuffer(e)) throw new TypeError("Arguments must be Buffers");
              if (t === e) return 0;

              for (var r = t.length, n = e.length, i = 0, o = Math.min(r, n); i < o; ++i) if (t[i] !== e[i]) {
                r = t[i], n = e[i];
                break;
              }

              return r < n ? -1 : n < r ? 1 : 0;
            }, u.isEncoding = function (t) {
              switch (String(t).toLowerCase()) {
                case "hex":
                case "utf8":
                case "utf-8":
                case "ascii":
                case "latin1":
                case "binary":
                case "base64":
                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return !0;

                default:
                  return !1;
              }
            }, u.concat = function (t, e) {
              if (!o(t)) throw new TypeError('"list" argument must be an Array of Buffers');
              if (0 === t.length) return u.alloc(0);
              var r;
              if (void 0 === e) for (e = 0, r = 0; r < t.length; ++r) e += t[r].length;
              var n = u.allocUnsafe(e),
                  i = 0;

              for (r = 0; r < t.length; ++r) {
                var s = t[r];
                if (!u.isBuffer(s)) throw new TypeError('"list" argument must be an Array of Buffers');
                s.copy(n, i), i += s.length;
              }

              return n;
            }, u.byteLength = d, u.prototype._isBuffer = !0, u.prototype.swap16 = function () {
              var t = this.length;
              if (t % 2 != 0) throw new RangeError("Buffer size must be a multiple of 16-bits");

              for (var e = 0; e < t; e += 2) v(this, e, e + 1);

              return this;
            }, u.prototype.swap32 = function () {
              var t = this.length;
              if (t % 4 != 0) throw new RangeError("Buffer size must be a multiple of 32-bits");

              for (var e = 0; e < t; e += 4) v(this, e, e + 3), v(this, e + 1, e + 2);

              return this;
            }, u.prototype.swap64 = function () {
              var t = this.length;
              if (t % 8 != 0) throw new RangeError("Buffer size must be a multiple of 64-bits");

              for (var e = 0; e < t; e += 8) v(this, e, e + 7), v(this, e + 1, e + 6), v(this, e + 2, e + 5), v(this, e + 3, e + 4);

              return this;
            }, u.prototype.toString = function () {
              var t = 0 | this.length;
              return 0 === t ? "" : 0 === arguments.length ? T(this, 0, t) : g.apply(this, arguments);
            }, u.prototype.equals = function (t) {
              if (!u.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
              return this === t || 0 === u.compare(this, t);
            }, u.prototype.inspect = function () {
              var t = "",
                  r = e.INSPECT_MAX_BYTES;
              return this.length > 0 && (t = this.toString("hex", 0, r).match(/.{2}/g).join(" "), this.length > r && (t += " ... ")), "<Buffer " + t + ">";
            }, u.prototype.compare = function (t, e, r, n, i) {
              if (!u.isBuffer(t)) throw new TypeError("Argument must be a Buffer");
              if (void 0 === e && (e = 0), void 0 === r && (r = t ? t.length : 0), void 0 === n && (n = 0), void 0 === i && (i = this.length), e < 0 || r > t.length || n < 0 || i > this.length) throw new RangeError("out of range index");
              if (n >= i && e >= r) return 0;
              if (n >= i) return -1;
              if (e >= r) return 1;
              if (this === t) return 0;

              for (var o = (i >>>= 0) - (n >>>= 0), s = (r >>>= 0) - (e >>>= 0), a = Math.min(o, s), h = this.slice(n, i), l = t.slice(e, r), c = 0; c < a; ++c) if (h[c] !== l[c]) {
                o = h[c], s = l[c];
                break;
              }

              return o < s ? -1 : s < o ? 1 : 0;
            }, u.prototype.includes = function (t, e, r) {
              return -1 !== this.indexOf(t, e, r);
            }, u.prototype.indexOf = function (t, e, r) {
              return y(this, t, e, r, !0);
            }, u.prototype.lastIndexOf = function (t, e, r) {
              return y(this, t, e, r, !1);
            }, u.prototype.write = function (t, e, r, n) {
              if (void 0 === e) n = "utf8", r = this.length, e = 0;else if (void 0 === r && "string" == typeof e) n = e, r = this.length, e = 0;else {
                if (!isFinite(e)) throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
                e |= 0, isFinite(r) ? (r |= 0, void 0 === n && (n = "utf8")) : (n = r, r = void 0);
              }
              var i = this.length - e;
              if ((void 0 === r || r > i) && (r = i), t.length > 0 && (r < 0 || e < 0) || e > this.length) throw new RangeError("Attempt to write outside buffer bounds");
              n || (n = "utf8");

              for (var o = !1;;) switch (n) {
                case "hex":
                  return b(this, t, e, r);

                case "utf8":
                case "utf-8":
                  return w(this, t, e, r);

                case "ascii":
                  return x(this, t, e, r);

                case "latin1":
                case "binary":
                  return S(this, t, e, r);

                case "base64":
                  return _(this, t, e, r);

                case "ucs2":
                case "ucs-2":
                case "utf16le":
                case "utf-16le":
                  return D(this, t, e, r);

                default:
                  if (o) throw new TypeError("Unknown encoding: " + n);
                  n = ("" + n).toLowerCase(), o = !0;
              }
            }, u.prototype.toJSON = function () {
              return {
                type: "Buffer",
                data: Array.prototype.slice.call(this._arr || this, 0)
              };
            };

            function A(t, e, r) {
              var n = "";
              r = Math.min(t.length, r);

              for (var i = e; i < r; ++i) n += String.fromCharCode(127 & t[i]);

              return n;
            }

            function E(t, e, r) {
              var n = "";
              r = Math.min(t.length, r);

              for (var i = e; i < r; ++i) n += String.fromCharCode(t[i]);

              return n;
            }

            function P(t, e, r) {
              var n = t.length;
              (!e || e < 0) && (e = 0), (!r || r < 0 || r > n) && (r = n);

              for (var i = "", o = e; o < r; ++o) i += V(t[o]);

              return i;
            }

            function B(t, e, r) {
              for (var n = t.slice(e, r), i = "", o = 0; o < n.length; o += 2) i += String.fromCharCode(n[o] + 256 * n[o + 1]);

              return i;
            }

            function C(t, e, r) {
              if (t % 1 != 0 || t < 0) throw new RangeError("offset is not uint");
              if (t + e > r) throw new RangeError("Trying to access beyond buffer length");
            }

            function R(t, e, r, n, i, o) {
              if (!u.isBuffer(t)) throw new TypeError('"buffer" argument must be a Buffer instance');
              if (e > i || e < o) throw new RangeError('"value" argument is out of bounds');
              if (r + n > t.length) throw new RangeError("Index out of range");
            }

            function M(t, e, r, n) {
              e < 0 && (e = 65535 + e + 1);

              for (var i = 0, o = Math.min(t.length - r, 2); i < o; ++i) t[r + i] = (e & 255 << 8 * (n ? i : 1 - i)) >>> 8 * (n ? i : 1 - i);
            }

            function O(t, e, r, n) {
              e < 0 && (e = 4294967295 + e + 1);

              for (var i = 0, o = Math.min(t.length - r, 4); i < o; ++i) t[r + i] = e >>> 8 * (n ? i : 3 - i) & 255;
            }

            function L(t, e, r, n, i, o) {
              if (r + n > t.length) throw new RangeError("Index out of range");
              if (r < 0) throw new RangeError("Index out of range");
            }

            function k(t, e, r, n, o) {
              return o || L(t, 0, r, 4), i.write(t, e, r, n, 23, 4), r + 4;
            }

            function N(t, e, r, n, o) {
              return o || L(t, 0, r, 8), i.write(t, e, r, n, 52, 8), r + 8;
            }

            u.prototype.slice = function (t, e) {
              var r,
                  n = this.length;
              if ((t = ~~t) < 0 ? (t += n) < 0 && (t = 0) : t > n && (t = n), (e = void 0 === e ? n : ~~e) < 0 ? (e += n) < 0 && (e = 0) : e > n && (e = n), e < t && (e = t), u.TYPED_ARRAY_SUPPORT) (r = this.subarray(t, e)).__proto__ = u.prototype;else {
                var i = e - t;
                r = new u(i, void 0);

                for (var o = 0; o < i; ++o) r[o] = this[o + t];
              }
              return r;
            }, u.prototype.readUIntLE = function (t, e, r) {
              t |= 0, e |= 0, r || C(t, e, this.length);

              for (var n = this[t], i = 1, o = 0; ++o < e && (i *= 256);) n += this[t + o] * i;

              return n;
            }, u.prototype.readUIntBE = function (t, e, r) {
              t |= 0, e |= 0, r || C(t, e, this.length);

              for (var n = this[t + --e], i = 1; e > 0 && (i *= 256);) n += this[t + --e] * i;

              return n;
            }, u.prototype.readUInt8 = function (t, e) {
              return e || C(t, 1, this.length), this[t];
            }, u.prototype.readUInt16LE = function (t, e) {
              return e || C(t, 2, this.length), this[t] | this[t + 1] << 8;
            }, u.prototype.readUInt16BE = function (t, e) {
              return e || C(t, 2, this.length), this[t] << 8 | this[t + 1];
            }, u.prototype.readUInt32LE = function (t, e) {
              return e || C(t, 4, this.length), (this[t] | this[t + 1] << 8 | this[t + 2] << 16) + 16777216 * this[t + 3];
            }, u.prototype.readUInt32BE = function (t, e) {
              return e || C(t, 4, this.length), 16777216 * this[t] + (this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3]);
            }, u.prototype.readIntLE = function (t, e, r) {
              t |= 0, e |= 0, r || C(t, e, this.length);

              for (var n = this[t], i = 1, o = 0; ++o < e && (i *= 256);) n += this[t + o] * i;

              return n >= (i *= 128) && (n -= Math.pow(2, 8 * e)), n;
            }, u.prototype.readIntBE = function (t, e, r) {
              t |= 0, e |= 0, r || C(t, e, this.length);

              for (var n = e, i = 1, o = this[t + --n]; n > 0 && (i *= 256);) o += this[t + --n] * i;

              return o >= (i *= 128) && (o -= Math.pow(2, 8 * e)), o;
            }, u.prototype.readInt8 = function (t, e) {
              return e || C(t, 1, this.length), 128 & this[t] ? -1 * (255 - this[t] + 1) : this[t];
            }, u.prototype.readInt16LE = function (t, e) {
              e || C(t, 2, this.length);
              var r = this[t] | this[t + 1] << 8;
              return 32768 & r ? 4294901760 | r : r;
            }, u.prototype.readInt16BE = function (t, e) {
              e || C(t, 2, this.length);
              var r = this[t + 1] | this[t] << 8;
              return 32768 & r ? 4294901760 | r : r;
            }, u.prototype.readInt32LE = function (t, e) {
              return e || C(t, 4, this.length), this[t] | this[t + 1] << 8 | this[t + 2] << 16 | this[t + 3] << 24;
            }, u.prototype.readInt32BE = function (t, e) {
              return e || C(t, 4, this.length), this[t] << 24 | this[t + 1] << 16 | this[t + 2] << 8 | this[t + 3];
            }, u.prototype.readFloatLE = function (t, e) {
              return e || C(t, 4, this.length), i.read(this, t, !0, 23, 4);
            }, u.prototype.readFloatBE = function (t, e) {
              return e || C(t, 4, this.length), i.read(this, t, !1, 23, 4);
            }, u.prototype.readDoubleLE = function (t, e) {
              return e || C(t, 8, this.length), i.read(this, t, !0, 52, 8);
            }, u.prototype.readDoubleBE = function (t, e) {
              return e || C(t, 8, this.length), i.read(this, t, !1, 52, 8);
            }, u.prototype.writeUIntLE = function (t, e, r, n) {
              (t = +t, e |= 0, r |= 0, n) || R(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);
              var i = 1,
                  o = 0;

              for (this[e] = 255 & t; ++o < r && (i *= 256);) this[e + o] = t / i & 255;

              return e + r;
            }, u.prototype.writeUIntBE = function (t, e, r, n) {
              (t = +t, e |= 0, r |= 0, n) || R(this, t, e, r, Math.pow(2, 8 * r) - 1, 0);
              var i = r - 1,
                  o = 1;

              for (this[e + i] = 255 & t; --i >= 0 && (o *= 256);) this[e + i] = t / o & 255;

              return e + r;
            }, u.prototype.writeUInt8 = function (t, e, r) {
              return t = +t, e |= 0, r || R(this, t, e, 1, 255, 0), u.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), this[e] = 255 & t, e + 1;
            }, u.prototype.writeUInt16LE = function (t, e, r) {
              return t = +t, e |= 0, r || R(this, t, e, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : M(this, t, e, !0), e + 2;
            }, u.prototype.writeUInt16BE = function (t, e, r) {
              return t = +t, e |= 0, r || R(this, t, e, 2, 65535, 0), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : M(this, t, e, !1), e + 2;
            }, u.prototype.writeUInt32LE = function (t, e, r) {
              return t = +t, e |= 0, r || R(this, t, e, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[e + 3] = t >>> 24, this[e + 2] = t >>> 16, this[e + 1] = t >>> 8, this[e] = 255 & t) : O(this, t, e, !0), e + 4;
            }, u.prototype.writeUInt32BE = function (t, e, r) {
              return t = +t, e |= 0, r || R(this, t, e, 4, 4294967295, 0), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : O(this, t, e, !1), e + 4;
            }, u.prototype.writeIntLE = function (t, e, r, n) {
              if (t = +t, e |= 0, !n) {
                var i = Math.pow(2, 8 * r - 1);
                R(this, t, e, r, i - 1, -i);
              }

              var o = 0,
                  s = 1,
                  a = 0;

              for (this[e] = 255 & t; ++o < r && (s *= 256);) t < 0 && 0 === a && 0 !== this[e + o - 1] && (a = 1), this[e + o] = (t / s >> 0) - a & 255;

              return e + r;
            }, u.prototype.writeIntBE = function (t, e, r, n) {
              if (t = +t, e |= 0, !n) {
                var i = Math.pow(2, 8 * r - 1);
                R(this, t, e, r, i - 1, -i);
              }

              var o = r - 1,
                  s = 1,
                  a = 0;

              for (this[e + o] = 255 & t; --o >= 0 && (s *= 256);) t < 0 && 0 === a && 0 !== this[e + o + 1] && (a = 1), this[e + o] = (t / s >> 0) - a & 255;

              return e + r;
            }, u.prototype.writeInt8 = function (t, e, r) {
              return t = +t, e |= 0, r || R(this, t, e, 1, 127, -128), u.TYPED_ARRAY_SUPPORT || (t = Math.floor(t)), t < 0 && (t = 255 + t + 1), this[e] = 255 & t, e + 1;
            }, u.prototype.writeInt16LE = function (t, e, r) {
              return t = +t, e |= 0, r || R(this, t, e, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8) : M(this, t, e, !0), e + 2;
            }, u.prototype.writeInt16BE = function (t, e, r) {
              return t = +t, e |= 0, r || R(this, t, e, 2, 32767, -32768), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 8, this[e + 1] = 255 & t) : M(this, t, e, !1), e + 2;
            }, u.prototype.writeInt32LE = function (t, e, r) {
              return t = +t, e |= 0, r || R(this, t, e, 4, 2147483647, -2147483648), u.TYPED_ARRAY_SUPPORT ? (this[e] = 255 & t, this[e + 1] = t >>> 8, this[e + 2] = t >>> 16, this[e + 3] = t >>> 24) : O(this, t, e, !0), e + 4;
            }, u.prototype.writeInt32BE = function (t, e, r) {
              return t = +t, e |= 0, r || R(this, t, e, 4, 2147483647, -2147483648), t < 0 && (t = 4294967295 + t + 1), u.TYPED_ARRAY_SUPPORT ? (this[e] = t >>> 24, this[e + 1] = t >>> 16, this[e + 2] = t >>> 8, this[e + 3] = 255 & t) : O(this, t, e, !1), e + 4;
            }, u.prototype.writeFloatLE = function (t, e, r) {
              return k(this, t, e, !0, r);
            }, u.prototype.writeFloatBE = function (t, e, r) {
              return k(this, t, e, !1, r);
            }, u.prototype.writeDoubleLE = function (t, e, r) {
              return N(this, t, e, !0, r);
            }, u.prototype.writeDoubleBE = function (t, e, r) {
              return N(this, t, e, !1, r);
            }, u.prototype.copy = function (t, e, r, n) {
              if (r || (r = 0), n || 0 === n || (n = this.length), e >= t.length && (e = t.length), e || (e = 0), n > 0 && n < r && (n = r), n === r) return 0;
              if (0 === t.length || 0 === this.length) return 0;
              if (e < 0) throw new RangeError("targetStart out of bounds");
              if (r < 0 || r >= this.length) throw new RangeError("sourceStart out of bounds");
              if (n < 0) throw new RangeError("sourceEnd out of bounds");
              n > this.length && (n = this.length), t.length - e < n - r && (n = t.length - e + r);
              var i,
                  o = n - r;
              if (this === t && r < e && e < n) for (i = o - 1; i >= 0; --i) t[i + e] = this[i + r];else if (o < 1e3 || !u.TYPED_ARRAY_SUPPORT) for (i = 0; i < o; ++i) t[i + e] = this[i + r];else Uint8Array.prototype.set.call(t, this.subarray(r, r + o), e);
              return o;
            }, u.prototype.fill = function (t, e, r, n) {
              if ("string" == typeof t) {
                if ("string" == typeof e ? (n = e, e = 0, r = this.length) : "string" == typeof r && (n = r, r = this.length), 1 === t.length) {
                  var i = t.charCodeAt(0);
                  i < 256 && (t = i);
                }

                if (void 0 !== n && "string" != typeof n) throw new TypeError("encoding must be a string");
                if ("string" == typeof n && !u.isEncoding(n)) throw new TypeError("Unknown encoding: " + n);
              } else "number" == typeof t && (t &= 255);

              if (e < 0 || this.length < e || this.length < r) throw new RangeError("Out of range index");
              if (r <= e) return this;
              var o;
              if (e >>>= 0, r = void 0 === r ? this.length : r >>> 0, t || (t = 0), "number" == typeof t) for (o = e; o < r; ++o) this[o] = t;else {
                var s = u.isBuffer(t) ? t : F(new u(t, n).toString()),
                    a = s.length;

                for (o = 0; o < r - e; ++o) this[o + e] = s[o % a];
              }
              return this;
            };
            var U = /[^+\/0-9A-Za-z-_]/g;

            function V(t) {
              return t < 16 ? "0" + t.toString(16) : t.toString(16);
            }

            function F(t, e) {
              var r;
              e = e || 1 / 0;

              for (var n = t.length, i = null, o = [], s = 0; s < n; ++s) {
                if ((r = t.charCodeAt(s)) > 55295 && r < 57344) {
                  if (!i) {
                    if (r > 56319) {
                      (e -= 3) > -1 && o.push(239, 191, 189);
                      continue;
                    }

                    if (s + 1 === n) {
                      (e -= 3) > -1 && o.push(239, 191, 189);
                      continue;
                    }

                    i = r;
                    continue;
                  }

                  if (r < 56320) {
                    (e -= 3) > -1 && o.push(239, 191, 189), i = r;
                    continue;
                  }

                  r = 65536 + (i - 55296 << 10 | r - 56320);
                } else i && (e -= 3) > -1 && o.push(239, 191, 189);

                if (i = null, r < 128) {
                  if ((e -= 1) < 0) break;
                  o.push(r);
                } else if (r < 2048) {
                  if ((e -= 2) < 0) break;
                  o.push(r >> 6 | 192, 63 & r | 128);
                } else if (r < 65536) {
                  if ((e -= 3) < 0) break;
                  o.push(r >> 12 | 224, r >> 6 & 63 | 128, 63 & r | 128);
                } else {
                  if (!(r < 1114112)) throw new Error("Invalid code point");
                  if ((e -= 4) < 0) break;
                  o.push(r >> 18 | 240, r >> 12 & 63 | 128, r >> 6 & 63 | 128, 63 & r | 128);
                }
              }

              return o;
            }

            function j(t) {
              return n.toByteArray(function (t) {
                if ((t = function (t) {
                  return t.trim ? t.trim() : t.replace(/^\s+|\s+$/g, "");
                }(t).replace(U, "")).length < 2) return "";

                for (; t.length % 4 != 0;) t += "=";

                return t;
              }(t));
            }

            function X(t, e, r, n) {
              for (var i = 0; i < n && !(i + r >= e.length || i >= t.length); ++i) e[i + r] = t[i];

              return i;
            }
          }).call(this, r(0));
        }, function (t, e, r) {
          e.byteLength = function (t) {
            var e = h(t),
                r = e[0],
                n = e[1];
            return 3 * (r + n) / 4 - n;
          }, e.toByteArray = function (t) {
            var e,
                r,
                n = h(t),
                s = n[0],
                a = n[1],
                u = new o(function (t, e, r) {
              return 3 * (e + r) / 4 - r;
            }(0, s, a)),
                l = 0,
                c = a > 0 ? s - 4 : s;

            for (r = 0; r < c; r += 4) e = i[t.charCodeAt(r)] << 18 | i[t.charCodeAt(r + 1)] << 12 | i[t.charCodeAt(r + 2)] << 6 | i[t.charCodeAt(r + 3)], u[l++] = e >> 16 & 255, u[l++] = e >> 8 & 255, u[l++] = 255 & e;

            2 === a && (e = i[t.charCodeAt(r)] << 2 | i[t.charCodeAt(r + 1)] >> 4, u[l++] = 255 & e);
            1 === a && (e = i[t.charCodeAt(r)] << 10 | i[t.charCodeAt(r + 1)] << 4 | i[t.charCodeAt(r + 2)] >> 2, u[l++] = e >> 8 & 255, u[l++] = 255 & e);
            return u;
          }, e.fromByteArray = function (t) {
            for (var e, r = t.length, i = r % 3, o = [], s = 0, a = r - i; s < a; s += 16383) o.push(l(t, s, s + 16383 > a ? a : s + 16383));

            1 === i ? (e = t[r - 1], o.push(n[e >> 2] + n[e << 4 & 63] + "==")) : 2 === i && (e = (t[r - 2] << 8) + t[r - 1], o.push(n[e >> 10] + n[e >> 4 & 63] + n[e << 2 & 63] + "="));
            return o.join("");
          };

          for (var n = [], i = [], o = "undefined" != typeof Uint8Array ? Uint8Array : Array, s = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", a = 0, u = s.length; a < u; ++a) n[a] = s[a], i[s.charCodeAt(a)] = a;

          function h(t) {
            var e = t.length;
            if (e % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
            var r = t.indexOf("=");
            return -1 === r && (r = e), [r, r === e ? 0 : 4 - r % 4];
          }

          function l(t, e, r) {
            for (var i, o, s = [], a = e; a < r; a += 3) i = (t[a] << 16 & 16711680) + (t[a + 1] << 8 & 65280) + (255 & t[a + 2]), s.push(n[(o = i) >> 18 & 63] + n[o >> 12 & 63] + n[o >> 6 & 63] + n[63 & o]);

            return s.join("");
          }

          i["-".charCodeAt(0)] = 62, i["_".charCodeAt(0)] = 63;
        }, function (t, e) {
          e.read = function (t, e, r, n, i) {
            var o,
                s,
                a = 8 * i - n - 1,
                u = (1 << a) - 1,
                h = u >> 1,
                l = -7,
                c = r ? i - 1 : 0,
                f = r ? -1 : 1,
                p = t[e + c];

            for (c += f, o = p & (1 << -l) - 1, p >>= -l, l += a; l > 0; o = 256 * o + t[e + c], c += f, l -= 8);

            for (s = o & (1 << -l) - 1, o >>= -l, l += n; l > 0; s = 256 * s + t[e + c], c += f, l -= 8);

            if (0 === o) o = 1 - h;else {
              if (o === u) return s ? NaN : 1 / 0 * (p ? -1 : 1);
              s += Math.pow(2, n), o -= h;
            }
            return (p ? -1 : 1) * s * Math.pow(2, o - n);
          }, e.write = function (t, e, r, n, i, o) {
            var s,
                a,
                u,
                h = 8 * o - i - 1,
                l = (1 << h) - 1,
                c = l >> 1,
                f = 23 === i ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
                p = n ? 0 : o - 1,
                d = n ? 1 : -1,
                g = e < 0 || 0 === e && 1 / e < 0 ? 1 : 0;

            for (e = Math.abs(e), isNaN(e) || e === 1 / 0 ? (a = isNaN(e) ? 1 : 0, s = l) : (s = Math.floor(Math.log(e) / Math.LN2), e * (u = Math.pow(2, -s)) < 1 && (s--, u *= 2), (e += s + c >= 1 ? f / u : f * Math.pow(2, 1 - c)) * u >= 2 && (s++, u /= 2), s + c >= l ? (a = 0, s = l) : s + c >= 1 ? (a = (e * u - 1) * Math.pow(2, i), s += c) : (a = e * Math.pow(2, c - 1) * Math.pow(2, i), s = 0)); i >= 8; t[r + p] = 255 & a, p += d, a /= 256, i -= 8);

            for (s = s << i | a, h += i; h > 0; t[r + p] = 255 & s, p += d, s /= 256, h -= 8);

            t[r + p - d] |= 128 * g;
          };
        }, function (t, e) {
          var r = {}.toString;

          t.exports = Array.isArray || function (t) {
            return "[object Array]" == r.call(t);
          };
        }, function (t, e, r) {
          !function (t) {
            function e(t) {
              return "0123456789abcdefghijklmnopqrstuvwxyz".charAt(t);
            }

            function r(t, e) {
              return t & e;
            }

            function n(t, e) {
              return t | e;
            }

            function i(t, e) {
              return t ^ e;
            }

            function o(t, e) {
              return t & ~e;
            }

            function s(t) {
              if (0 == t) return -1;
              var e = 0;
              return 0 == (65535 & t) && (t >>= 16, e += 16), 0 == (255 & t) && (t >>= 8, e += 8), 0 == (15 & t) && (t >>= 4, e += 4), 0 == (3 & t) && (t >>= 2, e += 2), 0 == (1 & t) && ++e, e;
            }

            function a(t) {
              for (var e = 0; 0 != t;) t &= t - 1, ++e;

              return e;
            }

            var u,
                h,
                _l = function l(t, e) {
              return (_l = Object.setPrototypeOf || {
                __proto__: []
              } instanceof Array && function (t, e) {
                t.__proto__ = e;
              } || function (t, e) {
                for (var r in e) e.hasOwnProperty(r) && (t[r] = e[r]);
              })(t, e);
            },
                c = {
              decode: function decode(t) {
                var e;

                if (void 0 === u) {
                  for (u = Object.create(null), e = 0; e < 64; ++e) u["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".charAt(e)] = e;

                  for (e = 0; e < "= \f\n\r\t\xA0\u2028\u2029".length; ++e) u["= \f\n\r\t\xA0\u2028\u2029".charAt(e)] = -1;
                }

                var r = [],
                    n = 0,
                    i = 0;

                for (e = 0; e < t.length; ++e) {
                  var o = t.charAt(e);
                  if ("=" == o) break;

                  if (-1 != (o = u[o])) {
                    if (void 0 === o) throw new Error("Illegal character at offset " + e);
                    n |= o, ++i >= 4 ? (r[r.length] = n >> 16, r[r.length] = n >> 8 & 255, r[r.length] = 255 & n, n = 0, i = 0) : n <<= 6;
                  }
                }

                switch (i) {
                  case 1:
                    throw new Error("Base64 encoding incomplete: at least 2 bits missing");

                  case 2:
                    r[r.length] = n >> 10;
                    break;

                  case 3:
                    r[r.length] = n >> 16, r[r.length] = n >> 8 & 255;
                }

                return r;
              },
              re: /-----BEGIN [^-]+-----([A-Za-z0-9+\/=\s]+)-----END [^-]+-----|begin-base64[^\n]+\n([A-Za-z0-9+\/=\s]+)====/,
              unarmor: function unarmor(t) {
                var e = c.re.exec(t);
                if (e) if (e[1]) t = e[1];else {
                  if (!e[2]) throw new Error("RegExp out of sync");
                  t = e[2];
                }
                return c.decode(t);
              }
            },
                f = function () {
              function t(e, r) {
                this.hexDigits = "0123456789ABCDEF", e instanceof t ? (this.enc = e.enc, this.pos = e.pos) : (this.enc = e, this.pos = r);
              }

              return t.prototype.get = function (t) {
                if (void 0 === t && (t = this.pos++), t >= this.enc.length) throw new Error("Requesting byte offset " + t + " on a stream of length " + this.enc.length);
                return "string" == typeof this.enc ? this.enc.charCodeAt(t) : this.enc[t];
              }, t.prototype.hexByte = function (t) {
                return this.hexDigits.charAt(t >> 4 & 15) + this.hexDigits.charAt(15 & t);
              }, t.prototype.hexDump = function (t, e, r) {
                for (var n = "", i = t; i < e; ++i) if (n += this.hexByte(this.get(i)), !0 !== r) switch (15 & i) {
                  case 7:
                    n += "  ";
                    break;

                  case 15:
                    n += "\n";
                    break;

                  default:
                    n += " ";
                }

                return n;
              }, t;
            }(),
                p = function () {
              function t(t, e, r, n, i) {
                if (!(n instanceof d)) throw new Error("Invalid tag value.");
                this.stream = t, this.header = e, this.length = r, this.tag = n, this.sub = i;
              }

              return t.prototype.toString = function () {
                return this.typeName() + "@" + this.stream.pos + "[header:" + this.header + ",length:" + this.length + ",sub:" + (null === this.sub ? "null" : this.sub.length) + "]";
              }, t.prototype.posStart = function () {
                return this.stream.pos;
              }, t.prototype.posContent = function () {
                return this.stream.pos + this.header;
              }, t.prototype.posEnd = function () {
                return this.stream.pos + this.header + Math.abs(this.length);
              }, t.prototype.toHexString = function () {
                return this.stream.hexDump(this.posStart(), this.posEnd(), !0);
              }, t.decodeLength = function (t) {
                var e = t.get(),
                    r = 127 & e;
                if (r == e) return r;
                if (r > 6) throw new Error("Length over 48 bits not supported at position " + (t.pos - 1));
                if (0 === r) return null;
                e = 0;

                for (var n = 0; n < r; ++n) e = 256 * e + t.get();

                return e;
              }, t.prototype.getHexStringValue = function () {
                var t = this.toHexString(),
                    e = 2 * this.header,
                    r = 2 * this.length;
                return t.substr(e, r);
              }, t.decode = function (e) {
                var r;
                r = e instanceof f ? e : new f(e, 0);

                var n = new f(r),
                    i = new d(r),
                    o = t.decodeLength(r),
                    s = r.pos,
                    a = s - n.pos,
                    u = null,
                    h = function h() {
                  var e = [];

                  if (null !== o) {
                    for (var n = s + o; r.pos < n;) e[e.length] = t.decode(r);

                    if (r.pos != n) throw new Error("Content size is not correct for container starting at offset " + s);
                  } else try {
                    for (;;) {
                      var i = t.decode(r);
                      if (i.tag.isEOC()) break;
                      e[e.length] = i;
                    }

                    o = s - r.pos;
                  } catch (t) {
                    throw new Error("Exception while decoding undefined length content: " + t);
                  }

                  return e;
                };

                if (i.tagConstructed) u = h();else if (i.isUniversal() && (3 == i.tagNumber || 4 == i.tagNumber)) try {
                  if (3 == i.tagNumber && 0 != r.get()) throw new Error("BIT STRINGs with unused bits cannot encapsulate.");
                  u = h();

                  for (var l = 0; l < u.length; ++l) if (u[l].tag.isEOC()) throw new Error("EOC is not supposed to be actual content.");
                } catch (t) {
                  u = null;
                }

                if (null === u) {
                  if (null === o) throw new Error("We can't skip over an invalid tag with undefined length at offset " + s);
                  r.pos = s + Math.abs(o);
                }

                return new t(n, a, o, i, u);
              }, t;
            }(),
                d = function () {
              function t(t) {
                var e = t.get();
                this.tagClass = e >> 6, this.tagConstructed = 0 != (32 & e), this.tagNumber = 31 & e, 31 == this.tagNumber && null.error(0);
              }

              return t.prototype.isUniversal = function () {
                return 0 === this.tagClass;
              }, t.prototype.isEOC = function () {
                return 0 === this.tagClass && 0 === this.tagNumber;
              }, t;
            }(),
                g = function () {
              function t(t, e, r) {
                null != t && ("number" == typeof t ? this.fromNumber(t, e, r) : null == e && "string" != typeof t ? this.fromString(t, 256) : this.fromString(t, e));
              }

              return t.prototype.toString = function (t) {
                if (this.s < 0) return "-" + this.negate().toString(t);
                var r;
                if (16 == t) r = 4;else if (8 == t) r = 3;else if (2 == t) r = 1;else if (32 == t) r = 5;else {
                  if (4 != t) return this.toRadix(t);
                  r = 2;
                }
                var n,
                    i = (1 << r) - 1,
                    o = !1,
                    s = "",
                    a = this.t,
                    u = this.DB - a * this.DB % r;
                if (a-- > 0) for (u < this.DB && (n = this[a] >> u) > 0 && (o = !0, s = e(n)); a >= 0;) u < r ? (n = (this[a] & (1 << u) - 1) << r - u, n |= this[--a] >> (u += this.DB - r)) : (n = this[a] >> (u -= r) & i, u <= 0 && (u += this.DB, --a)), n > 0 && (o = !0), o && (s += e(n));
                return o ? s : "0";
              }, t.prototype.negate = function () {
                var e = b();
                return t.ZERO.subTo(this, e), e;
              }, t.prototype.abs = function () {
                return this.s < 0 ? this.negate() : this;
              }, t.prototype.compareTo = function (t) {
                var e = this.s - t.s;
                if (0 != e) return e;
                var r = this.t;
                if (0 != (e = r - t.t)) return this.s < 0 ? -e : e;

                for (; --r >= 0;) if (0 != (e = this[r] - t[r])) return e;

                return 0;
              }, t.prototype.bitLength = function () {
                return this.t <= 0 ? 0 : this.DB * (this.t - 1) + T(this[this.t - 1] ^ this.s & this.DM);
              }, t.prototype.mod = function (e) {
                var r = b();
                return this.abs().divRemTo(e, null, r), this.s < 0 && r.compareTo(t.ZERO) > 0 && e.subTo(r, r), r;
              }, t.prototype.modPowInt = function (t, e) {
                var r;
                return r = t < 256 || e.isEven() ? new y(e) : new m(e), this.exp(t, r);
              }, t.prototype.clone = function () {
                var t = b();
                return this.copyTo(t), t;
              }, t.prototype.intValue = function () {
                if (this.s < 0) {
                  if (1 == this.t) return this[0] - this.DV;
                  if (0 == this.t) return -1;
                } else {
                  if (1 == this.t) return this[0];
                  if (0 == this.t) return 0;
                }

                return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
              }, t.prototype.byteValue = function () {
                return 0 == this.t ? this.s : this[0] << 24 >> 24;
              }, t.prototype.shortValue = function () {
                return 0 == this.t ? this.s : this[0] << 16 >> 16;
              }, t.prototype.signum = function () {
                return this.s < 0 ? -1 : this.t <= 0 || 1 == this.t && this[0] <= 0 ? 0 : 1;
              }, t.prototype.equals = function (t) {
                return 0 == this.compareTo(t);
              }, t.prototype.min = function (t) {
                return this.compareTo(t) < 0 ? this : t;
              }, t.prototype.max = function (t) {
                return this.compareTo(t) > 0 ? this : t;
              }, t.prototype.and = function (t) {
                var e = b();
                return this.bitwiseTo(t, r, e), e;
              }, t.prototype.or = function (t) {
                var e = b();
                return this.bitwiseTo(t, n, e), e;
              }, t.prototype.xor = function (t) {
                var e = b();
                return this.bitwiseTo(t, i, e), e;
              }, t.prototype.andNot = function (t) {
                var e = b();
                return this.bitwiseTo(t, o, e), e;
              }, t.prototype.not = function () {
                for (var t = b(), e = 0; e < this.t; ++e) t[e] = this.DM & ~this[e];

                return t.t = this.t, t.s = ~this.s, t;
              }, t.prototype.shiftLeft = function (t) {
                var e = b();
                return t < 0 ? this.rShiftTo(-t, e) : this.lShiftTo(t, e), e;
              }, t.prototype.shiftRight = function (t) {
                var e = b();
                return t < 0 ? this.lShiftTo(-t, e) : this.rShiftTo(t, e), e;
              }, t.prototype.getLowestSetBit = function () {
                for (var t = 0; t < this.t; ++t) if (0 != this[t]) return t * this.DB + s(this[t]);

                return this.s < 0 ? this.t * this.DB : -1;
              }, t.prototype.bitCount = function () {
                for (var t = 0, e = this.s & this.DM, r = 0; r < this.t; ++r) t += a(this[r] ^ e);

                return t;
              }, t.prototype.testBit = function (t) {
                var e = Math.floor(t / this.DB);
                return e >= this.t ? 0 != this.s : 0 != (this[e] & 1 << t % this.DB);
              }, t.prototype.setBit = function (t) {
                return this.changeBit(t, n);
              }, t.prototype.clearBit = function (t) {
                return this.changeBit(t, o);
              }, t.prototype.flipBit = function (t) {
                return this.changeBit(t, i);
              }, t.prototype.add = function (t) {
                var e = b();
                return this.addTo(t, e), e;
              }, t.prototype.subtract = function (t) {
                var e = b();
                return this.subTo(t, e), e;
              }, t.prototype.multiply = function (t) {
                var e = b();
                return this.multiplyTo(t, e), e;
              }, t.prototype.divide = function (t) {
                var e = b();
                return this.divRemTo(t, e, null), e;
              }, t.prototype.remainder = function (t) {
                var e = b();
                return this.divRemTo(t, null, e), e;
              }, t.prototype.divideAndRemainder = function (t) {
                var e = b(),
                    r = b();
                return this.divRemTo(t, e, r), [e, r];
              }, t.prototype.pow = function (t) {
                return this.exp(t, new v());
              }, t.prototype.copyTo = function (t) {
                for (var e = this.t - 1; e >= 0; --e) t[e] = this[e];

                t.t = this.t, t.s = this.s;
              }, t.prototype.fromInt = function (t) {
                this.t = 1, this.s = t < 0 ? -1 : 0, t > 0 ? this[0] = t : t < -1 ? this[0] = t + this.DV : this.t = 0;
              }, t.prototype.fromString = function (e, r) {
                var n;
                if (16 == r) n = 4;else if (8 == r) n = 3;else if (256 == r) n = 8;else if (2 == r) n = 1;else if (32 == r) n = 5;else {
                  if (4 != r) return void this.fromRadix(e, r);
                  n = 2;
                }
                this.t = 0, this.s = 0;

                for (var i = e.length, o = !1, s = 0; --i >= 0;) {
                  var a = 8 == n ? 255 & +e[i] : D(e, i);
                  a < 0 ? "-" == e.charAt(i) && (o = !0) : (o = !1, 0 == s ? this[this.t++] = a : s + n > this.DB ? (this[this.t - 1] |= (a & (1 << this.DB - s) - 1) << s, this[this.t++] = a >> this.DB - s) : this[this.t - 1] |= a << s, (s += n) >= this.DB && (s -= this.DB));
                }

                8 == n && 0 != (128 & +e[0]) && (this.s = -1, s > 0 && (this[this.t - 1] |= (1 << this.DB - s) - 1 << s)), this.clamp(), o && t.ZERO.subTo(this, this);
              }, t.prototype.clamp = function () {
                for (var t = this.s & this.DM; this.t > 0 && this[this.t - 1] == t;) --this.t;
              }, t.prototype.dlShiftTo = function (t, e) {
                var r;

                for (r = this.t - 1; r >= 0; --r) e[r + t] = this[r];

                for (r = t - 1; r >= 0; --r) e[r] = 0;

                e.t = this.t + t, e.s = this.s;
              }, t.prototype.drShiftTo = function (t, e) {
                for (var r = t; r < this.t; ++r) e[r - t] = this[r];

                e.t = Math.max(this.t - t, 0), e.s = this.s;
              }, t.prototype.lShiftTo = function (t, e) {
                for (var r = t % this.DB, n = this.DB - r, i = (1 << n) - 1, o = Math.floor(t / this.DB), s = this.s << r & this.DM, a = this.t - 1; a >= 0; --a) e[a + o + 1] = this[a] >> n | s, s = (this[a] & i) << r;

                for (a = o - 1; a >= 0; --a) e[a] = 0;

                e[o] = s, e.t = this.t + o + 1, e.s = this.s, e.clamp();
              }, t.prototype.rShiftTo = function (t, e) {
                e.s = this.s;
                var r = Math.floor(t / this.DB);
                if (r >= this.t) e.t = 0;else {
                  var n = t % this.DB,
                      i = this.DB - n,
                      o = (1 << n) - 1;
                  e[0] = this[r] >> n;

                  for (var s = r + 1; s < this.t; ++s) e[s - r - 1] |= (this[s] & o) << i, e[s - r] = this[s] >> n;

                  n > 0 && (e[this.t - r - 1] |= (this.s & o) << i), e.t = this.t - r, e.clamp();
                }
              }, t.prototype.subTo = function (t, e) {
                for (var r = 0, n = 0, i = Math.min(t.t, this.t); r < i;) n += this[r] - t[r], e[r++] = n & this.DM, n >>= this.DB;

                if (t.t < this.t) {
                  for (n -= t.s; r < this.t;) n += this[r], e[r++] = n & this.DM, n >>= this.DB;

                  n += this.s;
                } else {
                  for (n += this.s; r < t.t;) n -= t[r], e[r++] = n & this.DM, n >>= this.DB;

                  n -= t.s;
                }

                e.s = n < 0 ? -1 : 0, n < -1 ? e[r++] = this.DV + n : n > 0 && (e[r++] = n), e.t = r, e.clamp();
              }, t.prototype.multiplyTo = function (e, r) {
                var n = this.abs(),
                    i = e.abs(),
                    o = n.t;

                for (r.t = o + i.t; --o >= 0;) r[o] = 0;

                for (o = 0; o < i.t; ++o) r[o + n.t] = n.am(0, i[o], r, o, 0, n.t);

                r.s = 0, r.clamp(), this.s != e.s && t.ZERO.subTo(r, r);
              }, t.prototype.squareTo = function (t) {
                for (var e = this.abs(), r = t.t = 2 * e.t; --r >= 0;) t[r] = 0;

                for (r = 0; r < e.t - 1; ++r) {
                  var n = e.am(r, e[r], t, 2 * r, 0, 1);
                  (t[r + e.t] += e.am(r + 1, 2 * e[r], t, 2 * r + 1, n, e.t - r - 1)) >= e.DV && (t[r + e.t] -= e.DV, t[r + e.t + 1] = 1);
                }

                t.t > 0 && (t[t.t - 1] += e.am(r, e[r], t, 2 * r, 0, 1)), t.s = 0, t.clamp();
              }, t.prototype.divRemTo = function (e, r, n) {
                var i = e.abs();

                if (!(i.t <= 0)) {
                  var o = this.abs();
                  if (o.t < i.t) return null != r && r.fromInt(0), void (null != n && this.copyTo(n));
                  null == n && (n = b());
                  var s = b(),
                      a = this.s,
                      u = e.s,
                      h = this.DB - T(i[i.t - 1]);
                  h > 0 ? (i.lShiftTo(h, s), o.lShiftTo(h, n)) : (i.copyTo(s), o.copyTo(n));
                  var l = s.t,
                      c = s[l - 1];

                  if (0 != c) {
                    var f = c * (1 << this.F1) + (l > 1 ? s[l - 2] >> this.F2 : 0),
                        p = this.FV / f,
                        d = (1 << this.F1) / f,
                        g = 1 << this.F2,
                        v = n.t,
                        y = v - l,
                        m = null == r ? b() : r;

                    for (s.dlShiftTo(y, m), n.compareTo(m) >= 0 && (n[n.t++] = 1, n.subTo(m, n)), t.ONE.dlShiftTo(l, m), m.subTo(s, s); s.t < l;) s[s.t++] = 0;

                    for (; --y >= 0;) {
                      var w = n[--v] == c ? this.DM : Math.floor(n[v] * p + (n[v - 1] + g) * d);
                      if ((n[v] += s.am(0, w, n, y, 0, l)) < w) for (s.dlShiftTo(y, m), n.subTo(m, n); n[v] < --w;) n.subTo(m, n);
                    }

                    null != r && (n.drShiftTo(l, r), a != u && t.ZERO.subTo(r, r)), n.t = l, n.clamp(), h > 0 && n.rShiftTo(h, n), a < 0 && t.ZERO.subTo(n, n);
                  }
                }
              }, t.prototype.invDigit = function () {
                if (this.t < 1) return 0;
                var t = this[0];
                if (0 == (1 & t)) return 0;
                var e = 3 & t;
                return (e = (e = (e = (e = e * (2 - (15 & t) * e) & 15) * (2 - (255 & t) * e) & 255) * (2 - ((65535 & t) * e & 65535)) & 65535) * (2 - t * e % this.DV) % this.DV) > 0 ? this.DV - e : -e;
              }, t.prototype.isEven = function () {
                return 0 == (this.t > 0 ? 1 & this[0] : this.s);
              }, t.prototype.exp = function (e, r) {
                if (e > 4294967295 || e < 1) return t.ONE;
                var n = b(),
                    i = b(),
                    o = r.convert(this),
                    s = T(e) - 1;

                for (o.copyTo(n); --s >= 0;) if (r.sqrTo(n, i), (e & 1 << s) > 0) r.mulTo(i, o, n);else {
                  var a = n;
                  n = i, i = a;
                }

                return r.revert(n);
              }, t;
            }(),
                v = function () {
              function t() {}

              return t.prototype.convert = function (t) {
                return t;
              }, t.prototype.revert = function (t) {
                return t;
              }, t.prototype.mulTo = function (t, e, r) {
                t.multiplyTo(e, r);
              }, t.prototype.sqrTo = function (t, e) {
                t.squareTo(e);
              }, t;
            }(),
                y = function () {
              function t(t) {
                this.m = t;
              }

              return t.prototype.convert = function (t) {
                return t.s < 0 || t.compareTo(this.m) >= 0 ? t.mod(this.m) : t;
              }, t.prototype.revert = function (t) {
                return t;
              }, t.prototype.reduce = function (t) {
                t.divRemTo(this.m, null, t);
              }, t.prototype.mulTo = function (t, e, r) {
                t.multiplyTo(e, r), this.reduce(r);
              }, t.prototype.sqrTo = function (t, e) {
                t.squareTo(e), this.reduce(e);
              }, t;
            }(),
                m = function () {
              function t(t) {
                this.m = t, this.mp = t.invDigit(), this.mpl = 32767 & this.mp, this.mph = this.mp >> 15, this.um = (1 << t.DB - 15) - 1, this.mt2 = 2 * t.t;
              }

              return t.prototype.convert = function (t) {
                var e = b();
                return t.abs().dlShiftTo(this.m.t, e), e.divRemTo(this.m, null, e), t.s < 0 && e.compareTo(g.ZERO) > 0 && this.m.subTo(e, e), e;
              }, t.prototype.revert = function (t) {
                var e = b();
                return t.copyTo(e), this.reduce(e), e;
              }, t.prototype.reduce = function (t) {
                for (; t.t <= this.mt2;) t[t.t++] = 0;

                for (var e = 0; e < this.m.t; ++e) {
                  var r = 32767 & t[e],
                      n = r * this.mpl + ((r * this.mph + (t[e] >> 15) * this.mpl & this.um) << 15) & t.DM;

                  for (t[r = e + this.m.t] += this.m.am(0, n, t, e, 0, this.m.t); t[r] >= t.DV;) t[r] -= t.DV, t[++r]++;
                }

                t.clamp(), t.drShiftTo(this.m.t, t), t.compareTo(this.m) >= 0 && t.subTo(this.m, t);
              }, t.prototype.mulTo = function (t, e, r) {
                t.multiplyTo(e, r), this.reduce(r);
              }, t.prototype.sqrTo = function (t, e) {
                t.squareTo(e), this.reduce(e);
              }, t;
            }();

            function b() {
              return new g(null);
            }

            function w(t, e) {
              return new g(t, e);
            }

            "Microsoft Internet Explorer" == window.navigator.appName ? (g.prototype.am = function (t, e, r, n, i, o) {
              for (var s = 32767 & e, a = e >> 15; --o >= 0;) {
                var u = 32767 & this[t],
                    h = this[t++] >> 15,
                    l = a * u + h * s;
                i = ((u = s * u + ((32767 & l) << 15) + r[n] + (1073741823 & i)) >>> 30) + (l >>> 15) + a * h + (i >>> 30), r[n++] = 1073741823 & u;
              }

              return i;
            }, h = 30) : "Netscape" != window.navigator.appName ? (g.prototype.am = function (t, e, r, n, i, o) {
              for (; --o >= 0;) {
                var s = e * this[t++] + r[n] + i;
                i = Math.floor(s / 67108864), r[n++] = 67108863 & s;
              }

              return i;
            }, h = 26) : (g.prototype.am = function (t, e, r, n, i, o) {
              for (var s = 16383 & e, a = e >> 14; --o >= 0;) {
                var u = 16383 & this[t],
                    h = this[t++] >> 14,
                    l = a * u + h * s;
                i = ((u = s * u + ((16383 & l) << 14) + r[n] + i) >> 28) + (l >> 14) + a * h, r[n++] = 268435455 & u;
              }

              return i;
            }, h = 28), g.prototype.DB = h, g.prototype.DM = (1 << h) - 1, g.prototype.DV = 1 << h, g.prototype.FV = Math.pow(2, 52), g.prototype.F1 = 52 - h, g.prototype.F2 = 2 * h - 52;
            var x,
                S,
                _ = [];

            for (x = "0".charCodeAt(0), S = 0; S <= 9; ++S) _[x++] = S;

            for (x = "a".charCodeAt(0), S = 10; S < 36; ++S) _[x++] = S;

            for (x = "A".charCodeAt(0), S = 10; S < 36; ++S) _[x++] = S;

            function D(t, e) {
              var r = _[t.charCodeAt(e)];

              return null == r ? -1 : r;
            }

            function I(t) {
              var e = b();
              return e.fromInt(t), e;
            }

            function T(t) {
              var e,
                  r = 1;
              return 0 != (e = t >>> 16) && (t = e, r += 16), 0 != (e = t >> 8) && (t = e, r += 8), 0 != (e = t >> 4) && (t = e, r += 4), 0 != (e = t >> 2) && (t = e, r += 2), 0 != (e = t >> 1) && (t = e, r += 1), r;
            }

            g.ZERO = I(0), g.ONE = I(1);

            var A,
                E,
                P = function () {
              function t() {
                this.i = 0, this.j = 0, this.S = [];
              }

              return t.prototype.init = function (t) {
                var e, r, n;

                for (e = 0; e < 256; ++e) this.S[e] = e;

                for (r = 0, e = 0; e < 256; ++e) r = r + this.S[e] + t[e % t.length] & 255, n = this.S[e], this.S[e] = this.S[r], this.S[r] = n;

                this.i = 0, this.j = 0;
              }, t.prototype.next = function () {
                var t;
                return this.i = this.i + 1 & 255, this.j = this.j + this.S[this.i] & 255, t = this.S[this.i], this.S[this.i] = this.S[this.j], this.S[this.j] = t, this.S[t + this.S[this.i] & 255];
              }, t;
            }(),
                B = null;

            if (null == B) {
              B = [], E = 0;
              var C = void 0;

              if (window.crypto && window.crypto.getRandomValues) {
                var R = new Uint32Array(256);

                for (window.crypto.getRandomValues(R), C = 0; C < R.length; ++C) B[E++] = 255 & R[C];
              }

              var M = function M(t) {
                if (this.count = this.count || 0, this.count >= 256 || E >= 256) window.removeEventListener ? window.removeEventListener("mousemove", M, !1) : window.detachEvent && window.detachEvent("onmousemove", M);else try {
                  var e = t.x + t.y;
                  B[E++] = 255 & e, this.count += 1;
                } catch (t) {}
              };

              window.addEventListener ? window.addEventListener("mousemove", M, !1) : window.attachEvent && window.attachEvent("onmousemove", M);
            }

            function O() {
              if (null == A) {
                for (A = new P(); E < 256;) {
                  var t = Math.floor(65536 * Math.random());
                  B[E++] = 255 & t;
                }

                for (A.init(B), E = 0; E < B.length; ++E) B[E] = 0;

                E = 0;
              }

              return A.next();
            }

            var L = function () {
              function t() {}

              return t.prototype.nextBytes = function (t) {
                for (var e = 0; e < t.length; ++e) t[e] = O();
              }, t;
            }(),
                k = function (t) {
              function e(r) {
                var n = t.call(this) || this;
                return r && ("string" == typeof r ? n.parseKey(r) : (e.hasPrivateKeyProperty(r) || e.hasPublicKeyProperty(r)) && n.parsePropertiesFrom(r)), n;
              }

              return function (t, e) {
                function r() {
                  this.constructor = t;
                }

                _l(t, e), t.prototype = null === e ? Object.create(e) : (r.prototype = e.prototype, new r());
              }(e, t), e.prototype.parseKey = function (t) {
                try {
                  var e = 0,
                      r = 0,
                      n = /^\s*(?:[0-9A-Fa-f][0-9A-Fa-f]\s*)+$/.test(t) ? Hex.decode(t) : c.unarmor(t),
                      i = p.decode(n);

                  if (3 === i.sub.length && (i = i.sub[2].sub[0]), 9 === i.sub.length) {
                    e = i.sub[1].getHexStringValue(), this.n = w(e, 16), r = i.sub[2].getHexStringValue(), this.e = parseInt(r, 16);
                    var o = i.sub[3].getHexStringValue();
                    this.d = w(o, 16);
                    var s = i.sub[4].getHexStringValue();
                    this.p = w(s, 16);
                    var a = i.sub[5].getHexStringValue();
                    this.q = w(a, 16);
                    var u = i.sub[6].getHexStringValue();
                    this.dmp1 = w(u, 16);
                    var h = i.sub[7].getHexStringValue();
                    this.dmq1 = w(h, 16);
                    var l = i.sub[8].getHexStringValue();
                    this.coeff = w(l, 16);
                  } else {
                    if (2 !== i.sub.length) return !1;
                    var f = i.sub[1].sub[0];
                    e = f.sub[0].getHexStringValue(), this.n = w(e, 16), r = f.sub[1].getHexStringValue(), this.e = parseInt(r, 16);
                  }

                  return !0;
                } catch (t) {
                  return !1;
                }
              }, e;
            }(function () {
              function t() {
                this.n = null, this.e = 0, this.d = null, this.p = null, this.q = null, this.dmp1 = null, this.dmq1 = null, this.coeff = null;
              }

              return t.prototype.doPublic = function (t) {
                return t.modPowInt(this.e, this.n);
              }, t.prototype.setPublic = function (t, e) {
                null != t && null != e && t.length > 0 && e.length > 0 ? (this.n = w(t, 16), this.e = parseInt(e, 16)) : console.error("Invalid RSA public key");
              }, t.prototype.encrypt = function (t) {
                var e = function (t, e) {
                  if (e < t.length + 11) return console.error("Message too long for RSA"), null;

                  for (var r = [], n = t.length - 1; n >= 0 && e > 0;) {
                    var i = t.charCodeAt(n--);
                    i < 128 ? r[--e] = i : i > 127 && i < 2048 ? (r[--e] = 63 & i | 128, r[--e] = i >> 6 | 192) : (r[--e] = 63 & i | 128, r[--e] = i >> 6 & 63 | 128, r[--e] = i >> 12 | 224);
                  }

                  r[--e] = 0;

                  for (var o = new L(), s = []; e > 2;) {
                    for (s[0] = 0; 0 == s[0];) o.nextBytes(s);

                    r[--e] = s[0];
                  }

                  return r[--e] = 2, r[--e] = 0, new g(r);
                }(t, this.n.bitLength() + 7 >> 3);

                if (null == e) return null;
                var r = this.doPublic(e);
                if (null == r) return null;
                var n = r.toString(16);
                return 0 == (1 & n.length) ? n : "0" + n;
              }, t;
            }()),
                N = function () {
              function t(t) {
                t = t || {}, this.default_key_size = parseInt(t.default_key_size, 10) || 1024, this.default_public_exponent = t.default_public_exponent || "010001", this.log = t.log || !1, this.key = null;
              }

              return t.prototype.setKey = function (t) {
                this.log && this.key && console.warn("A key was already set, overriding existing."), this.key = new k(t);
              }, t.prototype.setPublicKey = function (t) {
                this.setKey(t);
              }, t.version = "3.0.0-rc.1", t;
            }();

            window.JSEncrypt = N, t.JSEncrypt = N, t["default"] = N, Object.defineProperty(t, "__esModule", {
              value: !0
            });
          }(e);
        }, function (t, e, r) {
          (function (t, n) {
            var i;
            (function () {
              var o = {
                "function": !0,
                object: !0
              },
                  s = o[typeof window] && window || this,
                  a = o[typeof e] && e,
                  u = o[typeof t] && t && !t.nodeType && t,
                  h = a && u && "object" == typeof n && n;
              !h || h.global !== h && h.window !== h && h.self !== h || (s = h);
              var l = Math.pow(2, 53) - 1,
                  c = /\bOpera/,
                  f = Object.prototype,
                  p = f.hasOwnProperty,
                  d = f.toString;

              function g(t) {
                return (t = String(t)).charAt(0).toUpperCase() + t.slice(1);
              }

              function v(t) {
                return t = x(t), /^(?:webOS|i(?:OS|P))/.test(t) ? t : g(t);
              }

              function y(t, e) {
                for (var r in t) p.call(t, r) && e(t[r], r, t);
              }

              function m(t) {
                return null == t ? g(t) : d.call(t).slice(8, -1);
              }

              function b(t) {
                return String(t).replace(/([ -])(?!$)/g, "$1?");
              }

              function w(t, e) {
                var r = null;
                return function (t, e) {
                  var r = -1,
                      n = t ? t.length : 0;
                  if ("number" == typeof n && n > -1 && n <= l) for (; ++r < n;) e(t[r], r, t);else y(t, e);
                }(t, function (n, i) {
                  r = e(r, n, i, t);
                }), r;
              }

              function x(t) {
                return String(t).replace(/^ +| +$/g, "");
              }

              var S = function t(e) {
                var r = s,
                    n = e && "object" == typeof e && "String" != m(e);
                n && (r = e, e = null);
                var i = r.navigator || {},
                    o = i.userAgent || "";
                e || (e = o);

                var a,
                    u,
                    h,
                    l,
                    f,
                    p = n ? !!i.likeChrome : /\bChrome\b/.test(e) && !/internal|\n/i.test(d.toString()),
                    g = n ? "Object" : "ScriptBridgingProxyObject",
                    S = n ? "Object" : "Environment",
                    _ = n && r.java ? "JavaPackage" : m(r.java),
                    D = n ? "Object" : "RuntimeObject",
                    I = /\bJava/.test(_) && r.java,
                    T = I && m(r.environment) == S,
                    A = I ? "a" : "α",
                    E = I ? "b" : "β",
                    P = r.document || {},
                    B = r.operamini || r.opera,
                    C = c.test(C = n && B ? B["[[Class]]"] : m(B)) ? C : B = null,
                    R = e,
                    M = [],
                    O = null,
                    L = e == o,
                    k = L && B && "function" == typeof B.version && B.version(),
                    N = w([{
                  label: "EdgeHTML",
                  pattern: "Edge"
                }, "Trident", {
                  label: "WebKit",
                  pattern: "AppleWebKit"
                }, "iCab", "Presto", "NetFront", "Tasman", "KHTML", "Gecko"], function (t, r) {
                  return t || RegExp("\\b" + (r.pattern || b(r)) + "\\b", "i").exec(e) && (r.label || r);
                }),
                    U = function (t) {
                  return w(t, function (t, r) {
                    return t || RegExp("\\b" + (r.pattern || b(r)) + "\\b", "i").exec(e) && (r.label || r);
                  });
                }(["Adobe AIR", "Arora", "Avant Browser", "Breach", "Camino", "Electron", "Epiphany", "Fennec", "Flock", "Galeon", "GreenBrowser", "iCab", "Iceweasel", "K-Meleon", "Konqueror", "Lunascape", "Maxthon", {
                  label: "Microsoft Edge",
                  pattern: "Edge"
                }, "Midori", "Nook Browser", "PaleMoon", "PhantomJS", "Raven", "Rekonq", "RockMelt", {
                  label: "Samsung Internet",
                  pattern: "SamsungBrowser"
                }, "SeaMonkey", {
                  label: "Silk",
                  pattern: "(?:Cloud9|Silk-Accelerated)"
                }, "Sleipnir", "SlimBrowser", {
                  label: "SRWare Iron",
                  pattern: "Iron"
                }, "Sunrise", "Swiftfox", "Waterfox", "WebPositive", "Opera Mini", {
                  label: "Opera Mini",
                  pattern: "OPiOS"
                }, "Opera", {
                  label: "Opera",
                  pattern: "OPR"
                }, "Chrome", {
                  label: "Chrome Mobile",
                  pattern: "(?:CriOS|CrMo)"
                }, {
                  label: "Firefox",
                  pattern: "(?:Firefox|Minefield)"
                }, {
                  label: "Firefox for iOS",
                  pattern: "FxiOS"
                }, {
                  label: "IE",
                  pattern: "IEMobile"
                }, {
                  label: "IE",
                  pattern: "MSIE"
                }, "Safari"]),
                    V = Y([{
                  label: "BlackBerry",
                  pattern: "BB10"
                }, "BlackBerry", {
                  label: "Galaxy S",
                  pattern: "GT-I9000"
                }, {
                  label: "Galaxy S2",
                  pattern: "GT-I9100"
                }, {
                  label: "Galaxy S3",
                  pattern: "GT-I9300"
                }, {
                  label: "Galaxy S4",
                  pattern: "GT-I9500"
                }, {
                  label: "Galaxy S5",
                  pattern: "SM-G900"
                }, {
                  label: "Galaxy S6",
                  pattern: "SM-G920"
                }, {
                  label: "Galaxy S6 Edge",
                  pattern: "SM-G925"
                }, {
                  label: "Galaxy S7",
                  pattern: "SM-G930"
                }, {
                  label: "Galaxy S7 Edge",
                  pattern: "SM-G935"
                }, "Google TV", "Lumia", "iPad", "iPod", "iPhone", "Kindle", {
                  label: "Kindle Fire",
                  pattern: "(?:Cloud9|Silk-Accelerated)"
                }, "Nexus", "Nook", "PlayBook", "PlayStation Vita", "PlayStation", "TouchPad", "Transformer", {
                  label: "Wii U",
                  pattern: "WiiU"
                }, "Wii", "Xbox One", {
                  label: "Xbox 360",
                  pattern: "Xbox"
                }, "Xoom"]),
                    F = function (t) {
                  return w(t, function (t, r, n) {
                    return t || (r[V] || r[/^[a-z]+(?: +[a-z]+\b)*/i.exec(V)] || RegExp("\\b" + b(n) + "(?:\\b|\\w*\\d)", "i").exec(e)) && n;
                  });
                }({
                  Apple: {
                    iPad: 1,
                    iPhone: 1,
                    iPod: 1
                  },
                  Archos: {},
                  Amazon: {
                    Kindle: 1,
                    "Kindle Fire": 1
                  },
                  Asus: {
                    Transformer: 1
                  },
                  "Barnes & Noble": {
                    Nook: 1
                  },
                  BlackBerry: {
                    PlayBook: 1
                  },
                  Google: {
                    "Google TV": 1,
                    Nexus: 1
                  },
                  HP: {
                    TouchPad: 1
                  },
                  HTC: {},
                  LG: {},
                  Microsoft: {
                    Xbox: 1,
                    "Xbox One": 1
                  },
                  Motorola: {
                    Xoom: 1
                  },
                  Nintendo: {
                    "Wii U": 1,
                    Wii: 1
                  },
                  Nokia: {
                    Lumia: 1
                  },
                  Samsung: {
                    "Galaxy S": 1,
                    "Galaxy S2": 1,
                    "Galaxy S3": 1,
                    "Galaxy S4": 1
                  },
                  Sony: {
                    PlayStation: 1,
                    "PlayStation Vita": 1
                  }
                }),
                    j = function (t) {
                  return w(t, function (t, r) {
                    var n = r.pattern || b(r);
                    return !t && (t = RegExp("\\b" + n + "(?:/[\\d.]+|[ \\w.]*)", "i").exec(e)) && (t = function (t, e, r) {
                      var n = {
                        "10.0": "10",
                        6.4: "10 Technical Preview",
                        6.3: "8.1",
                        6.2: "8",
                        6.1: "Server 2008 R2 / 7",
                        "6.0": "Server 2008 / Vista",
                        5.2: "Server 2003 / XP 64-bit",
                        5.1: "XP",
                        5.01: "2000 SP1",
                        "5.0": "2000",
                        "4.0": "NT",
                        "4.90": "ME"
                      };
                      return e && r && /^Win/i.test(t) && !/^Windows Phone /i.test(t) && (n = n[/[\d.]+$/.exec(t)]) && (t = "Windows " + n), t = String(t), e && r && (t = t.replace(RegExp(e, "i"), r)), t = v(t.replace(/ ce$/i, " CE").replace(/\bhpw/i, "web").replace(/\bMacintosh\b/, "Mac OS").replace(/_PowerPC\b/i, " OS").replace(/\b(OS X) [^ \d]+/i, "$1").replace(/\bMac (OS X)\b/, "$1").replace(/\/(\d)/, " $1").replace(/_/g, ".").replace(/(?: BePC|[ .]*fc[ \d.]+)$/i, "").replace(/\bx86\.64\b/gi, "x86_64").replace(/\b(Windows Phone) OS\b/, "$1").replace(/\b(Chrome OS \w+) [\d.]+\b/, "$1").split(" on ")[0]);
                    }(t, n, r.label || r)), t;
                  });
                }(["Windows Phone", "Android", "CentOS", {
                  label: "Chrome OS",
                  pattern: "CrOS"
                }, "Debian", "Fedora", "FreeBSD", "Gentoo", "Haiku", "Kubuntu", "Linux Mint", "OpenBSD", "Red Hat", "SuSE", "Ubuntu", "Xubuntu", "Cygwin", "Symbian OS", "hpwOS", "webOS ", "webOS", "Tablet OS", "Tizen", "Linux", "Mac OS X", "Macintosh", "Mac", "Windows 98;", "Windows "]);

                if (window.BK) {
                  var X = BK.getSystemInfoSync();
                  -1 != (V = X.platform).indexOf("ios") ? (V = V.replace(/ios/, "iPhone"), e = " OS " + X.osVersion + ") ") : (V = V.replace(/ios/, "Android"), e = " Android " + X.osVersion + "; ", j = "Android " + X.osVersion), k = X.osVersion;
                }

                function Y(t) {
                  return w(t, function (t, r) {
                    var n = r.pattern || b(r);
                    return !t && (t = RegExp("\\b" + n + " *\\d+[.\\w_]*", "i").exec(e) || RegExp("\\b" + n + " *\\w+-[\\w]*", "i").exec(e) || RegExp("\\b" + n + "(?:; *(?:[a-z]+[_-])?[a-z]+\\d+|[^ ();-]*)", "i").exec(e)) && ((t = String(r.label && !RegExp(n, "i").test(r.label) ? r.label : t).split("/"))[1] && !/[\d.]+/.test(t[0]) && (t[0] += " " + t[1]), r = r.label || r, t = v(t[0].replace(RegExp(n, "i"), r).replace(RegExp("; *(?:" + r + "[_-])?", "i"), " ").replace(RegExp("(" + r + ")[-_.]?(\\w)", "i"), "$1 $2"))), t;
                  });
                }

                if (N && (N = [N]), F && !V && (V = Y([F])), (a = /\bGoogle TV\b/.exec(V)) && (V = a[0]), /\bSimulator\b/i.test(e) && (V = (V ? V + " " : "") + "Simulator"), "Opera Mini" == U && /\bOPiOS\b/.test(e) && M.push("running in Turbo/Uncompressed mode"), "IE" == U && /\blike iPhone OS\b/.test(e) ? (F = (a = t(e.replace(/like iPhone OS/, ""))).manufacturer, V = a.product) : /^iP/.test(V) ? (U || (U = "Safari"), j = "iOS" + ((a = / OS ([\d_]+)/i.exec(e)) || (a = / OS[^]+?([\d\.]+?) /i.exec(e)) ? " " + a[1].replace(/_/g, ".") : "")) : "Konqueror" != U || /buntu/i.test(j) ? F && "Google" != F && (/Chrome/.test(U) && !/\bMobile Safari\b/i.test(e) || /\bVita\b/.test(V)) || /\bAndroid\b/.test(j) && /^Chrome/.test(U) && /\bVersion\//i.test(e) ? (U = "Android Browser", j = /\bAndroid\b/.test(j) ? j : "Android") : "Silk" == U ? (/\bMobi/i.test(e) || (j = "Android", M.unshift("desktop mode")), /Accelerated *= *true/i.test(e) && M.unshift("accelerated")) : "PaleMoon" == U && (a = /\bFirefox\/([\d.]+)\b/.exec(e)) ? M.push("identifying as Firefox " + a[1]) : "Firefox" == U && (a = /\b(Mobile|Tablet|TV)\b/i.exec(e)) ? (j || (j = "Firefox OS"), V || (V = a[1])) : !U || (a = !/\bMinefield\b/i.test(e) && /\b(?:Firefox|Safari)\b/.exec(U)) ? (U && !V && /[\/,]|^[^(]+?\)/.test(e.slice(e.indexOf(a + "/") + 8)) && (U = null), (a = V || F || j) && (V || F || /\b(?:Android|Symbian OS|Tablet OS|webOS)\b/.test(j)) && (U = /[a-z]+(?: Hat)?/i.exec(/\bAndroid\b/.test(j) ? j : a) + " Browser")) : "Electron" == U && (a = (/\bChrome\/([\d.]+)\b/.exec(e) || 0)[1]) && M.push("Chromium " + a) : j = "Kubuntu", k || (j && -1 != j.indexOf("Android") && (V = V || "Android", (a = / Android[^]+?([\d\.]+?)[\)|;]/i.exec(e)) && (j = "Android " + ((k = a[1].replace(/_/g, ".")) || ""))), k || (k = w(["(?:Cloud9|CriOS|CrMo|Edge|FxiOS|IEMobile|Iron|Opera ?Mini|OPiOS|OPR|Raven|SamsungBrowser|Silk(?!/[\\d.]+$))", "Version", b(U), "(?:Firefox|Minefield|NetFront)"], function (t, r) {
                  return t || (RegExp(r + "(?:-[\\d.]+/|(?: for [\\w-]+)?[ /-])([\\d.]+[^ ();/_-]*)", "i").exec(e) || 0)[1] || null;
                }))), (a = ("iCab" == N && parseFloat(k) > 3 ? "WebKit" : /\bOpera\b/.test(U) && (/\bOPR\b/.test(e) ? "Blink" : "Presto")) || /\b(?:Midori|Nook|Safari)\b/i.test(e) && !/^(?:Trident|EdgeHTML)$/.test(N) && "WebKit" || !N && /\bMSIE\b/i.test(e) && ("Mac OS" == j ? "Tasman" : "Trident") || "WebKit" == N && /\bPlayStation\b(?! Vita\b)/i.test(U) && "NetFront") && (N = [a]), "IE" == U && (a = (/; *(?:XBLWP|ZuneWP)(\d+)/i.exec(e) || 0)[1]) ? (U += " Mobile", j = "Windows Phone " + (/\+$/.test(a) ? a : a + ".x"), M.unshift("desktop mode")) : /\bWPDesktop\b/i.test(e) ? (U = "IE Mobile", j = "Windows Phone 8.x", M.unshift("desktop mode"), k || (k = (/\brv:([\d.]+)/.exec(e) || 0)[1])) : "IE" != U && "Trident" == N && (a = /\brv:([\d.]+)/.exec(e)) && (U && M.push("identifying as " + U + (k ? " " + k : "")), U = "IE", k = a[1]), L) {
                  if (l = "global", f = null != (h = r) ? typeof h[l] : "number", /^(?:boolean|number|string|undefined)$/.test(f) || "object" == f && !h[l]) m(a = r.runtime) == g ? (U = "Adobe AIR", j = a.flash.system.Capabilities.os) : m(a = r.phantom) == D ? (U = "PhantomJS", k = (a = a.version || null) && a.major + "." + a.minor + "." + a.patch) : "number" == typeof P.documentMode && (a = /\bTrident\/(\d+)/i.exec(e)) ? (k = [k, P.documentMode], (a = +a[1] + 4) != k[1] && (M.push("IE " + k[1] + " mode"), N && (N[1] = ""), k[1] = a), k = "IE" == U ? String(k[1].toFixed(1)) : k[0]) : "number" == typeof P.documentMode && /^(?:Chrome|Firefox)\b/.test(U) && (M.push("masking as " + U + " " + k), U = "IE", k = "11.0", N = ["Trident"], j = "Windows");else if (I && (R = (a = I.lang.System).getProperty("os.arch"), j = j || a.getProperty("os.name") + " " + a.getProperty("os.version")), T) {
                    try {
                      k = r.require("ringo/engine").version.join("."), U = "RingoJS";
                    } catch (t) {
                      (a = r.system) && a.global.system == r.system && (U = "Narwhal", j || (j = a[0].os || null));
                    }

                    U || (U = "Rhino");
                  } else "object" == typeof r.process && !r.process.browser && (a = r.process) && ("object" == typeof a.versions && ("string" == typeof a.versions.electron ? (M.push("Node " + a.versions.node), U = "Electron", k = a.versions.electron) : "string" == typeof a.versions.nw && (M.push("Chromium " + k, "Node " + a.versions.node), U = "NW.js", k = a.versions.nw)), U || (U = "Node.js", R = a.arch, j = a.platform, k = (k = /[\d.]+/.exec(a.version)) ? k[0] : null));
                  j = j && v(j);
                }

                if (k && (a = /(?:[ab]|dp|pre|[ab]\d+pre)(?:\d+\+?)?$/i.exec(k) || /(?:alpha|beta)(?: ?\d)?/i.exec(e + ";" + (L && i.appMinorVersion)) || /\bMinefield\b/i.test(e) && "a") && (O = /b/i.test(a) ? "beta" : "alpha", k = k.replace(RegExp(a + "\\+?$"), "") + ("beta" == O ? E : A) + (/\d+\+?/.exec(a) || "")), "Fennec" == U || "Firefox" == U && /\b(?:Android|Firefox OS)\b/.test(j)) U = "Firefox Mobile";else if ("Maxthon" == U && k) k = k.replace(/\.[\d.]+/, ".x");else if (/\bXbox\b/i.test(V)) "Xbox 360" == V && (j = null), "Xbox 360" == V && /\bIEMobile\b/.test(e) && M.unshift("mobile mode");else if (!/^(?:Chrome|IE|Opera)$/.test(U) && (!U || V || /Browser|Mobi/.test(U)) || "Windows CE" != j && !/Mobi/i.test(e)) {
                  if ("IE" == U && L) try {
                    null === r.external && M.unshift("platform preview");
                  } catch (t) {
                    M.unshift("embedded");
                  } else (/\bBlackBerry\b/.test(V) || /\bBB10\b/.test(e)) && (a = (RegExp(V.replace(/ +/g, " *") + "/([.\\d]+)", "i").exec(e) || 0)[1] || k) ? (j = ((a = [a, /BB10/.test(e)])[1] ? (V = null, F = "BlackBerry") : "Device Software") + " " + a[0], k = null) : this != y && "Wii" != V && (L && B || /Opera/.test(U) && /\b(?:MSIE|Firefox)\b/i.test(e) || "Firefox" == U && /\bOS X (?:\d+\.){2,}/.test(j) || "IE" == U && (j && !/^Win/.test(j) && k > 5.5 || /\bWindows XP\b/.test(j) && k > 8 || 8 == k && !/\bTrident\b/.test(e))) && !c.test(a = t.call(y, e.replace(c, "") + ";")) && a.name && (a = "ing as " + a.name + ((a = a.version) ? " " + a : ""), c.test(U) ? (/\bIE\b/.test(a) && "Mac OS" == j && (j = null), a = "identify" + a) : (a = "mask" + a, U = C ? v(C.replace(/([a-z])([A-Z])/g, "$1 $2")) : "Opera", /\bIE\b/.test(a) && (j = null), L || (k = null)), N = ["Presto"], M.push(a));
                } else U += " Mobile";
                (a = (/\bAppleWebKit\/([\d.]+\+?)/i.exec(e) || 0)[1]) && (a = [parseFloat(a.replace(/\.(\d)$/, ".0$1")), a], "Safari" == U && "+" == a[1].slice(-1) ? (U = "WebKit Nightly", O = "alpha", k = a[1].slice(0, -1)) : k != a[1] && k != (a[2] = (/\bSafari\/([\d.]+\+?)/i.exec(e) || 0)[1]) || (k = null), a[1] = (/\bChrome\/([\d.]+)/i.exec(e) || 0)[1], 537.36 == a[0] && 537.36 == a[2] && parseFloat(a[1]) >= 28 && "WebKit" == N && (N = ["Blink"]), L && (p || a[1]) ? (N && (N[1] = "like Chrome"), a = a[1] || ((a = a[0]) < 530 ? 1 : a < 532 ? 2 : a < 532.05 ? 3 : a < 533 ? 4 : a < 534.03 ? 5 : a < 534.07 ? 6 : a < 534.1 ? 7 : a < 534.13 ? 8 : a < 534.16 ? 9 : a < 534.24 ? 10 : a < 534.3 ? 11 : a < 535.01 ? 12 : a < 535.02 ? "13+" : a < 535.07 ? 15 : a < 535.11 ? 16 : a < 535.19 ? 17 : a < 536.05 ? 18 : a < 536.1 ? 19 : a < 537.01 ? 20 : a < 537.11 ? "21+" : a < 537.13 ? 23 : a < 537.18 ? 24 : a < 537.24 ? 25 : a < 537.36 ? 26 : "Blink" != N ? "27" : "28")) : (N && (N[1] = "like Safari"), a = (a = a[0]) < 400 ? 1 : a < 500 ? 2 : a < 526 ? 3 : a < 533 ? 4 : a < 534 ? "4+" : a < 535 ? 5 : a < 537 ? 6 : a < 538 ? 7 : a < 601 ? 8 : "8"), N && (N[1] += " " + (a += "number" == typeof a ? ".x" : /[.+]/.test(a) ? "" : "+")), "Safari" == U && (!k || parseInt(k) > 45) && (k = a)), "Opera" == U && (a = /\bzbov|zvav$/.exec(j)) ? (U += " ", M.unshift("desktop mode"), "zvav" == a ? (U += "Mini", k = null) : U += "Mobile", j = j.replace(RegExp(" *" + a + "$"), "")) : "Safari" == U && /\bChrome\b/.exec(N && N[1]) && (M.unshift("desktop mode"), U = "Chrome Mobile", k = null, /\bOS X\b/.test(j) ? (F = "Apple", j = "iOS 4.3+") : j = null), k && 0 == k.indexOf(a = /[\d.]+$/.exec(j)) && e.indexOf("/" + a + "-") > -1 && (j = x(j.replace(a, ""))), N && !/\b(?:Avant|Nook)\b/.test(U) && (/Browser|Lunascape|Maxthon/.test(U) || "Safari" != U && /^iOS/.test(j) && /\bSafari\b/.test(N[1]) || /^(?:Adobe|Arora|Breach|Midori|Opera|Phantom|Rekonq|Rock|Samsung Internet|Sleipnir|Web)/.test(U) && N[1]) && (a = N[N.length - 1]) && M.push(a), M.length && (M = ["(" + M.join("; ") + ")"]), F && V && V.indexOf(F) < 0 && M.push("on " + F), V && M.push((/^on /.test(M[M.length - 1]) ? "" : "on ") + V), j && (a = / ([\d.+]+)$/.exec(j), u = a && "/" == j.charAt(j.length - a[0].length - 1), j = {
                  architecture: 32,
                  family: a && !u ? j.replace(a[0], "") : j,
                  version: a ? a[1] : null,
                  toString: function toString() {
                    var t = this.version;
                    return this.family + (t && !u ? " " + t : "") + (64 == this.architecture ? " 64-bit" : "");
                  }
                }), (a = /\b(?:AMD|IA|Win|WOW|x86_|x)64\b/i.exec(R)) && !/\bi686\b/i.test(R) ? (j && (j.architecture = 64, j.family = j.family.replace(RegExp(" *" + a), "")), U && (/\bWOW64\b/i.test(e) || L && /\w(?:86|32)$/.test(i.cpuClass || i.platform) && !/\bWin64; x64\b/i.test(e)) && M.unshift("32-bit")) : j && /^OS X/.test(j.family) && "Chrome" == U && parseFloat(k) >= 39 && (j.architecture = 64), e || (e = null);
                var K = {};
                K.description = e, K.layout = N && N[0], K.manufacturer = F, K.name = U, K.prerelease = O, K.product = V, K.ua = e, K.version = U && k, K.os = j || {
                  architecture: null,
                  family: null,
                  version: null,
                  toString: function toString() {
                    return "null";
                  }
                };
                var W = window.my || window.hbs || window.qg || window.wx || window.tt || window.loadRuntime && window.loadRuntime();
                return W && W.getSystemInfo && (K.runtimeMask = !0, K.product = "", K.manufacturer = "", K.os.version = "", W.getSystemInfo({
                  success: function success(t) {
                    K.product = t.model, K.manufacturer = t.brand || "";
                    var e = /Android[^]+?([\d\.]+?)\s/i.exec(t.system + " ");
                    e && e.length > 1 ? K.os.version = e[1].replace(/_/g, ".") : K.os.version = t.system, K.runtimeMask = !1;
                  },
                  fail: function fail() {
                    K.runtimeMask = !1;
                  },
                  complete: function complete() {
                    K.runtimeMask = !1;
                  }
                })), K.parse = t, K.toString = function () {
                  return this.description || "";
                }, K.version && M.unshift(k), K.name && M.unshift(U), j && U && (j != String(j).split(" ")[0] || j != U.split(" ")[0] && !V) && M.push(V ? "(" + j + ")" : "on " + j), M.length && (K.description = M.join(" ")), K;
              }();

              s.platform = S, void 0 === (i = function () {
                return S;
              }.call(e, r, e, t)) || (t.exports = i);
            }).call(this);
          }).call(this, r(1)(t), r(0));
        }, function (t, e, r) {
          var n, i, o, s, _a;

          n = r(13), i = r(2).utf8, o = r(14), s = r(2).bin, (_a = function a(t, e) {
            t.constructor == String ? t = e && "binary" === e.encoding ? s.stringToBytes(t) : i.stringToBytes(t) : o(t) ? t = Array.prototype.slice.call(t, 0) : Array.isArray(t) || (t = t.toString());

            for (var r = n.bytesToWords(t), u = 8 * t.length, h = 1732584193, l = -271733879, c = -1732584194, f = 271733878, p = 0; p < r.length; p++) r[p] = 16711935 & (r[p] << 8 | r[p] >>> 24) | 4278255360 & (r[p] << 24 | r[p] >>> 8);

            r[u >>> 5] |= 128 << u % 32, r[14 + (u + 64 >>> 9 << 4)] = u;
            var d = _a._ff,
                g = _a._gg,
                v = _a._hh,
                y = _a._ii;

            for (p = 0; p < r.length; p += 16) {
              var m = h,
                  b = l,
                  w = c,
                  x = f;
              h = d(h, l, c, f, r[p + 0], 7, -680876936), f = d(f, h, l, c, r[p + 1], 12, -389564586), c = d(c, f, h, l, r[p + 2], 17, 606105819), l = d(l, c, f, h, r[p + 3], 22, -1044525330), h = d(h, l, c, f, r[p + 4], 7, -176418897), f = d(f, h, l, c, r[p + 5], 12, 1200080426), c = d(c, f, h, l, r[p + 6], 17, -1473231341), l = d(l, c, f, h, r[p + 7], 22, -45705983), h = d(h, l, c, f, r[p + 8], 7, 1770035416), f = d(f, h, l, c, r[p + 9], 12, -1958414417), c = d(c, f, h, l, r[p + 10], 17, -42063), l = d(l, c, f, h, r[p + 11], 22, -1990404162), h = d(h, l, c, f, r[p + 12], 7, 1804603682), f = d(f, h, l, c, r[p + 13], 12, -40341101), c = d(c, f, h, l, r[p + 14], 17, -1502002290), h = g(h, l = d(l, c, f, h, r[p + 15], 22, 1236535329), c, f, r[p + 1], 5, -165796510), f = g(f, h, l, c, r[p + 6], 9, -1069501632), c = g(c, f, h, l, r[p + 11], 14, 643717713), l = g(l, c, f, h, r[p + 0], 20, -373897302), h = g(h, l, c, f, r[p + 5], 5, -701558691), f = g(f, h, l, c, r[p + 10], 9, 38016083), c = g(c, f, h, l, r[p + 15], 14, -660478335), l = g(l, c, f, h, r[p + 4], 20, -405537848), h = g(h, l, c, f, r[p + 9], 5, 568446438), f = g(f, h, l, c, r[p + 14], 9, -1019803690), c = g(c, f, h, l, r[p + 3], 14, -187363961), l = g(l, c, f, h, r[p + 8], 20, 1163531501), h = g(h, l, c, f, r[p + 13], 5, -1444681467), f = g(f, h, l, c, r[p + 2], 9, -51403784), c = g(c, f, h, l, r[p + 7], 14, 1735328473), h = v(h, l = g(l, c, f, h, r[p + 12], 20, -1926607734), c, f, r[p + 5], 4, -378558), f = v(f, h, l, c, r[p + 8], 11, -2022574463), c = v(c, f, h, l, r[p + 11], 16, 1839030562), l = v(l, c, f, h, r[p + 14], 23, -35309556), h = v(h, l, c, f, r[p + 1], 4, -1530992060), f = v(f, h, l, c, r[p + 4], 11, 1272893353), c = v(c, f, h, l, r[p + 7], 16, -155497632), l = v(l, c, f, h, r[p + 10], 23, -1094730640), h = v(h, l, c, f, r[p + 13], 4, 681279174), f = v(f, h, l, c, r[p + 0], 11, -358537222), c = v(c, f, h, l, r[p + 3], 16, -722521979), l = v(l, c, f, h, r[p + 6], 23, 76029189), h = v(h, l, c, f, r[p + 9], 4, -640364487), f = v(f, h, l, c, r[p + 12], 11, -421815835), c = v(c, f, h, l, r[p + 15], 16, 530742520), h = y(h, l = v(l, c, f, h, r[p + 2], 23, -995338651), c, f, r[p + 0], 6, -198630844), f = y(f, h, l, c, r[p + 7], 10, 1126891415), c = y(c, f, h, l, r[p + 14], 15, -1416354905), l = y(l, c, f, h, r[p + 5], 21, -57434055), h = y(h, l, c, f, r[p + 12], 6, 1700485571), f = y(f, h, l, c, r[p + 3], 10, -1894986606), c = y(c, f, h, l, r[p + 10], 15, -1051523), l = y(l, c, f, h, r[p + 1], 21, -2054922799), h = y(h, l, c, f, r[p + 8], 6, 1873313359), f = y(f, h, l, c, r[p + 15], 10, -30611744), c = y(c, f, h, l, r[p + 6], 15, -1560198380), l = y(l, c, f, h, r[p + 13], 21, 1309151649), h = y(h, l, c, f, r[p + 4], 6, -145523070), f = y(f, h, l, c, r[p + 11], 10, -1120210379), c = y(c, f, h, l, r[p + 2], 15, 718787259), l = y(l, c, f, h, r[p + 9], 21, -343485551), h = h + m >>> 0, l = l + b >>> 0, c = c + w >>> 0, f = f + x >>> 0;
            }

            return n.endian([h, l, c, f]);
          })._ff = function (t, e, r, n, i, o, s) {
            var a = t + (e & r | ~e & n) + (i >>> 0) + s;
            return (a << o | a >>> 32 - o) + e;
          }, _a._gg = function (t, e, r, n, i, o, s) {
            var a = t + (e & n | r & ~n) + (i >>> 0) + s;
            return (a << o | a >>> 32 - o) + e;
          }, _a._hh = function (t, e, r, n, i, o, s) {
            var a = t + (e ^ r ^ n) + (i >>> 0) + s;
            return (a << o | a >>> 32 - o) + e;
          }, _a._ii = function (t, e, r, n, i, o, s) {
            var a = t + (r ^ (e | ~n)) + (i >>> 0) + s;
            return (a << o | a >>> 32 - o) + e;
          }, _a._blocksize = 16, _a._digestsize = 16, t.exports = function (t, e) {
            if (null == t) throw new Error("Illegal argument " + t);
            var r = n.wordsToBytes(_a(t, e));
            return e && e.asBytes ? r : e && e.asString ? s.bytesToString(r) : n.bytesToHex(r);
          };
        }, function (t, e) {
          var r, n;
          r = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", n = {
            rotl: function rotl(t, e) {
              return t << e | t >>> 32 - e;
            },
            rotr: function rotr(t, e) {
              return t << 32 - e | t >>> e;
            },
            endian: function endian(t) {
              if (t.constructor == Number) return 16711935 & n.rotl(t, 8) | 4278255360 & n.rotl(t, 24);

              for (var e = 0; e < t.length; e++) t[e] = n.endian(t[e]);

              return t;
            },
            randomBytes: function randomBytes(t) {
              for (var e = []; t > 0; t--) e.push(Math.floor(256 * Math.random()));

              return e;
            },
            bytesToWords: function bytesToWords(t) {
              for (var e = [], r = 0, n = 0; r < t.length; r++, n += 8) e[n >>> 5] |= t[r] << 24 - n % 32;

              return e;
            },
            wordsToBytes: function wordsToBytes(t) {
              for (var e = [], r = 0; r < 32 * t.length; r += 8) e.push(t[r >>> 5] >>> 24 - r % 32 & 255);

              return e;
            },
            bytesToHex: function bytesToHex(t) {
              for (var e = [], r = 0; r < t.length; r++) e.push((t[r] >>> 4).toString(16)), e.push((15 & t[r]).toString(16));

              return e.join("");
            },
            hexToBytes: function hexToBytes(t) {
              for (var e = [], r = 0; r < t.length; r += 2) e.push(parseInt(t.substr(r, 2), 16));

              return e;
            },
            bytesToBase64: function bytesToBase64(t) {
              for (var e = [], n = 0; n < t.length; n += 3) for (var i = t[n] << 16 | t[n + 1] << 8 | t[n + 2], o = 0; o < 4; o++) 8 * n + 6 * o <= 8 * t.length ? e.push(r.charAt(i >>> 6 * (3 - o) & 63)) : e.push("=");

              return e.join("");
            },
            base64ToBytes: function base64ToBytes(t) {
              t = t.replace(/[^A-Z0-9+\/]/gi, "");

              for (var e = [], n = 0, i = 0; n < t.length; i = ++n % 4) 0 != i && e.push((r.indexOf(t.charAt(n - 1)) & Math.pow(2, -2 * i + 8) - 1) << 2 * i | r.indexOf(t.charAt(n)) >>> 6 - 2 * i);

              return e;
            }
          }, t.exports = n;
        }, function (t, e) {
          function r(t) {
            return !!t.constructor && "function" == typeof t.constructor.isBuffer && t.constructor.isBuffer(t);
          }

          t.exports = function (t) {
            return null != t && (r(t) || function (t) {
              return "function" == typeof t.readFloatLE && "function" == typeof t.slice && r(t.slice(0, 0));
            }(t) || !!t._isBuffer);
          };
        }, function (t, e, r) {
          var n = function n(t) {
            t["extends"](this);
          };

          n.prototype = {
            onStarted: function onStarted(t, e) {
              if (e && t && 0 != t.replace(/\s/g, "").length) {
                var r = this._generatePostData({
                  eventTag: "started",
                  eventID: t,
                  eventValue: e
                });

                this._upload(r);
              } else console.log("eventID 不能为空!");
            },
            onSuccess: function onSuccess(t, e) {
              if (e && t && 0 != t.replace(/\s/g, "").length) {
                var r = this._generatePostData({
                  eventTag: "successed",
                  eventID: t,
                  eventValue: e
                });

                this._upload(r);
              } else console.log("eventID 不能为空!");
            },
            onCancelled: function onCancelled(t, e) {
              if (e && t && 0 != t.replace(/\s/g, "").length) {
                var r = this._generatePostData({
                  eventTag: "cancelled",
                  eventID: t,
                  eventValue: e
                });

                this._upload(r);
              } else console.log("eventID 不能为空!");
            },
            onFailed: function onFailed(t, e, r) {
              if (e && t && 0 != t.replace(/\s/g, "").length) {
                var n = this._generatePostData({
                  eventTag: "failed",
                  eventID: t,
                  eventFailDesc: r,
                  eventValue: e
                });

                this._upload(n);
              } else console.log("eventID 不能为空!");
            }
          }, t.exports = n;
        }, function (t, e, r) {
          var n = function n(t) {
            t["extends"](this);
          };

          n.prototype = {
            loginStart: function loginStart(t) {
              this.data.channel = t && t.channel || "";

              var e = this._generatePostData({
                eventTag: "started",
                eventID: "login"
              });

              this._upload(e);
            },
            loginSuccess: function loginSuccess(t) {
              if (t && t.userID) {
                this.data.age = t.age || 0, this.data.sex = t.sex || 0;

                var e = t.channel || this.data.channel,
                    r = this._getLocalStorage("onlineDuration"),
                    n = this._getLocalStorage("_UID_" + this.data.appID) || "";

                n.length > 0 && parseInt(r) > 0 && (this.data.userID = n, this.logout()), this.data.channel = e, this.data.userID = t.userID, this._addLocalStorage("_UID_" + this.data.appID, this.data.userID), this._addLocalStorage("__SDK_CHANNEL_", this.data.channel);

                var i = this._generatePostData({
                  onlineDuration: 0,
                  eventTag: "successed",
                  eventID: "login"
                });

                this._upload(i), this._addLocalStorage("onlineDuration", 0), this._setHeartBeat(!0);
              } else console.log("userID 不能为空!");
            },
            loginFailed: function loginFailed(t) {
              if (t) {
                var e = t;
                "string" != typeof t && (this.data.channel = t.channel, e = t.reason);

                var r = this._generatePostData({
                  exitFailDesc: e || "",
                  eventTag: "failed",
                  eventID: "login"
                });

                this._upload(r);
              } else console.log("loginFailed 参数不能为空!");
            },
            logout: function logout() {
              this.data.channel = this._getLocalStorage("__SDK_CHANNEL_") || "";

              var t = this._getLocalStorage("onlineDuration") || 0,
                  e = this._generatePostData({
                onlineDuration: t,
                exitTag: "successed",
                eventID: "logout"
              });

              this._upload(e), this.data.userID = "", this._setHeartBeat(!1), this._addLocalStorage("onlineDuration", 0), this._addLocalStorage("__SDK_CHANNEL_", ""), this._addLocalStorage("_UID_" + this.data.appID, "");
            },
            setAccountType: function setAccountType(t) {
              var e = this._generatePostData({
                eventTag: "successed",
                eventID: "role",
                eventValue: {
                  action: "update",
                  accountType: t
                }
              });

              this._upload(e);
            },
            setAge: function setAge(t) {
              t && (this.data.age = t);
            },
            setGender: function setGender(t) {
              0 == t || 1 == t || 2 == t ? t && (this.data.aex = t) : console.log("gender 为 int 类型：0 未知、1 男性、 2 女性");
            },
            createRole: function createRole(t) {
              var e = {
                action: "createRole",
                roleID: t.roleID,
                userName: t.userName,
                race: t.race,
                "class": t["class"],
                gameServer: t.gameServer
              },
                  r = this._generatePostData({
                eventTag: "successed",
                eventID: "role",
                eventValue: e
              });

              this._upload(r);
            },
            setLevel: function setLevel(t) {
              var e = this._generatePostData({
                eventTag: "successed",
                eventID: "role",
                eventValue: {
                  action: "update",
                  level: t
                }
              });

              this._upload(e);
            }
          }, t.exports = n;
        }, function (t, e, r) {
          var n = function n(t) {
            t["extends"](this);
          };

          n.prototype = {
            onEvent: function onEvent(t) {
              if (t && t.eventName && 0 != t.eventName.replace(/\s/g, "").length) {
                var e = this._generatePostData({
                  eventTag: "successed",
                  eventID: t.eventName
                });

                this._upload(e);
              } else console.log("eventName 不能为空或者包含空格!");
            },
            onEventStart: function onEventStart(t) {
              if (t && t.eventName && 0 != t.eventName.replace(/\s/g, "").length) {
                var e = this._generatePostData({
                  eventTag: "started",
                  eventID: t.eventName
                });

                this._upload(e);
              } else console.log("eventName 不能为空或者包含空格!");
            },
            onEventEnd: function onEventEnd(t) {
              if (t && t.eventName && 0 != t.eventName.replace(/\s/g, "").length) {
                var e = this._generatePostData({
                  eventTag: "successed",
                  eventID: t.eventName
                });

                this._upload(e);
              } else console.log("eventName 不能为空或者包含空格!");
            }
          }, t.exports = n;
        }, function (t, e, r) {
          var n = function n(t) {
            t["extends"](this);
          };

          n.prototype = {
            payBegin: function payBegin(t) {
              var e = this._generatePostData({
                expendTag: "started",
                eventID: "pay",
                eventValue: {
                  orderID: t.orderID,
                  accountID: t.accountID,
                  partner: t.partner || "",
                  currencyAmount: t.amount,
                  currencyType: t.currencyType,
                  virtualCurrencyAmount: t.virtualCurrencyAmount || "0",
                  subjectID: t.iapID || "",
                  paymentType: t.payType || "",
                  gameServer: t.gameServer || "",
                  level: t.level || "",
                  mission: t.mission || ""
                }
              });

              this._upload(e);
            },
            paySuccess: function paySuccess(t) {
              var e = this._generatePostData({
                expendTag: "successed",
                eventID: "pay",
                eventValue: {
                  orderID: t.orderID,
                  accountID: t.accountID,
                  partner: t.partner || "",
                  currencyAmount: t.amount,
                  currencyType: t.currencyType,
                  virtualCurrencyAmount: t.virtualCurrencyAmount || "0",
                  subjectID: t.iapID || "",
                  paymentType: t.payType || "",
                  gameServer: t.gameServer || "",
                  level: t.level || "",
                  mission: t.mission || ""
                }
              });

              this._upload(e);
            },
            payFailed: function payFailed(t) {
              var e = this._generatePostData({
                expendTag: "failed",
                eventID: "pay",
                expendFailDesc: t.reason || "",
                eventValue: {
                  orderID: t.orderID,
                  accountID: t.accountID,
                  partner: t.partner || "",
                  currencyAmount: t.amount,
                  currencyType: t.currencyType,
                  virtualCurrencyAmount: t.virtualCurrencyAmount || "0",
                  subjectID: t.iapID || "",
                  paymentType: t.payType || "",
                  gameServer: t.gameServer || "",
                  level: t.level || "",
                  mission: t.mission || ""
                }
              });

              this._upload(e);
            },
            payCanceled: function payCanceled(t) {
              var e = this._generatePostData({
                expendTag: "cancelled",
                eventID: "pay",
                eventValue: {
                  orderID: t.orderID,
                  accountID: t.accountID,
                  partner: t.partner || "",
                  currencyAmount: t.amount,
                  currencyType: t.currencyType,
                  virtualCurrencyAmount: t.virtualCurrencyAmount || "0",
                  subjectID: t.iapID || "",
                  paymentType: t.payType || "",
                  gameServer: t.gameServer || "",
                  level: t.level || "",
                  mission: t.mission || ""
                }
              });

              this._upload(e);
            }
          }, t.exports = n;
        }, function (t, e, r) {
          var n = function n(t) {
            t["extends"](this);
          };

          n.prototype = {
            begin: function begin(t) {
              if (t && t.level) {
                var e = this._generatePostData({
                  eventTag: "started",
                  eventID: "barrier",
                  eventValue: {
                    level: t.level
                  }
                });

                this._upload(e);
              } else console.log("level 不能为空!");
            },
            complete: function complete(t) {
              if (t && t.level) {
                var e = this._generatePostData({
                  eventTag: "successed",
                  eventID: "barrier",
                  eventValue: {
                    level: t.level
                  }
                });

                this._upload(e);
              } else console.log("level 不能为空!");
            },
            failed: function failed(t, e) {
              if (t && t.level) {
                var r = this._generatePostData({
                  eventTag: "failed",
                  eventID: "barrier",
                  eventFailDesc: t.reason || e,
                  eventValue: {
                    level: t.level
                  }
                });

                this._upload(r);
              } else console.log("level 不能为空!");
            }
          }, t.exports = n;
        }, function (t, e, r) {
          var n = function n(t) {
            t["extends"](this);
          };

          n.prototype = {
            begin: function begin(t) {
              if (t && t.taskID) {
                var e = this._generatePostData({
                  eventTag: "started",
                  eventID: "task",
                  eventValue: {
                    taskID: t.taskID,
                    taskType: t.type
                  }
                });

                this._upload(e);
              } else console.log("taskID 不能为空!");
            },
            complete: function complete(t) {
              if (t && t.taskID) {
                var e = this._generatePostData({
                  eventTag: "successed",
                  eventID: "task",
                  eventValue: {
                    taskID: t.taskID
                  }
                });

                this._upload(e);
              } else console.log("taskID 不能为空!");
            },
            failed: function failed(t) {
              if (t && t.taskID) {
                var e = this._generatePostData({
                  eventTag: "failed",
                  eventID: "task",
                  eventFailDesc: t.reason || "",
                  eventValue: {
                    taskID: t.taskID
                  }
                });

                this._upload(e);
              } else console.log("taskID 不能为空!");
            }
          }, t.exports = n;
        }, function (t, e, r) {
          var n = function n(t) {
            t["extends"](this);
          };

          n.prototype = {
            buy: function buy(t) {
              var e = {
                action: "buy",
                itemID: t.itemID,
                itemType: t.itemType,
                itemCount: t.itemCount,
                virtualCoin: t.virtualCoin,
                virtualType: t.virtualType,
                consumePoint: t.consumePoint
              },
                  r = this._generatePostData({
                eventTag: "successed",
                eventID: "item",
                eventValue: e
              });

              this._upload(r);
            },
            get: function get(t) {
              var e = {
                action: "get",
                itemID: t.itemID,
                itemType: t.itemType,
                itemCount: t.itemCount,
                reason: t.reason
              },
                  r = this._generatePostData({
                eventTag: "successed",
                eventID: "item",
                eventValue: e
              });

              this._upload(r);
            },
            consume: function consume(t) {
              var e = {
                action: "consume",
                itemID: t.itemID,
                itemType: t.itemType,
                itemCount: t.itemCount,
                reason: t.reason
              },
                  r = this._generatePostData({
                eventTag: "successed",
                eventID: "item",
                eventValue: e
              });

              this._upload(r);
            }
          }, t.exports = n;
        }, function (t, e, r) {
          var n = function n(t) {
            t["extends"](this);
          };

          n.prototype = {
            setVirtualNum: function setVirtualNum(t) {
              var e = {
                action: "set",
                type: t.type,
                count: t.count
              },
                  r = this._generatePostData({
                eventTag: "successed",
                eventID: "virtual",
                eventValue: e
              });

              this._upload(r);
            },
            get: function get(t) {
              var e = {
                action: "get",
                type: t.type,
                count: t.count,
                reason: t.reason
              },
                  r = this._generatePostData({
                eventTag: "successed",
                eventID: "virtual",
                eventValue: e
              });

              this._upload(r);
            },
            consume: function consume(t) {
              var e = {
                action: "consume",
                type: t.type,
                count: t.count,
                reason: t.reason
              },
                  r = this._generatePostData({
                eventTag: "successed",
                eventID: "virtual",
                eventValue: e
              });

              this._upload(r);
            }
          }, t.exports = n;
        }, function (t, e, r) {
          var n = function n(t) {};

          n.prototype = {
            GuideLine: 1,
            MainLine: 2,
            BranchLine: 3,
            Daily: 4,
            Activity: 5,
            Other: 100
          }, t.exports = n;
        }, function (t, e, r) {
          var n = function n(t) {
            t["extends"](this);
          };

          n.prototype = {
            begin: function begin(t) {
              if (t && t.adID) {
                var e = this._generatePostData({
                  eventTag: "started",
                  eventID: "advertising",
                  eventValue: {
                    ID: t.adID
                  }
                });

                this._upload(e);
              } else console.log("adID 不能为空!");
            },
            complete: function complete(t) {
              if (t && t.adID && t.timeLong && t.profit) {
                var e = this._generatePostData({
                  eventTag: "successed",
                  eventID: "advertising",
                  eventValue: {
                    ID: t.adID,
                    timeLong: t.timeLong,
                    profit: t.profit
                  }
                });

                this._upload(e);
              } else console.log("adID 不能为空!");
            },
            failed: function failed(t) {
              if (t && t.adID) {
                var e = this._generatePostData({
                  eventTag: "failed",
                  eventID: "advertising",
                  eventFailDesc: t.reason || "",
                  eventValue: {
                    ID: t.adID
                  }
                });

                this._upload(e);
              } else console.log("adID 不能为空!");
            }
          }, t.exports = n;
        }]); // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
      }, {});
    }
  };
});

System.register("chunks:///_virtual/cocosAnalytics.min.mjs_cjs=&original=.js", ['./cocosAnalytics.min.js', './cjs-loader.mjs'], function (exports, module) {
  var __cjsMetaURL, loader;

  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      var _setter = {};
      _setter.__cjsMetaURL = module.__cjsMetaURL;
      _setter.default = module.default;
      exports(_setter);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './cocosAnalytics.min.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./cocosAnalytics.min.js', module.meta.url);
      }

      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/colliderItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './uiManager.ts', './gameManager.ts', './constant.ts', './poolManager.ts', './PureMVC.ts', './Constant2.ts', './ViewMgr.ts', './ModuleType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Enum, Quat, BoxColliderComponent, CylinderColliderComponent, CapsuleColliderComponent, MeshColliderComponent, isValid, PhysicsSystem, Component, UIManager, GameManager, Constant, PoolManager, facade, ViewMgr, ModuleName, ProxyName, MediatorName;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      Quat = module.Quat;
      BoxColliderComponent = module.BoxColliderComponent;
      CylinderColliderComponent = module.CylinderColliderComponent;
      CapsuleColliderComponent = module.CapsuleColliderComponent;
      MeshColliderComponent = module.MeshColliderComponent;
      isValid = module.isValid;
      PhysicsSystem = module.PhysicsSystem;
      Component = module.Component;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, function (module) {
      facade = module.facade;
    }, null, function (module) {
      ViewMgr = module.ViewMgr;
    }, function (module) {
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
      MediatorName = module.MediatorName;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "a3c3eSoUrFKl5IFTQQGWnRd", "colliderItem", undefined); //碰撞器脚本


      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var COLLIDER_NAME = Enum({
        HEART_BIG: 1,
        //大爱心, 玩家吃到后增加生命上限
        WARP_GATE: 2,
        //传送门
        NPC_BUSINESS_MAN: 3,
        //NPC商人
        NPC_WISE_MAN: 4 //NPC智慧老头

      }); //管理游戏中若干碰撞器

      var ColliderItem = exports('ColliderItem', (_dec = ccclass('ColliderItem'), _dec2 = property({
        type: COLLIDER_NAME,
        displayOrder: 1
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ColliderItem, _Component);

        function ColliderItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "colliderName", _descriptor, _assertThisInitialized(_this));

          _this._curHeartBigQuat = new Quat(); //爱心旋转

          _this._timer = null; //定时器

          _this._colliderCom = null;
          _this._playerProxy = null;
          return _this;
        }

        var _proto = ColliderItem.prototype;

        _proto.onLoad = function onLoad() {
          this._colliderCom = this.node.getComponent(BoxColliderComponent) || this.node.getComponent(CylinderColliderComponent) || this.node.getComponent(CapsuleColliderComponent) || this.node.getComponent(MeshColliderComponent);

          if (!this._colliderCom) {
            console.error("this node does not have collider component");
          }

          this._playerProxy = facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
        };

        _proto.onEnable = function onEnable() {
          if (this._colliderCom.isTrigger) {
            this._colliderCom.on('onTriggerEnter', this._onTriggerEnterCb, this);
          } else {
            this._colliderCom.on('onCollisionEnter', this._onCollisionEnterCb, this);
          }
        };

        _proto.onDisable = function onDisable() {
          if (this._colliderCom.isTrigger) {
            this._colliderCom.off('onTriggerEnter', this._onTriggerEnterCb, this);
          } else {
            this._colliderCom.off('onCollisionEnter', this._onCollisionEnterCb, this);
          }
        };

        _proto.start = function start() {}
        /**
         * 初始化
         */
        ;

        _proto.init = function init() {};

        _proto._onTriggerEnterCb = function _onTriggerEnterCb(event) {
          this._hitTarget(event.otherCollider, event.selfCollider);
        };

        _proto._onCollisionEnterCb = function _onCollisionEnterCb(event) {
          this._hitTarget(event.otherCollider, event.selfCollider);
        };

        _proto._hitTarget = function _hitTarget(otherCollider, selfCollider) {
          var _this2 = this;

          if (GameManager.isGameOver || !GameManager.isGameStart) {
            return;
          }

          if (otherCollider.getGroup() == Constant.PHY_GROUP.PLAYER && isValid(GameManager.ndPlayer)) {
            switch (this.colliderName) {
              case COLLIDER_NAME.HEART_BIG:
                GameManager.scriptPlayer.addBlood(300);
                PoolManager.instance.putNode(this.node);
                GameManager.checkTriggerAll();
                break;

              case COLLIDER_NAME.WARP_GATE:
                GameManager.scriptPlayer.playAction({
                  action: Constant.PLAYER_ACTION.STOP_MOVE
                });
                GameManager.scriptPlayer.scriptCharacterRigid.stopMove();
                GameManager.ndPlayer.active = false;

                if (PhysicsSystem.PHYSICS_PHYSX) {
                  this.node.destroy();
                } else {
                  PoolManager.instance.putNode(this.node);
                }

                GameManager.isWin = true;
                break;

              case COLLIDER_NAME.NPC_BUSINESS_MAN:
                GameManager.isGamePause = true;
                GameManager.scriptPlayer.scriptCharacterRigid.stopMove();
                GameManager.scriptPlayer.scriptPlayerModel.playAni(Constant.PLAYER_ANI_TYPE.IDLE, true);

                if (this._playerProxy.isPlayerSkillAllUnlock) {
                  //防错
                  UIManager.instance.showTips("所有技能均已解锁");
                  PoolManager.instance.putNode(this.node);
                  GameManager.isGamePause = false;
                } else {
                  ViewMgr.ins.hide(ModuleName.Fight, MediatorName.FightHud);
                  ViewMgr.ins.show(ModuleName.Fight, MediatorName.FightShop, function () {
                    GameManager.isGamePause = false;
                    PoolManager.instance.putNode(_this2.node);
                  });
                }

                GameManager.checkTriggerAll();
                break;

              case COLLIDER_NAME.NPC_WISE_MAN:
                GameManager.isGamePause = true;
                GameManager.scriptPlayer.scriptCharacterRigid.stopMove();
                GameManager.scriptPlayer.scriptPlayerModel.playAni(Constant.PLAYER_ANI_TYPE.IDLE, true);

                if (this._playerProxy.isPlayerSkillAllUnlock) {
                  UIManager.instance.showTips("所有技能均已解锁");
                  PoolManager.instance.putNode(this.node);
                  GameManager.isGamePause = false;
                } else {
                  ViewMgr.ins.hide(ModuleName.Fight, MediatorName.FightHud);
                  ViewMgr.ins.show(ModuleName.Fight, MediatorName.FightSkill, function () {
                    PoolManager.instance.putNode(_this2.node);
                    GameManager.isGamePause = false;
                  });
                }

                GameManager.checkTriggerAll();
                break;
            }
          }
        };

        _proto.update = function update(deltaTime) {
          if (GameManager.isGameOver || !GameManager.ndPlayer || !this.node.parent) {
            return;
          }

          if (this.colliderName === COLLIDER_NAME.HEART_BIG) {
            Quat.fromEuler(this._curHeartBigQuat, 0, 120 * deltaTime, 0);
            this.node.rotate(this._curHeartBigQuat);
          }
        };

        _createClass(ColliderItem, [{
          key: "timer",
          set: //碰撞体类型名称
          function set(obj) {
            if (this._timer) {
              clearTimeout(this._timer);
              this._timer = null;
            }
          }
        }]);

        return ColliderItem;
      }(Component), _class3.COLLIDER_NAME = COLLIDER_NAME, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "colliderName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return COLLIDER_NAME.HEART_BIG;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Command.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './SimpleCommand.ts'], function (exports) {
  var _inheritsLoose, cclegacy, SimpleCommand;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      SimpleCommand = module.SimpleCommand;
    }],
    execute: function () {
      cclegacy._RF.push({}, "99e8dCou41IJ7SilTqSYFop", "Command", undefined);

      var Command = exports('Command', /*#__PURE__*/function (_SimpleCommand) {
        _inheritsLoose(Command, _SimpleCommand);

        function Command() {
          return _SimpleCommand.apply(this, arguments) || this;
        }

        var _proto = Command.prototype;

        _proto.showView = function showView(mediatorName, param, parent) {
          this._module.showView(mediatorName, param, parent);
        };

        _proto.hideView = function hideView(mediatorName, destroyImmediately) {
          this._module.hideView(mediatorName);
        };

        _proto.retrieveMediator = function retrieveMediator(mediatorName) {
          return this._module.retrieveMediator(mediatorName);
        };

        return Command;
      }(SimpleCommand));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/CommonEvent.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b285cYkKntLm7Flspl5bm6U", "CommonEvent", undefined);

      var CommonEvent = exports('CommonEvent', /*#__PURE__*/function (CommonEvent) {
        CommonEvent["ShowComSell"] = "ShowComSell";
        CommonEvent["HideComSell"] = "HideComSell";
        return CommonEvent;
      }({}));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ConfigUtils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PathUtils.ts', './ByteBuf.ts', './schema.ts'], function (exports) {
  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, resources, JsonAsset, BufferAsset, PathUtils, ByteBuf, Tables;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      resources = module.resources;
      JsonAsset = module.JsonAsset;
      BufferAsset = module.BufferAsset;
    }, function (module) {
      PathUtils = module.PathUtils;
    }, function (module) {
      ByteBuf = module.default;
    }, function (module) {
      Tables = module.Tables;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4329aSqHEJBYIjFJU8X9gyh", "ConfigUtils", undefined);

      var ConfigLoaderJson = /*#__PURE__*/function () {
        function ConfigLoaderJson() {
          this._sheet = [];
        }

        var _proto = ConfigLoaderJson.prototype;

        _proto.getLoader = function getLoader(fileName) {
          var path = PathUtils.config(fileName);
          var res = resources.get(path);
          return res ? res.json : {};
        };

        _proto.clear = function clear() {
          this._sheet.forEach(function (item) {
            return resources.release(item, JsonAsset);
          });

          this._sheet = [];
        };

        _proto.loadSheet = /*#__PURE__*/function () {
          var _loadSheet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var sheetFile, sheetFileResult, fileNameSheet, sheet;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  sheetFile = PathUtils.config(ConfigLoaderJson.SHEET_NAME);
                  _context.next = 3;
                  return new Promise(function (resolve, reject) {
                    resources.load(sheetFile, JsonAsset, function (err, data) {
                      console.log("ConfigLoaderJson---loadSheet--->", err);
                      resolve(data);
                    });
                  });

                case 3:
                  sheetFileResult = _context.sent;
                  fileNameSheet = sheetFileResult.json;
                  sheet = fileNameSheet.map(function (fileName) {
                    return PathUtils.config(fileName);
                  });
                  this._sheet = [].concat(sheet, [sheetFile]);
                  _context.next = 9;
                  return new Promise(function (resolve, reject) {
                    resources.load(sheet, JsonAsset, function (err, data) {
                      console.log("ConfigLoaderJson---loadSheet--->", err);
                      resolve(data);
                    });
                  });

                case 9:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function loadSheet() {
            return _loadSheet.apply(this, arguments);
          }

          return loadSheet;
        }();

        return ConfigLoaderJson;
      }();

      ConfigLoaderJson.SHEET_NAME = "config_sheet";

      var ConfigLoaderBin = /*#__PURE__*/function () {
        function ConfigLoaderBin() {}

        var _proto2 = ConfigLoaderBin.prototype;

        _proto2.getLoader = function getLoader(fileName) {
          var path = PathUtils.config(fileName);
          var res = resources.get(path);
          if (res == null) return null;
          var buffer = new Uint8Array(res.buffer().slice(0, res.buffer().byteLength));
          return new ByteBuf(buffer);
        };

        _proto2.clear = function clear() {
          var fileNameSheet = Tables.getTableNames();
          var sheet = fileNameSheet.map(function (fileName) {
            return PathUtils.config(fileName);
          });
          sheet.forEach(function (item) {
            return resources.release(item, BufferAsset);
          });
        };

        _proto2.loadSheet = /*#__PURE__*/function () {
          var _loadSheet2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var fileNameSheet, sheet;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  // bin格式生成schama中含有getTableNames方法
                  fileNameSheet = Tables.getTableNames();
                  sheet = fileNameSheet.map(function (fileName) {
                    return PathUtils.config(fileName);
                  });
                  _context2.next = 4;
                  return new Promise(function (resolve, reject) {
                    resources.load(sheet, BufferAsset, function (err, data) {
                      console.log("ConfigLoaderJson---loadSheet--->", err);
                      resolve(data);
                    });
                  });

                case 4:
                case "end":
                  return _context2.stop();
              }
            }, _callee2);
          }));

          function loadSheet() {
            return _loadSheet2.apply(this, arguments);
          }

          return loadSheet;
        }();

        return ConfigLoaderBin;
      }();

      var ConfigUtils = exports('ConfigUtils', /*#__PURE__*/function () {
        function ConfigUtils() {}

        ConfigUtils.init = /*#__PURE__*/function () {
          var _init = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(mode) {
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  if (mode === void 0) {
                    mode = "json";
                  }

                  this._mode = mode;
                  _context3.next = 4;
                  return this.loader.loadSheet();

                case 4:
                  this._tables = new Tables(this.loader.getLoader);
                  this.loader.clear();

                case 6:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));

          function init(_x) {
            return _init.apply(this, arguments);
          }

          return init;
        }();

        ConfigUtils.lang = function lang(key) {
          var item = this.get("TbLang", key);
          return item ? item.zh : key;
        };

        ConfigUtils.get = function get(jsonName, key) {
          var table = this._tables[jsonName];
          return table.get(key);
        } // @ts-ignore 对于导出类型为list的数据没有getDataMap方法
        ;

        ConfigUtils.getMap = function getMap(jsonName) {
          var table = this._tables[jsonName];
          if (table == null) return null;
          return table.getDataMap();
        };

        ConfigUtils.getList = function getList(jsonName) {
          var table = this._tables[jsonName];
          return table.getDataList();
        } //#region 兼容原始战斗配置

        /**
         * @deprecated This method will be removed in next version
         * 兼容原始战斗配置
         */
        ;

        ConfigUtils.queryByID = function queryByID(tableName, ID) {
          // @ts-ignore
          return this.get("Tb" + this.capitalizeFirstLetter(tableName), ID);
        }
        /**
         * @deprecated This method will be removed in next version
         * 兼容原始战斗配置
         */
        ;

        ConfigUtils.getTable = function getTable(tableName) {
          // @ts-ignore
          return this.getMap("Tb" + this.capitalizeFirstLetter(tableName));
        }
        /**
         * @deprecated This method will be removed in next version
         * 兼容原始战斗配置
         */
        ;

        ConfigUtils.getTableArr = function getTableArr(tableName) {
          // @ts-ignore
          return this.getList("Tb" + this.capitalizeFirstLetter(tableName));
        }
        /**
         * @deprecated This method will be removed in next version
         * 兼容原始战斗配置
         */
        ;

        ConfigUtils.capitalizeFirstLetter = function capitalizeFirstLetter(input) {
          if (!input) return input; // 如果字符串为空，直接返回

          return input.charAt(0).toUpperCase() + input.slice(1);
        } //#endregion
        ;

        _createClass(ConfigUtils, null, [{
          key: "loader",
          get: function get() {
            if (!this._loader) {
              this._loader = this._mode == "bin" ? new ConfigLoaderBin() : new ConfigLoaderJson();
            }

            return this._loader;
          }
        }, {
          key: "C",
          get: function get() {
            var table = this._tables["TbConstant"];
            return table.getDataList()[0];
          }
        }]);

        return ConfigUtils;
      }());
      ConfigUtils._mode = void 0;
      ConfigUtils._tables = void 0;
      ConfigUtils._loader = void 0;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/constant.ts", ['cc', './LanguageData.ts'], function (exports) {
  var cclegacy, _language;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      _language = module._language;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d5e460ecqNOIKexeINMglby", "constant", undefined);

      var Constant = exports('Constant', /*#__PURE__*/function () {
        function Constant() {} //获取角色技能表名称


        Constant.playerSkillName = function playerSkillName() {
          //@ts-ignore
          return this.PLAYER_SKILL_CSV_NAME[_language];
        } //角色技能表名称
        ;

        return Constant;
      }());
      Constant.GAME_NAME = 'archero'; //游戏名称

      Constant.GAME_VERSION = '1.0.1'; //游戏版本

      Constant.GAME_FRAME = 60; //游戏当前帧率

      Constant.GAME_INIT_FRAME = 60; //游戏开发基础帧率

      Constant.GAME_NAME_CH = "幽灵射手"; //游戏中文名称
      //本地缓存key值

      Constant.LOCAL_CACHE = {
        PLAYER: 'player',
        //玩家基础数据缓存，如金币砖石等信息，暂时由客户端存储，后续改由服务端管理
        SETTINGS: 'settings',
        //设置相关，所有杂项都丢里面进去
        DATA_VERSION: 'dataVersion',
        //数据版本
        ACCOUNT: 'account',
        //玩家账号
        // TMP_DATA: 'tmpData',             //临时数据，不会存储到云盘
        HISTORY: "history",
        //关卡通关数据
        BAG: "bag" //玩家背包，即道具列表，字典类型

      }; //settings的本地缓存key值

      Constant.SETTINGS_KEY = {
        FIGHT_TIMES: "fightTimes" //过关次数

      }; //玩家动画类型

      Constant.PLAYER_ANI_TYPE = {
        IDLE: "idle",
        //待机
        RUN: "run",
        //向前跑
        ATTACK: "attack",
        //攻击
        DIE: "die",
        //死亡动作，后仰倒地
        REVIVE: "revive" //复活s

      }; //怪兽动画类型

      Constant.MONSTER_ANI_TYPE = {
        IDLE: "idle",
        //待机
        RUN: "run",
        //向前跑
        ATTACK: "attack",
        //攻击
        DIE: "die",
        //死亡动作，后仰倒地
        HIT: "hit",
        //受到打击(无)
        ATTACK_1: "attack1",
        //hellFire独有的攻击1
        ATTACK_2: "attack2" //hellFire独有的攻击2

      }; //玩家行为

      Constant.PLAYER_ACTION = {
        MOVE: 1,
        STOP_MOVE: 2
      }; //怪物行为

      Constant.MONSTER_ACTION = {
        MOVE: 1,
        STOP_MOVE: 2
      }; //碰撞分组

      Constant.PHY_GROUP = {
        DEFAULT: 1 << 0,
        //
        PLAYER: 1 << 1,
        //玩家
        COLLIDER_ITEM: 1 << 2,
        //碰撞器
        MONSTER: 1 << 3,
        //小怪
        REWARD: 1 << 4,
        //奖品
        MONSTER_SKILL_COLLIDER: 1 << 5,
        //怪物技能
        OBSTACLE: 1 << 6 //障碍

      }; //血条类型 

      Constant.BLOOD_BAR = {
        PLAYER: 1,
        MONSTER: 2,
        BOSS: 3
      }; //事件列表

      Constant.EVENT_TYPE = {
        ATTACK_PLAYER: "attackPlayer",
        //攻击玩家
        CHANGE_SKIN: "changeSkin",
        //改变皮肤
        ON_GAME_INIT: "onInitGame",
        //监听游戏初始化
        ON_GAME_OVER: "onGameOver",
        //监听游戏结束
        ON_GAME_PAUSE: "onGamePause",
        //监听游戏暂停
        ON_REVIVE: "onRevive",
        //监听玩家复活
        REFRESH_DIAMOND: "refreshDiamond",
        //更新钻石
        REFRESH_GOLD: "refreshGold",
        //更新金币
        REFRESH_LEVEL: "refreshLevel",
        //刷新关卡
        REFRESH_BOSS_BLOOD: 'refreshBossBlood',
        //刷新boss血量
        RECYCLE_ALL: "recycleAll",
        //回收所有模型、特效
        REMOVE_NODE_GAME_START: "removeNodeGameStart",
        //隐藏“游戏初始化gameStart”界面节点
        HIDE_LOADING_PANEL: "hideLoadingPanel",
        //隐藏加载界面
        HIDE_BOSS_BLOOD_BAR: "hideBossBloodBar",
        //隐藏boss血条
        HIDE_SKILL_ICON_SELECTED: "hideSkillIconSelected",
        //隐藏其他技能图标选择
        HIDE_DEBUG_LEVEL_SELECTED: "hideDebugLevelSelected",
        //调试界面隐藏其他关卡选中状态
        SHOW_LOADING_PANEL: "showLoadingPanel",
        //展示加载界面
        SHOW_BOSS_BLOOD_BAR: "showBossBloodBar",
        //展示boss血条
        SHOW_WARP_GATE: "showWarpGate",
        //展示传送门
        INHALE_REWARD: "inhaleReward",
        //吸入奖品(金币、爱心)
        PARSE_PLAYER_SKILL: "parsePlayerSkill",
        //解析玩家技能
        MONSTER_MOVE: "monsterMove" //怪物开始移动

      }; //战斗血量提示

      Constant.FIGHT_TIP = {
        ADD_BLOOD: 0,
        //加血
        REDUCE_BLOOD: 1,
        //扣血
        CRITICAL_HIT: 2 //暴击

      }; //界面优先级

      Constant.PRIORITY = {
        ZERO: 0,
        //最底层
        BLOOD: 5,
        //血条
        BLOOD_TIP: 6,
        //血量提示
        BLOOD_CRITICAL_TIP: 7,
        //暴击血量提示
        NORMAL: 10,
        //普通界面
        DIALOG: 100,
        //弹窗的Z序
        REWARD: 200,
        //奖励的弹窗
        WAITING: 300,
        //等待界面弹窗
        TIPS: 400 //提示

      }; //血量提示方向

      Constant.BLOOD_TIP_DIRECTION = {
        MID_UP: 0,
        //中间向上
        LEFT_UP: 1,
        //左边向上
        RIGHT_UP: 2 //右边向上

      }; //打开奖励的方式

      Constant.OPEN_REWARD_TYPE = {
        AD: 0,
        SHARE: 1,
        NULL: 2
      }; //playerSkill.csv 名称: ID

      Constant.PLAYER_SKILL = {
        //箭形态变化技能
        ARROW_DOUBLE: "10101",
        //双重射击
        ARROW_CONTINUOUS: "10201",
        //连续射击
        ARROW_UMBRELLA: "10301",
        //伞型射击
        ARROW_REVERSE: "10401",
        //反向射击
        ARROW_SIDE: "10501",
        //侧面射击
        ARROW_PENETRATE: "10601",
        //穿透
        //数值变化技能
        RAISE_ATTACK_01: "20101",
        //攻击1
        RAISE_ATTACK_02: "20102",
        //攻击2
        RAISE_DODGE: "20201",
        //闪避
        RAISE_CRITICAL_HIT_DAMAGE_01: "20301",
        //暴击+爆伤1
        RAISE_CRITICAL_HIT_DAMAGE_02: "20302",
        //暴击+爆伤2
        RAISE_ATTACK_SPEED_01: "20401",
        //攻速提升1
        RAISE_ATTACK_SPEED_02: "20402",
        //攻速提升2
        RAISE_HP_LIMIT: "20501",
        //提升生命上限
        RECOVERY: "20601",
        //回复生命值
        MOVE_SPEED: "20701",
        //移动速度
        //buff变化技能
        ARROW_ICE: "30101",
        //冰冻
        ARROW_FIRE: "30201",
        //灼烧
        //触发技能
        ARROW_LIGHTNING: "40101",
        //闪电
        BLOODTHIRSTY: "40201",
        //嗜血
        ARROW_LAUNCH: "40301" //弹射

      }; //游戏大关类型

      Constant.GAME_LEVEL_TYPE = {
        DARK_CASTLE: 1,
        //幽暗城堡
        HOT_HELL: 2 //炙热地狱

      }; //base.csv表 名称: ID

      Constant.BASE = {
        PLAYER_01: "1001",
        AULA: "2001",
        BOOM_DRAGON: "2002",
        MAGICIAN: "2003",
        HELL_FIRE: "2004",
        BOSS_01: "3001",
        BLOOD_BAG: "4001",
        SHOP_NPC: "5001",
        SKILL_NPC: "6001"
      }; //基础类型

      Constant.BASE_TYPE = {
        PLAYER: "player",
        MONSTER: "monster",
        BOSS: "boss",
        HEART: "heart",
        NPC: "npc",
        OBSTACLE: "obstacle"
      }; //技能图标展示不超过12个

      Constant.MAX_SKILL_ICON_NUM = 12; //玩家技能用途

      Constant.PLAYER_SKILL_USE = {
        FORM_CHANGE: "1",
        //形态
        VALUE: "2",
        //数值
        BUFF: "3",
        //buf
        TRIGGER: "4" //触发

      }; //monsterSkill表ID

      Constant.MONSTER_SKILL = {
        ENERGY_BALL: "101",
        //能量球
        FIRE_BALL: "102",
        //小火球
        JET_FIRES: "103",
        //直线火焰
        DISPERSION: "104",
        //180度散射子弹
        TORNADO: "105",
        //s形龙卷风
        FIRE_BALL_BIG: "106",
        //大火团
        DISPERSION_SURROUND: "107",
        //360度六角散射
        LASER: "108" //直线激光

      }; //怪物移动模式

      Constant.MONSTER_MOVE_PATTERN = {
        RANDOM: 1,
        //随机移动
        FORWARD_PLAYER: 2,
        //朝向玩家
        NO_MOVE: 3 //在原地，不移动

      }; //怪物移动方式

      Constant.MONSTER_MOVE_MODE = {
        WALK: 1,
        //行走
        FLY: 2 //飞行

      }; //音效

      Constant.SOUND = {
        CLICK: "click",
        //按钮点击
        HOME_PANEL_CLICK: "homePanelClick",
        //主界面点击按钮
        AULA_DIE: "aulaDie",
        //死亡-蜘蛛
        BOOM_DRAGON_DIE: "boomDragonDie",
        //死亡-爆炸龙
        DRAGON_DIE: "dragonDie",
        //死亡-巨龙
        HELL_FIRE_DIE: "hellFireDie",
        //死亡-地狱火.
        MAGICIAN_DIE: "magicianDie",
        //死亡-法师
        PLAYER_01_DIE: "player01Die",
        //死亡-主角
        FOOT_STEP: ["footStep1", //脚步声1
        "footStep2" //脚步声2
        ],
        GOLD_DROP: "goldDrop",
        //金币掉落
        HIT_PLAYER: "hitPlayer",
        //主角受击
        HIT_MONSTER: 'hitMonster',
        //怪物受击
        SELL: "sell",
        //购买出售成功
        SHOW_WRAP_GATE: "showWarpGate",
        //展示传送门
        ENERGY_BALL: "energyBall",
        //技能-能量球
        TORNADO: "tornado",
        // 技能-龙卷风
        JET_FIRE: 'jetFire',
        //技能-直线范围火焰
        LASER: "laser",
        //技能-激光
        FIRE_BALL: 'fireBall',
        //小火球
        FIRE_BALL_BIG: "fireBallBig",
        //大火球
        REVIVE: "revive",
        //主角复活
        LOOSE: "loose",
        //主角射箭
        GET_SKILL: "getSkill",
        //主角技能获得
        ICE: "ice",
        //技能-冰冻
        RECOVERY: "recovery",
        //技能-生命恢复
        LIGHTNING: 'lightning',
        //技能-闪电
        FIRE: 'fire',
        //技能-火焰
        GOLD_COLLECT: "goldCollect" //金币收集
        // 技能-丢石头.mp3			

      };
      Constant.LOGIN_TIME = 0; //资源文件下的文件名

      Constant.RESOURCES_FILE_NAME = {
        AUDIO: 'audio',
        //音频
        DATA: 'datas',
        //配置表
        PREFAB: 'prefab',
        //预制体
        TEXTURE: 'texture' //图片资源

      }; //音频文件下分类

      Constant.AUDIO_FILE_NAME = {
        MUSIC: 'music',
        //bgm
        SOUND: 'sound' //音效

      }; //预制体文件下分类

      Constant.PREFAB_FILE_NAME = {
        UI: 'ui',
        //ui
        EFFECT: 'effect',
        //特效
        MODEL: 'model' //模型

      };
      Constant.PLAYER_SKILL_CSV_NAME = {
        'zh': 'playerSkill',
        'en': 'playerSkillEn'
      };
      Constant.I18_LANGUAGE = {
        ENGLISH: 'en',
        CHINESE: 'zh'
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Constant2.ts", ['cc', './EMapAreaStatus.ts', './GameEvent.ts', './CommonEvent.ts', './PlayerEvent.ts', './FightEvent.ts', './ModuleType.ts', './GameConfig.ts'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      exports('EMapAreaStatus', module.EMapAreaStatus);
    }, function (module) {
      exports('GameEvent', module.GameEvent);
    }, function (module) {
      exports('CommonEvent', module.CommonEvent);
    }, function (module) {
      exports('PlayerEvent', module.PlayerEvent);
    }, function (module) {
      exports('FightEvent', module.FightEvent);
    }, function (module) {
      var _setter = {};
      _setter.MediatorName = module.MediatorName;
      _setter.ModuleName = module.ModuleName;
      _setter.ProxyName = module.ProxyName;
      exports(_setter);
    }, function (module) {
      var _setter = {};
      _setter.ConfigPath = module.ConfigPath;
      _setter.EViewKey = module.EViewKey;
      _setter.EViewLayer = module.EViewLayer;
      _setter.GameFSMEvents = module.GameFSMEvents;
      _setter.GameFSMStates = module.GameFSMStates;
      _setter.ViewLayerZOrder = module.ViewLayerZOrder;
      exports(_setter);
    }],
    execute: function () {
      cclegacy._RF.push({}, "49debTmOepJ7ZALpRnQcX/d", "Constant", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Controller.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "781b4nMs4xBpocQrwaCJR+0", "Controller", undefined);

      var Controller = exports('Controller', /*#__PURE__*/function () {
        function Controller(module) {
          this._module = void 0;
          this._commandMap = void 0;
          this._module = module;
          this._commandMap = new Map();
        }

        var _proto = Controller.prototype;

        _proto.registerCommand = function registerCommand(notificationName, commandClassRef) {
          var set = this._commandMap.get(notificationName);

          if (set == null) {
            set = new Set();

            this._module.registerObserver(notificationName, this.executeCommand, this);
          }

          set.add(commandClassRef);

          this._commandMap.set(notificationName, set);
        };

        _proto.removeCommand = function removeCommand(notificationName, commandClassRef) {
          var set = this._commandMap.get(notificationName);

          if (set == null) return;
          set["delete"](commandClassRef);

          if (set.size == 0) {
            this._module.removeObserver(notificationName, this);

            this._commandMap["delete"](notificationName);
          }
        };

        _proto.executeCommand = function executeCommand(n) {
          var _this = this;

          var set = this._commandMap.get(n.getName());

          set && set.forEach(function (commandCls) {
            var command = new commandCls();
            command.setModule(_this._module);
            command.execute(n);
          });
        };

        return Controller;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/debug-view-runtime-control.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Color, Canvas, UITransform, instantiate, Label, RichText, Toggle, Button, director, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Color = module.Color;
      Canvas = module.Canvas;
      UITransform = module.UITransform;
      instantiate = module.instantiate;
      Label = module.Label;
      RichText = module.RichText;
      Toggle = module.Toggle;
      Button = module.Button;
      director = module.director;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "b2bd1+njXxJxaFY3ymm06WU", "debug-view-runtime-control", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DebugViewRuntimeControl = exports('DebugViewRuntimeControl', (_dec = ccclass('internal.DebugViewRuntimeControl'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DebugViewRuntimeControl, _Component);

        function DebugViewRuntimeControl() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "compositeModeToggle", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "singleModeToggle", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "EnableAllCompositeModeButton", _descriptor3, _assertThisInitialized(_this));

          _this._single = 0;
          _this.strSingle = ['No Single Debug', 'Vertex Color', 'Vertex Normal', 'Vertex Tangent', 'World Position', 'Vertex Mirror', 'Face Side', 'UV0', 'UV1', 'UV Lightmap', 'Project Depth', 'Linear Depth', 'Fragment Normal', 'Fragment Tangent', 'Fragment Binormal', 'Base Color', 'Diffuse Color', 'Specular Color', 'Transparency', 'Metallic', 'Roughness', 'Specular Intensity', 'IOR', 'Direct Diffuse', 'Direct Specular', 'Direct All', 'Env Diffuse', 'Env Specular', 'Env All', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Fresnel', 'Direct Transmit Diffuse', 'Direct Transmit Specular', 'Env Transmit Diffuse', 'Env Transmit Specular', 'Transmit All', 'Direct Internal Specular', 'Env Internal Specular', 'Internal All', 'Fog'];
          _this.strComposite = ['Direct Diffuse', 'Direct Specular', 'Env Diffuse', 'Env Specular', 'Emissive', 'Light Map', 'Shadow', 'AO', 'Normal Map', 'Fog', 'Tone Mapping', 'Gamma Correction', 'Fresnel', 'Transmit Diffuse', 'Transmit Specular', 'Internal Specular', 'TT'];
          _this.strMisc = ['CSM Layer Coloration', 'Lighting With Albedo'];
          _this.compositeModeToggleList = [];
          _this.singleModeToggleList = [];
          _this.miscModeToggleList = [];
          _this.textComponentList = [];
          _this.labelComponentList = [];
          _this.textContentList = [];
          _this.hideButtonLabel = void 0;
          _this._currentColorIndex = 0;
          _this.strColor = ['<color=#ffffff>', '<color=#000000>', '<color=#ff0000>', '<color=#00ff00>', '<color=#0000ff>'];
          _this.color = [Color.WHITE, Color.BLACK, Color.RED, Color.GREEN, Color.BLUE];
          return _this;
        }

        var _proto = DebugViewRuntimeControl.prototype;

        _proto.start = function start() {
          // get canvas resolution
          var canvas = this.node.parent.getComponent(Canvas);

          if (!canvas) {
            console.error('debug-view-runtime-control should be child of Canvas');
            return;
          }

          var uiTransform = this.node.parent.getComponent(UITransform);
          var halfScreenWidth = uiTransform.width * 0.5;
          var halfScreenHeight = uiTransform.height * 0.5;
          var x = -halfScreenWidth + halfScreenWidth * 0.1,
              y = halfScreenHeight - halfScreenHeight * 0.1;
          var width = 200,
              height = 20; // new nodes

          var miscNode = this.node.getChildByName('MiscMode');
          var buttonNode = instantiate(miscNode);
          buttonNode.parent = this.node;
          buttonNode.name = 'Buttons';
          var titleNode = instantiate(miscNode);
          titleNode.parent = this.node;
          titleNode.name = 'Titles'; // title

          for (var i = 0; i < 2; i++) {
            var newLabel = instantiate(this.EnableAllCompositeModeButton.getChildByName('Label'));
            newLabel.setPosition(x + (i > 0 ? 50 + width * 2 : 150), y, 0.0);
            newLabel.setScale(0.75, 0.75, 0.75);
            newLabel.parent = titleNode;

            var _labelComponent = newLabel.getComponent(Label);

            _labelComponent.string = i ? '----------Composite Mode----------' : '----------Single Mode----------';
            _labelComponent.color = Color.WHITE;
            _labelComponent.overflow = 0;
            this.labelComponentList[this.labelComponentList.length] = _labelComponent;
          }

          y -= height; // single

          var currentRow = 0;

          for (var _i = 0; _i < this.strSingle.length; _i++, currentRow++) {
            if (_i === this.strSingle.length >> 1) {
              x += width;
              currentRow = 0;
            }

            var newNode = _i ? instantiate(this.singleModeToggle) : this.singleModeToggle;
            newNode.setPosition(x, y - height * currentRow, 0.0);
            newNode.setScale(0.5, 0.5, 0.5);
            newNode.parent = this.singleModeToggle.parent;
            var textComponent = newNode.getComponentInChildren(RichText);
            textComponent.string = this.strSingle[_i];
            this.textComponentList[this.textComponentList.length] = textComponent;
            this.textContentList[this.textContentList.length] = textComponent.string;
            newNode.on(Toggle.EventType.TOGGLE, this.toggleSingleMode, this);
            this.singleModeToggleList[_i] = newNode;
          }

          x += width; // buttons

          this.EnableAllCompositeModeButton.setPosition(x + 15, y, 0.0);
          this.EnableAllCompositeModeButton.setScale(0.5, 0.5, 0.5);
          this.EnableAllCompositeModeButton.on(Button.EventType.CLICK, this.enableAllCompositeMode, this);
          this.EnableAllCompositeModeButton.parent = buttonNode;
          var labelComponent = this.EnableAllCompositeModeButton.getComponentInChildren(Label);
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          var changeColorButton = instantiate(this.EnableAllCompositeModeButton);
          changeColorButton.setPosition(x + 90, y, 0.0);
          changeColorButton.setScale(0.5, 0.5, 0.5);
          changeColorButton.on(Button.EventType.CLICK, this.changeTextColor, this);
          changeColorButton.parent = buttonNode;
          labelComponent = changeColorButton.getComponentInChildren(Label);
          labelComponent.string = 'TextColor';
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          var HideButton = instantiate(this.EnableAllCompositeModeButton);
          HideButton.setPosition(x + 200, y, 0.0);
          HideButton.setScale(0.5, 0.5, 0.5);
          HideButton.on(Button.EventType.CLICK, this.hideUI, this);
          HideButton.parent = this.node.parent;
          labelComponent = HideButton.getComponentInChildren(Label);
          labelComponent.string = 'Hide UI';
          this.labelComponentList[this.labelComponentList.length] = labelComponent;
          this.hideButtonLabel = labelComponent; // misc

          y -= 40;

          for (var _i2 = 0; _i2 < this.strMisc.length; _i2++) {
            var _newNode = instantiate(this.compositeModeToggle);

            _newNode.setPosition(x, y - height * _i2, 0.0);

            _newNode.setScale(0.5, 0.5, 0.5);

            _newNode.parent = miscNode;

            var _textComponent = _newNode.getComponentInChildren(RichText);

            _textComponent.string = this.strMisc[_i2];
            this.textComponentList[this.textComponentList.length] = _textComponent;
            this.textContentList[this.textContentList.length] = _textComponent.string;

            var toggleComponent = _newNode.getComponent(Toggle);

            toggleComponent.isChecked = _i2 ? true : false;

            _newNode.on(Toggle.EventType.TOGGLE, _i2 ? this.toggleLightingWithAlbedo : this.toggleCSMColoration, this);

            this.miscModeToggleList[_i2] = _newNode;
          } // composite


          y -= 150;

          for (var _i3 = 0; _i3 < this.strComposite.length; _i3++) {
            var _newNode2 = _i3 ? instantiate(this.compositeModeToggle) : this.compositeModeToggle;

            _newNode2.setPosition(x, y - height * _i3, 0.0);

            _newNode2.setScale(0.5, 0.5, 0.5);

            _newNode2.parent = this.compositeModeToggle.parent;

            var _textComponent2 = _newNode2.getComponentInChildren(RichText);

            _textComponent2.string = this.strComposite[_i3];
            this.textComponentList[this.textComponentList.length] = _textComponent2;
            this.textContentList[this.textContentList.length] = _textComponent2.string;

            _newNode2.on(Toggle.EventType.TOGGLE, this.toggleCompositeMode, this);

            this.compositeModeToggleList[_i3] = _newNode2;
          }
        };

        _proto.isTextMatched = function isTextMatched(textUI, textDescription) {
          var tempText = new String(textUI);
          var findIndex = tempText.search('>');

          if (findIndex === -1) {
            return textUI === textDescription;
          } else {
            tempText = tempText.substr(findIndex + 1);
            tempText = tempText.substr(0, tempText.search('<'));
            return tempText === textDescription;
          }
        };

        _proto.toggleSingleMode = function toggleSingleMode(toggle) {
          var debugView = director.root.debugView;
          var textComponent = toggle.getComponentInChildren(RichText);

          for (var i = 0; i < this.strSingle.length; i++) {
            if (this.isTextMatched(textComponent.string, this.strSingle[i])) {
              debugView.singleMode = i;
            }
          }
        };

        _proto.toggleCompositeMode = function toggleCompositeMode(toggle) {
          var debugView = director.root.debugView;
          var textComponent = toggle.getComponentInChildren(RichText);

          for (var i = 0; i < this.strComposite.length; i++) {
            if (this.isTextMatched(textComponent.string, this.strComposite[i])) {
              debugView.enableCompositeMode(i, toggle.isChecked);
            }
          }
        };

        _proto.toggleLightingWithAlbedo = function toggleLightingWithAlbedo(toggle) {
          var debugView = director.root.debugView;
          debugView.lightingWithAlbedo = toggle.isChecked;
        };

        _proto.toggleCSMColoration = function toggleCSMColoration(toggle) {
          var debugView = director.root.debugView;
          debugView.csmLayerColoration = toggle.isChecked;
        };

        _proto.enableAllCompositeMode = function enableAllCompositeMode(button) {
          var debugView = director.root.debugView;
          debugView.enableAllCompositeMode(true);

          for (var i = 0; i < this.compositeModeToggleList.length; i++) {
            var _toggleComponent = this.compositeModeToggleList[i].getComponent(Toggle);

            _toggleComponent.isChecked = true;
          }

          var toggleComponent = this.miscModeToggleList[0].getComponent(Toggle);
          toggleComponent.isChecked = false;
          debugView.csmLayerColoration = false;
          toggleComponent = this.miscModeToggleList[1].getComponent(Toggle);
          toggleComponent.isChecked = true;
          debugView.lightingWithAlbedo = true;
        };

        _proto.hideUI = function hideUI(button) {
          var titleNode = this.node.getChildByName('Titles');
          var activeValue = !titleNode.active;
          this.singleModeToggleList[0].parent.active = activeValue;
          this.miscModeToggleList[0].parent.active = activeValue;
          this.compositeModeToggleList[0].parent.active = activeValue;
          this.EnableAllCompositeModeButton.parent.active = activeValue;
          titleNode.active = activeValue;
          this.hideButtonLabel.string = activeValue ? 'Hide UI' : 'Show UI';
        };

        _proto.changeTextColor = function changeTextColor(button) {
          this._currentColorIndex++;

          if (this._currentColorIndex >= this.strColor.length) {
            this._currentColorIndex = 0;
          }

          for (var i = 0; i < this.textComponentList.length; i++) {
            this.textComponentList[i].string = this.strColor[this._currentColorIndex] + this.textContentList[i] + '</color>';
          }

          for (var _i4 = 0; _i4 < this.labelComponentList.length; _i4++) {
            this.labelComponentList[_i4].color = this.color[this._currentColorIndex];
          }
        };

        _proto.onLoad = function onLoad() {};

        _proto.update = function update(deltaTime) {};

        return DebugViewRuntimeControl;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "compositeModeToggle", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "singleModeToggle", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "EnableAllCompositeModeButton", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebugFrameCommand.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './uiManager.ts', './Constant2.ts', './ModuleType.ts', './Command.ts'], function (exports) {
  var _inheritsLoose, cclegacy, game, PhysicsSystem, profiler, UIManager, ModuleName, ProxyName, Command;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      game = module.game;
      PhysicsSystem = module.PhysicsSystem;
      profiler = module.profiler;
    }, null, function (module) {
      UIManager = module.UIManager;
    }, null, function (module) {
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
    }, function (module) {
      Command = module.Command;
    }],
    execute: function () {
      cclegacy._RF.push({}, "61a03gZytNFurtWN9JI6r3U", "DebugFrameCommand", undefined);

      var DebugFrameCommand = exports('DebugFrameCommand', /*#__PURE__*/function (_Command) {
        _inheritsLoose(DebugFrameCommand, _Command);

        function DebugFrameCommand() {
          return _Command.apply(this, arguments) || this;
        }

        var _proto = DebugFrameCommand.prototype;

        _proto.execute = function execute(n) {
          var _gameProxy$debugEnabl;

          var frameRate = n.getBody();
          var gameProxy = this.facade.retrieveProxy(ModuleName.Game, ProxyName.Game);
          UIManager.instance.showTips("\u6E38\u620F\u5DF2\u7ECF\u5207\u6362\u4E3A" + frameRate + "\u5E27");
          gameProxy.frameRate = frameRate;
          game.frameRate = frameRate;
          PhysicsSystem.instance.fixedTimeStep = 1 / frameRate;
          var isDebugOpen = (_gameProxy$debugEnabl = gameProxy.debugEnabled) != null ? _gameProxy$debugEnabl : false;
          isDebugOpen ? profiler.showStats() : profiler.hideStats();
        };

        return DebugFrameCommand;
      }(Command));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebugLevelItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts', './PlayerProxy.ts', './clientEvent.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, LabelComponent, SpriteComponent, Color, Component, Constant, PlayerProxy, ClientEvent;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      LabelComponent = module.LabelComponent;
      SpriteComponent = module.SpriteComponent;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      PlayerProxy = module.PlayerProxy;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "bb6fca5sA5NPYFbkIeRk2kE", "DebugLevelItem", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DebugLevelItem = exports('DebugLevelItem', (_dec = ccclass("DebugLevelItem"), _dec2 = menu("_game/module/fight/debug/DebugLevelItem"), _dec3 = property(LabelComponent), _dec4 = property(SpriteComponent), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DebugLevelItem, _Component);

        function DebugLevelItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbLevelTxt", _descriptor, _assertThisInitialized(_this)); //等级文本组件


          _initializerDefineProperty(_this, "spCom", _descriptor2, _assertThisInitialized(_this)); //图标组件


          _this.COLOR_SELECTED = new Color().fromHEX("#3CE649"); //选中

          _this.COLOR_UNSELECTED = new Color().fromHEX("#ffffff"); //未选中

          _this._isSelected = false; //是否选中

          _this._itemInfo = null; //自节点数据

          _this._callback = void 0;
          return _this;
        }

        var _proto = DebugLevelItem.prototype;
        /**
         *  初始化
         *
         * @param {*} itemInfo
         * @memberof DebugLevelItem
         */

        _proto.init = function init(itemInfo, isSelected, callback) {
          this._itemInfo = itemInfo;
          this._callback = callback;
          var level = itemInfo.id;
          var lv = PlayerProxy.idTolevel(level);
          var chapter = PlayerProxy.idToChapter(lv);
          this.lbLevelTxt.string = chapter + "+" + lv;
          this.setSelected(isSelected);
        }
        /**
         * 切换选中与非选中状态
         *
         * @private
         * @memberof DebugSkillItem
         */
        ;

        _proto.setSelected = function setSelected(status) {
          this._isSelected = status;
          this.spCom.color = status ? this.COLOR_SELECTED : this.COLOR_UNSELECTED;
        }
        /**
         * 点击按钮
         */
        ;

        _proto.onBtnClick = function onBtnClick() {
          ClientEvent.dispatchEvent(Constant.EVENT_TYPE.HIDE_DEBUG_LEVEL_SELECTED);
          this.setSelected(true);
          this._callback && this._callback(this._itemInfo);
        };

        return DebugLevelItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbLevelTxt", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spCom", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebugPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './poolManager.ts', './DebugLevelItem.ts', './DebugSkillItem.ts', './LanguageData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Prefab, Button, Component, PoolManager, DebugLevelItem, DebugSkillItem, _updateSceneRenderers;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Prefab = module.Prefab;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, function (module) {
      DebugLevelItem = module.DebugLevelItem;
    }, function (module) {
      DebugSkillItem = module.DebugSkillItem;
    }, function (module) {
      _updateSceneRenderers = module.updateSceneRenderers;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10;

      cclegacy._RF.push({}, "7ef9doHKShFraChO8Bo9P18", "DebugPanel", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DebugPanel = exports('DebugPanel', (_dec = ccclass("DebugPanel"), _dec2 = menu("_game/module/fight/debug/DebugPanel"), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(Prefab), _dec6 = property(Prefab), _dec7 = property(Button), _dec8 = property(Button), _dec9 = property(Button), _dec10 = property(Button), _dec11 = property(Button), _dec12 = property(Button), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DebugPanel, _Component);

        function DebugPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ndContentLevel", _descriptor, _assertThisInitialized(_this)); //等级父节点


          _initializerDefineProperty(_this, "ndContentPlayerSkill", _descriptor2, _assertThisInitialized(_this)); //技能父节点


          _initializerDefineProperty(_this, "pbLevelItem", _descriptor3, _assertThisInitialized(_this)); //等级预制体


          _initializerDefineProperty(_this, "pbSkillItem", _descriptor4, _assertThisInitialized(_this)); //技能预制体


          _initializerDefineProperty(_this, "btnClose", _descriptor5, _assertThisInitialized(_this)); //关闭按钮


          _initializerDefineProperty(_this, "btnClearStorage", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnFrame30", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnFrame60", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnClearPlayerSkill", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSelectAllPlayerSkill", _descriptor10, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = DebugPanel.prototype;
        /**
         * 展示界面
         */

        _proto.show = function show(checkpoints, level, skills, ownSkillIds, levelCallback, skillCallback) {
          _updateSceneRenderers();

          this.updateLevelView(checkpoints, level, levelCallback);
          this.updateSkillView(skills, ownSkillIds, skillCallback);
        }
        /**
         * 初始化关卡列表
         *
         * @private
         * @memberof DebugPanel
         */
        ;

        _proto.updateLevelView = function updateLevelView(checkpoints, level, callback) {
          var _this2 = this;

          this.ndContentLevel.children.forEach(function (item) {
            item.active = false;
          });
          checkpoints.forEach(function (itemInfo, idx) {
            var ndChild = null;

            if (idx < _this2.ndContentLevel.children.length) {
              ndChild = _this2.ndContentLevel.children[idx];
            } else {
              ndChild = PoolManager.instance.getNode(_this2.pbLevelItem, _this2.ndContentLevel);
            }

            ndChild.active = true;
            var scriptDebugLevelItem = ndChild.getComponent(DebugLevelItem);
            scriptDebugLevelItem.init(itemInfo, level == itemInfo.id, callback);
          });
        }
        /**
         * 初始化玩家技能列表
         *
         * @private
         * @memberof DebugPanel
         */
        ;

        _proto.updateSkillView = function updateSkillView(skills, ownSkillIds, callback) {
          var _this3 = this;

          this.ndContentPlayerSkill.children.forEach(function (item) {
            item.active = false;
          });
          skills.forEach(function (itemInfo, idx) {
            var ndChild = null;

            if (idx < _this3.ndContentPlayerSkill.children.length) {
              ndChild = _this3.ndContentPlayerSkill.children[idx];
            } else {
              ndChild = PoolManager.instance.getNode(_this3.pbSkillItem, _this3.ndContentPlayerSkill);
            }

            ndChild.active = true;
            var scriptDebugLevelItem = ndChild.getComponent(DebugSkillItem);
            var isSelected = ownSkillIds.includes(itemInfo.id);
            scriptDebugLevelItem.init(itemInfo, isSelected, callback);
          });
        };

        return DebugPanel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ndContentLevel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ndContentPlayerSkill", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "pbLevelItem", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "pbSkillItem", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnClose", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnClearStorage", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "btnFrame30", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "btnFrame60", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "btnClearPlayerSkill", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "btnSelectAllPlayerSkill", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/DebugSkillItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './audioManager.ts', './constant.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, LabelComponent, SpriteComponent, Color, Component, AudioManager, Constant;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      LabelComponent = module.LabelComponent;
      SpriteComponent = module.SpriteComponent;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Constant = module.Constant;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "7202fFoE39Iu4Zt/9izhdg5", "DebugSkillItem", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DebugSkillItem = exports('DebugSkillItem', (_dec = ccclass("DebugSkillItem"), _dec2 = menu("_game/module/fight/debug/DebugSkillItem"), _dec3 = property(LabelComponent), _dec4 = property(SpriteComponent), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DebugSkillItem, _Component);

        function DebugSkillItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbLevelTxt", _descriptor, _assertThisInitialized(_this)); //等级文本组件


          _initializerDefineProperty(_this, "spCom", _descriptor2, _assertThisInitialized(_this)); //图标组件


          _this.COLOR_SELECTED = new Color().fromHEX("#3CE649"); //选中

          _this.COLOR_UNSELECTED = new Color().fromHEX("#ffffff"); //未选中

          _this._isSelected = false; //是否选中

          _this._itemInfo = null; //子节点数据

          _this._callback = void 0;
          return _this;
        }

        var _proto = DebugSkillItem.prototype;

        _proto.init = function init(itemInfo, isSelected, callback) {
          this._itemInfo = itemInfo;
          this._callback = callback;
          this.lbLevelTxt.string = itemInfo.name;
          this.setSelected(isSelected);
        }
        /**
         * 切换选中与非选中状态
         *
         * @private
         * @memberof DebugSkillItem
         */
        ;

        _proto.setSelected = function setSelected(status) {
          this._isSelected = status;
          this.spCom.color = status ? this.COLOR_SELECTED : this.COLOR_UNSELECTED;
        };

        _proto.onBtnClick = function onBtnClick() {
          AudioManager.instance.playSound(Constant.SOUND.GET_SKILL);
          this._callback && this._callback(this._itemInfo, this._isSelected);
          this.setSelected(!this._isSelected);
        };

        return DebugSkillItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbLevelTxt", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spCom", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/dispersion.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './audioManager.ts', './constant.ts', './effectManager.ts', './poolManager.ts', './util.ts', './gameManager.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Node, Vec3, Component, AudioManager, Constant, EffectManager, PoolManager, Util, GameManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, function (module) {
      Util = module.Util;
    }, function (module) {
      GameManager = module.GameManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bac69sUZyxD3pVsY06Z2vf1", "dispersion", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //180度散射球脚本: 挂载每个球上, 不是挂在父节点上

      var Dispersion = exports('Dispersion', (_dec = ccclass('Dispersion'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Dispersion, _Component);

        function Dispersion() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._baseInfo = null; //敌人基本信息

          _this._skillInfo = null; //技能信息

          _this._curSpeed = 0; //当前速度

          _this._targetSpeed = 0; //目标速度

          _this._oriPos = null; //初始默认位置

          _this._oriEulerAngles = null; //初始默认角度

          _this._offsetPos = new Vec3(); //和玩家之间的向量差

          _this._curWorPos = new Vec3(); //当前节点世界坐标

          _this._disappearRange = 20; //箭节点超过玩家这个范围则隐藏

          _this._targetWorPos = new Vec3();
          return _this;
        }

        var _proto = Dispersion.prototype; //箭的下次目标位置

        /**
        * 初始化 
        */

        _proto.init = function init(skillInfo, baseInfo) {
          this.skillInfo = skillInfo;
          this.baseInfo = baseInfo;
          this.node.active = true;

          if (!this._oriPos) {
            this._oriPos = this.node.position.clone();
          }

          if (!this._oriEulerAngles) {
            this._oriEulerAngles = this.node.eulerAngles.clone();
          }

          this.node.setPosition(this._oriPos);
          this.node.eulerAngles.set(this._oriEulerAngles);
          this._targetSpeed = skillInfo.flySpeed;
          this._curSpeed = skillInfo.flySpeed * 0.5;
          var options = {
            ndEffect: this.node
          };
          EffectManager.instance.playParticle(options);
          AudioManager.instance.playSound(Constant.SOUND.ENERGY_BALL);
        }
        /**
         * 击中玩家后隐藏
         *
         * @memberof Arrow
         */
        ;

        _proto.hide = function hide() {
          var _this$node$parent;

          if (!this.node.parent) {
            return;
          }

          this.node.active = false; //如果dispersionSurround组里所有的球都隐藏了则回收整个dispersion预制体

          var isAllHide = (_this$node$parent = this.node.parent) == null ? void 0 : _this$node$parent.children.every(function (ndChild) {
            return ndChild.active === false;
          });

          if (isAllHide && this.node.parent) {
            PoolManager.instance.putNode(this.node.parent);
          }
        };

        _proto.update = function update(deltaTime) {
          if (!this.node.parent || !GameManager.ndPlayer || GameManager.isGameOver || GameManager.isGamePause) {
            return;
          } //朝forward方向飞行


          this._curSpeed = Util.lerp(this._targetSpeed, this._curSpeed, 0.25);

          this._targetWorPos.set(0, 0, -deltaTime * this._curSpeed);

          this.node.translate(this._targetWorPos, Node.NodeSpace.LOCAL); //超过玩家一定范围则隐藏

          this._curWorPos.set(this.node.worldPosition);

          Vec3.subtract(this._offsetPos, this._curWorPos, GameManager.ndPlayer.worldPosition);

          if (this._offsetPos && this._offsetPos.length() >= this._disappearRange) {
            this.hide();
          }
        };

        _createClass(Dispersion, [{
          key: "baseInfo",
          get: function get() {
            return this._baseInfo;
          },
          set: function set(v) {
            this._baseInfo = v;
          }
        }, {
          key: "skillInfo",
          get: function get() {
            return this._skillInfo;
          },
          set: function set(v) {
            this._skillInfo = v;
          }
        }]);

        return Dispersion;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/dispersionSurround.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './effectManager.ts', './gameManager.ts', './audioManager.ts', './constant.ts', './poolManager.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Node, Vec3, Component, Util, EffectManager, GameManager, AudioManager, Constant, PoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      Util = module.Util;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      PoolManager = module.PoolManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "1fdcfxvDc9CIZfp1zEdq2Yu", "dispersionSurround", undefined); //360度散射脚本: 挂载每个球上,而非父节点上


      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var DispersionSurround = exports('DispersionSurround', (_dec = ccclass('DispersionSurround'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(DispersionSurround, _Component);

        function DispersionSurround() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._baseInfo = null; //敌人基本信息

          _this._skillInfo = null; //技能信息

          _this._curSpeed = 0; //当前速度

          _this._targetSpeed = 0; //目标速度

          _this._oriPos = null; //初始默认位置

          _this._oriEulerAngles = null; //初始默认角度

          _this._offsetPos = new Vec3(); //和玩家之间的向量差

          _this._curWorPos = new Vec3(); //当前节点世界坐标

          _this._disappearRange = 20; //箭节点超过玩家这个范围则隐藏

          _this._targetWorPos = new Vec3(); //箭的下次目标位置

          _this._oriScale = new Vec3();
          return _this;
        }

        var _proto = DispersionSurround.prototype; //初始缩放大小

        /**
        * 初始化 
        */

        _proto.init = function init(skillInfo, baseInfo) {
          this.skillInfo = skillInfo;
          this.baseInfo = baseInfo;
          this.node.active = true;

          if (!this._oriPos) {
            this._oriPos = this.node.position.clone();
          }

          if (!this._oriEulerAngles) {
            this._oriEulerAngles = this.node.eulerAngles.clone();
          }

          this.node.setPosition(this._oriPos);
          this.node.eulerAngles.set(this._oriEulerAngles);
          this._targetSpeed = skillInfo.flySpeed;
          this._curSpeed = skillInfo.flySpeed * 0.5;
          var options = {
            ndEffect: this.node
          };
          EffectManager.instance.playParticle(options);
          AudioManager.instance.playSound(Constant.SOUND.ENERGY_BALL);
        }
        /**
         * 击中玩家后隐藏
         *
         * @memberof Arrow
         */
        ;

        _proto.hide = function hide() {
          var _this$node$parent;

          if (!this.node.parent) {
            return;
          }

          this.node.active = false; //如果dispersionSurround组里所有的球都隐藏了则回收整个dispersion预制体

          var isAllHide = (_this$node$parent = this.node.parent) == null ? void 0 : _this$node$parent.children.every(function (ndChild) {
            return ndChild.active === false;
          });

          if (isAllHide && this.node.parent) {
            PoolManager.instance.putNode(this.node.parent);
          }
        };

        _proto.update = function update(deltaTime) {
          if (!this.node.parent || !GameManager.ndPlayer || GameManager.isGameOver || GameManager.isGamePause) {
            return;
          } //朝forward方向飞行


          this._curSpeed = Util.lerp(this._targetSpeed, this._curSpeed, 0.25);

          this._targetWorPos.set(0, 0, -deltaTime * this._curSpeed);

          this.node.translate(this._targetWorPos, Node.NodeSpace.LOCAL); //超过玩家一定范围则隐藏

          this._curWorPos.set(this.node.worldPosition);

          Vec3.subtract(this._offsetPos, this._curWorPos, GameManager.ndPlayer.worldPosition);

          if (this._offsetPos && this._offsetPos.length() >= this._disappearRange) {
            this.hide();
          }
        };

        _createClass(DispersionSurround, [{
          key: "baseInfo",
          get: function get() {
            return this._baseInfo;
          },
          set: function set(v) {
            this._baseInfo = v;
          }
        }, {
          key: "skillInfo",
          get: function get() {
            return this._skillInfo;
          },
          set: function set(v) {
            this._skillInfo = v;
          }
        }]);

        return DispersionSurround;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/effectManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './poolManager.ts', './resourceUtil.ts', './warningCircle.ts', './warningStrip.ts', './warningLine.ts'], function (exports) {
  var _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, isValid, ParticleSystemComponent, AnimationComponent, AnimationClip, find, Node, director, Vec3, PoolManager, ResourceUtil, WarningCircle, WarningStrip, WarningLine;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      isValid = module.isValid;
      ParticleSystemComponent = module.ParticleSystemComponent;
      AnimationComponent = module.AnimationComponent;
      AnimationClip = module.AnimationClip;
      find = module.find;
      Node = module.Node;
      director = module.director;
      Vec3 = module.Vec3;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, function (module) {
      WarningCircle = module.WarningCircle;
    }, function (module) {
      WarningStrip = module.WarningStrip;
    }, function (module) {
      WarningLine = module.WarningLine;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "554baRvdXVCaZZeXFSvvApe", "effectManager", undefined); //加载特效所需参数
      //播放特效所需参数
      //播放动画所需参数
      //播放特效所需参数


      var ccclass = _decorator.ccclass,
          property = _decorator.property; //特效管理脚本

      var EffectManager = exports('EffectManager', (_dec = ccclass('EffectManager'), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function EffectManager() {
          this._ndParent = null;
        }

        var _proto = EffectManager.prototype;
        /**
         * 重置特效节点状态
         * @param ndEffect 特效节点
         * @param aniName 动画名字
         * @returns 
         */

        _proto.resetEffectState = function resetEffectState(ndEffect, aniName) {
          if (!isValid(ndEffect)) {
            return;
          }

          var arrParticle = ndEffect.getComponentsInChildren(ParticleSystemComponent);

          if (arrParticle.length) {
            arrParticle.forEach(function (element) {
              element == null ? void 0 : element.stop();
              element == null ? void 0 : element.clear();
            });
          }

          var arrAni = ndEffect.getComponentsInChildren(AnimationComponent);

          if (arrAni.length) {
            arrAni.forEach(function (element, idx) {
              if (element.defaultClip && element.defaultClip.name) {
                var aniState = null;

                if (aniName) {
                  aniState = element.getState(aniName);
                }

                if (!aniState) {
                  aniState = element.getState(element.defaultClip.name);
                }

                if (aniState) {
                  aniState.stop();
                  aniState.time = 0;
                  aniState.sample();
                }
              }
            });
          }
        }
        /**
             * 加载特效节点并播放节点下面的动画、粒子
             *
             * @param {loadAndPlayEffectOptions} options
             * @return {*} 
             * @memberof EffectManager
             */
        ;

        _proto.loadAndPlayEffect = /*#__PURE__*/function () {
          var _loadAndPlayEffect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {
            var _options$effectPath, effectPath, _options$ndTarget, ndTarget, _options$isLocal, isLocal, _options$pos, pos, _options$eulerAngles, eulerAngles, _options$isPlayAnimat, isPlayAnimation, _options$isPlayPartic, isPlayParticle, _options$scale, scale, _options$speed, speed, _options$isRecycle, isRecycle, _options$recycleTime, recycleTime, pf, ndParent, ndEffect, obj;

            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  //给options赋默认值
                  _options$effectPath = options.effectPath, effectPath = _options$effectPath === void 0 ? "" : _options$effectPath, _options$ndTarget = options.ndTarget, ndTarget = _options$ndTarget === void 0 ? null : _options$ndTarget, _options$isLocal = options.isLocal, isLocal = _options$isLocal === void 0 ? true : _options$isLocal, _options$pos = options.pos, pos = _options$pos === void 0 ? null : _options$pos, _options$eulerAngles = options.eulerAngles, eulerAngles = _options$eulerAngles === void 0 ? null : _options$eulerAngles, _options$isPlayAnimat = options.isPlayAnimation, isPlayAnimation = _options$isPlayAnimat === void 0 ? true : _options$isPlayAnimat, _options$isPlayPartic = options.isPlayParticle, isPlayParticle = _options$isPlayPartic === void 0 ? true : _options$isPlayPartic, _options$scale = options.scale, scale = _options$scale === void 0 ? 1 : _options$scale, _options$speed = options.speed, speed = _options$speed === void 0 ? 1 : _options$speed, _options$isRecycle = options.isRecycle, isRecycle = _options$isRecycle === void 0 ? false : _options$isRecycle, _options$recycleTime = options.recycleTime, recycleTime = _options$recycleTime === void 0 ? 0 : _options$recycleTime; //如果是本地坐标，父节点被回收的时候不播放

                  if (!(isLocal && (!ndTarget || !ndTarget.parent))) {
                    _context.next = 3;
                    break;
                  }

                  return _context.abrupt("return");

                case 3:
                  _context.next = 5;
                  return ResourceUtil.loadEffectRes(effectPath);

                case 5:
                  pf = _context.sent;
                  ndParent = isLocal ? ndTarget : this.ndParent;
                  ndEffect = PoolManager.instance.getNode(pf, ndParent);

                  if (isLocal) {
                    ndEffect.setScale(scale, scale, scale);

                    if (pos && pos instanceof Vec3) {
                      ndEffect.setPosition(pos);
                    }

                    if (eulerAngles && eulerAngles instanceof Vec3) {
                      ndEffect.setRotationFromEuler(eulerAngles.x, eulerAngles.y, eulerAngles.z);
                    }
                  } else {
                    ndEffect.setWorldScale(scale, scale, scale);

                    if (pos && pos instanceof Vec3) {
                      ndEffect.setWorldPosition(pos);
                    }

                    if (eulerAngles && eulerAngles instanceof Vec3) {
                      ndEffect.setWorldRotationFromEuler(eulerAngles.x, eulerAngles.y, eulerAngles.z);
                    }
                  }

                  obj = {
                    ndEffect: ndEffect,
                    isPlayAnimation: isPlayAnimation,
                    isPlayParticle: isPlayParticle,
                    speed: speed,
                    isRecycle: isRecycle,
                    recycleTime: recycleTime
                  };
                  this.playEffect(obj);

                case 11:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function loadAndPlayEffect(_x) {
            return _loadAndPlayEffect.apply(this, arguments);
          }

          return loadAndPlayEffect;
        }()
        /**
         * 播放节点下面的动画、粒子
         *
         * @param {playEffectOptions} options
         * @memberof EffectManager
         */
        ;

        _proto.playEffect = function playEffect(options) {
          var _this = this;

          return new Promise(function (resolve, reject) {
            //给options赋默认值
            var ndEffect = options.ndEffect,
                _options$isPlayAnimat2 = options.isPlayAnimation,
                isPlayAnimation = _options$isPlayAnimat2 === void 0 ? true : _options$isPlayAnimat2,
                _options$isPlayPartic2 = options.isPlayParticle,
                isPlayParticle = _options$isPlayPartic2 === void 0 ? true : _options$isPlayPartic2,
                _options$speed2 = options.speed,
                speed = _options$speed2 === void 0 ? 1 : _options$speed2,
                _options$isRecycle2 = options.isRecycle,
                isRecycle = _options$isRecycle2 === void 0 ? false : _options$isRecycle2,
                _options$recycleTime2 = options.recycleTime,
                recycleTime = _options$recycleTime2 === void 0 ? 0 : _options$recycleTime2;
            var arrPromise = [];

            if (isPlayAnimation) {
              var obj = {
                ndEffect: ndEffect,
                animationName: "",
                speed: speed
              };

              var p1 = _this.playAnimation(obj);

              arrPromise.push(p1);
            }

            if (isPlayParticle) {
              var _obj = {
                ndEffect: ndEffect,
                speed: speed
              };

              var p2 = _this.playParticle(_obj);

              arrPromise.push(p2);
            }

            var cb = function cb() {
              if (ndEffect && ndEffect.parent) {
                if (isRecycle) {
                  PoolManager.instance.putNode(ndEffect); // console.log(`###回收特效节点: ${ndEffect.name}`);
                }

                resolve == null ? void 0 : resolve(null);
              }
            };

            if (isRecycle && recycleTime) {
              setTimeout(cb, recycleTime * 1000);
            } else {
              Promise.all(arrPromise).then(function () {
                // console.log(`###特效播放结束: ${ndEffect.name}`);
                cb();
              });
            }
          });
        }
        /**
         * 播放节点上的动画特效
         *
         * @param {playAnimationOptions} options
         * @return {*} 
         * @memberof EffectManager
         */
        ;

        _proto.playAnimation = function playAnimation(options) {
          return new Promise(function (resolve, reject) {
            //给options赋默认值
            var ndEffect = options.ndEffect,
                _options$speed3 = options.speed,
                speed = _options$speed3 === void 0 ? 1 : _options$speed3,
                _options$animationNam = options.animationName,
                animationName = _options$animationNam === void 0 ? "" : _options$animationNam,
                _options$wrapMode = options.wrapMode,
                wrapMode = _options$wrapMode === void 0 ? AnimationClip.WrapMode.Default : _options$wrapMode,
                _options$isRecycle3 = options.isRecycle,
                isRecycle = _options$isRecycle3 === void 0 ? false : _options$isRecycle3,
                _options$recycleTime3 = options.recycleTime,
                recycleTime = _options$recycleTime3 === void 0 ? 0 : _options$recycleTime3;

            if (!ndEffect.active) {
              ndEffect.active = true;
            }

            var arrAni = ndEffect.getComponentsInChildren(AnimationComponent);
            var noLoopAniPlayCount = 0; //非循环的动画未播放完成的数量 
            //arrAni去掉动画组件没有激活和动画组件所在节点在场景中没有激活的节点

            arrAni = arrAni.filter(function (aniCom) {
              return aniCom.node.activeInHierarchy && aniCom.enabled;
            });

            if (arrAni.length) {
              arrAni.forEach(function (aniCom, idx) {
                var _aniCom$defaultClip;

                var aniName = animationName ? animationName : aniCom == null ? void 0 : (_aniCom$defaultClip = aniCom.defaultClip) == null ? void 0 : _aniCom$defaultClip.name;

                if (aniName) {
                  var aniState;
                  aniState = aniCom.getState(aniName);

                  if (aniState) {
                    aniState.time = 0;
                    aniState.speed = speed;
                    aniState.sample();

                    if (wrapMode) {
                      aniState.wrapMode = wrapMode;
                    } //区分不同的动画模式


                    switch (aniState.wrapMode) {
                      case AnimationClip.WrapMode.Normal:
                      case AnimationClip.WrapMode.Reverse:
                        noLoopAniPlayCount += 1;
                        aniCom.once(AnimationComponent.EventType.FINISHED, function () {
                          noLoopAniPlayCount -= 1;

                          if (noLoopAniPlayCount === 0 && (!isRecycle || !recycleTime)) {
                            // console.log("###动画循环模式为normal、reverse的动画都播放完成了");
                            cb();
                          }
                        });
                        break;

                      case AnimationClip.WrapMode.Loop:
                      case AnimationClip.WrapMode.PingPong:
                      case AnimationClip.WrapMode.PingPongReverse:
                      case AnimationClip.WrapMode.Default:
                        break;
                    }

                    aniCom == null ? void 0 : aniCom.play(aniName);
                  }
                }
              });

              var cb = function cb() {
                if (ndEffect && ndEffect.parent) {
                  if (isRecycle) {
                    PoolManager.instance.putNode(ndEffect); // console.log(`###回收动画特效节点: ${ndEffect.name}`);
                  } // console.log(`###节点上的动画播放完成: ${ndEffect.name}`);


                  resolve == null ? void 0 : resolve(null);
                }
              };

              if (isRecycle && recycleTime) {
                setTimeout(cb, recycleTime * 1000);
              } else if (!noLoopAniPlayCount) {
                cb(); // console.warn(`###没有播放循环为normal、reverse的动画，直接返回播放完成状态(resolve), 如需回收请传入recycleTime`);
              }
            } else {
              console.warn("###" + ndEffect.name + "\u8282\u70B9\u4E0B\u6CA1\u6709\u53EF\u4EE5\u64AD\u653E\u7684\u52A8\u753B\u7EC4\u4EF6\uFF0C\u76F4\u63A5\u8FD4\u56DE\u64AD\u653E\u5B8C\u6210\u72B6\u6001");
              resolve == null ? void 0 : resolve(null);
            }
          });
        }
        /**
         * 播放节点上的粒子特效
         *
         * @param {playParticleOptions} options
         * @return {*} 
         * @memberof EffectManager
         */
        ;

        _proto.playParticle = function playParticle(options) {
          return new Promise(function (resolve, reject) {
            //给options赋默认值
            var ndEffect = options.ndEffect,
                _options$speed4 = options.speed,
                speed = _options$speed4 === void 0 ? 1 : _options$speed4,
                _options$isRecycle4 = options.isRecycle,
                isRecycle = _options$isRecycle4 === void 0 ? false : _options$isRecycle4,
                _options$recycleTime4 = options.recycleTime,
                recycleTime = _options$recycleTime4 === void 0 ? 0 : _options$recycleTime4; //粒子播放最长时间

            var maxDuration = 0;

            if (!ndEffect.active) {
              ndEffect.active = true;
            }

            var arrParticle = ndEffect.getComponentsInChildren(ParticleSystemComponent); //arrParticle去掉粒子组件在没有激活和粒子组件所在节点在场景中没有激活的节点

            arrParticle = arrParticle.filter(function (particleCom) {
              return particleCom.node.activeInHierarchy && particleCom.enabled;
            });

            if (arrParticle.length) {
              arrParticle.forEach(function (element) {
                element.simulationSpeed = speed;
                element == null ? void 0 : element.clear();
                element == null ? void 0 : element.stop();
                element == null ? void 0 : element.play();
                var duration = element.duration;
                maxDuration = duration > maxDuration ? duration : maxDuration;
              }); //优先使用传进来的时间，如果没有，则使用粒子最长时间（后续如果能监听粒子播放结束状态，则再优化写法）

              maxDuration = recycleTime && recycleTime > 0 ? recycleTime : maxDuration;
              setTimeout(function () {
                if (ndEffect && ndEffect.parent) {
                  if (isRecycle) {
                    // console.log(`###回收粒子特效节点: ${ndEffect.name}`);
                    PoolManager.instance.putNode(ndEffect);
                  } // console.log(`###节点上的粒子播放完成: ${ndEffect.name}`);


                  resolve == null ? void 0 : resolve(null);
                }
              }, maxDuration * 1000);
            } else {
              console.warn("###" + ndEffect.name + "\u8282\u70B9\u4E0B\u6CA1\u6709\u53EF\u4EE5\u64AD\u653E\u7684\u7C92\u5B50\u7EC4\u4EF6\uFF0C\u76F4\u63A5\u8FD4\u56DE\u64AD\u653E\u5B8C\u6210\u72B6\u6001");
              resolve == null ? void 0 : resolve(null);
            }
          });
        }
        /**
         * 展示预警
         *
         * @param {string} warningName
         * @param {number} scale
         * @param {*} scriptParent
         * @memberof EffectManager
         */
        ;

        _proto.showWarning = /*#__PURE__*/function () {
          var _showWarning = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(warningName, scale, scriptParent) {
            var pf, ndWarning, scriptWarning;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return ResourceUtil.loadEffectRes("warning/" + warningName);

                case 2:
                  pf = _context2.sent;
                  ndWarning = PoolManager.instance.getNode(pf, this.ndParent);
                  scriptWarning = null;

                  if (warningName === "warningLine") {
                    scriptWarning = ndWarning.getComponent(WarningLine);
                  } else if (warningName === "warningStrip") {
                    scriptWarning = ndWarning.getComponent(WarningStrip);
                  } else if (warningName === "warningCircle") {
                    scriptWarning = ndWarning.getComponent(WarningCircle);
                  }

                  scriptWarning.init(scale, scriptParent);
                  scriptParent.scriptWarning = scriptWarning;

                case 8:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function showWarning(_x2, _x3, _x4) {
            return _showWarning.apply(this, arguments);
          }

          return showWarning;
        }()
        /**
         * 展示闪电特效连接
         *
         * @param {Node} ndParent
         * @param {Node} ndTarget
         * @memberof EffectManager
         */
        ;

        _proto.showLightningChain = /*#__PURE__*/function () {
          var _showLightningChain = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(ndParent, ndTarget) {
            var pf, ndEffect, offsetPos;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return ResourceUtil.loadEffectRes("lightningChain/lightningChain");

                case 2:
                  pf = _context3.sent;
                  ndEffect = PoolManager.instance.getNode(pf, ndParent);
                  ndEffect.setWorldPosition(ndParent.worldPosition.x, 2.3, ndParent.worldPosition.z);
                  offsetPos = new Vec3();
                  Vec3.subtract(offsetPos, ndTarget.worldPosition, ndParent.worldPosition);
                  ndEffect.setWorldScale(1, offsetPos.length(), 1);
                  ndEffect.forward = offsetPos.normalize().negative();
                  setTimeout(function () {
                    PoolManager.instance.putNode(ndEffect);
                  }, 100);

                case 10:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          }));

          function showLightningChain(_x5, _x6) {
            return _showLightningChain.apply(this, arguments);
          }

          return showLightningChain;
        }();

        _createClass(EffectManager, [{
          key: "ndParent",
          get: function get() {
            if (!this._ndParent) {
              var ndEffectParent = find("effectManager");

              if (ndEffectParent) {
                this._ndParent = ndEffectParent;
              } else {
                var _director$getScene; // console.warn("请在场景里添加effectManager节点");


                this._ndParent = new Node("effectManager");
                (_director$getScene = director.getScene()) == null ? void 0 : _director$getScene.addChild(this._ndParent);
              }
            }

            return this._ndParent;
          }
        }], [{
          key: "instance",
          get: function get() {
            if (this._instance) {
              return this._instance;
            }

            this._instance = new EffectManager();
            return this._instance;
          }
        }]);

        return EffectManager;
      }(), _class2._instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/EMapAreaStatus.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e88b6Z+XspJLqRXHdGMcNJQ", "EMapAreaStatus", undefined);

      var EMapAreaStatus = exports('EMapAreaStatus', /*#__PURE__*/function (EMapAreaStatus) {
        EMapAreaStatus[EMapAreaStatus["Close"] = 0] = "Close";
        EMapAreaStatus[EMapAreaStatus["Open"] = 1] = "Open";
        return EMapAreaStatus;
      }({}));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/energyBall.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './util.ts', './gameManager.ts', './effectManager.ts', './audioManager.ts', './constant.ts', './poolManager.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Node, Vec3, Component, Util, GameManager, EffectManager, AudioManager, Constant, PoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      Util = module.Util;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      PoolManager = module.PoolManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "37dc2IA7blBo4bx2LK3KFIH", "energyBall", undefined); //能量球脚本: 直线飞行


      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var EnergyBall = exports('EnergyBall', (_dec = ccclass('EnergyBall'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(EnergyBall, _Component);

        function EnergyBall() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._baseInfo = null; //敌人基本信息

          _this._skillInfo = null; //技能信息

          _this._curSpeed = 0; //当前速度

          _this._targetSpeed = 0; //目标速度

          _this._offsetPos = new Vec3(); //和玩家之间的向量差

          _this._curWorPos = new Vec3(); //当前节点世界坐标

          _this._disappearRange = 25; //能量球节点超过玩家这个范围则隐藏

          _this._targetWorPos = new Vec3();
          return _this;
        }

        var _proto = EnergyBall.prototype; //能量球的下次目标位置

        /**
        * 初始化 
        */

        _proto.init = function init(skillInfo, baseInfo, scriptParent) {
          var _scriptParent$scriptW;

          this.skillInfo = skillInfo;
          this.baseInfo = baseInfo;
          (_scriptParent$scriptW = scriptParent.scriptWarning) == null ? void 0 : _scriptParent$scriptW.hideWarning();
          this._targetSpeed = skillInfo.flySpeed;
          this._curSpeed = skillInfo.flySpeed * 0.5;
          var options = {
            ndEffect: this.node
          };
          EffectManager.instance.playParticle(options);
          AudioManager.instance.playSound(Constant.SOUND.ENERGY_BALL);
        };

        _proto.update = function update(deltaTime) {
          if (!this.node.parent || !GameManager.ndPlayer || GameManager.isGameOver || GameManager.isGamePause) {
            return;
          } //朝forward方向飞行


          this._curSpeed = Util.lerp(this._targetSpeed, this._curSpeed, 0.25);

          this._targetWorPos.set(0, 0, -deltaTime * this._curSpeed);

          this.node.translate(this._targetWorPos, Node.NodeSpace.LOCAL);

          this._curWorPos.set(this.node.worldPosition); //超过玩家一定范围则隐藏


          Vec3.subtract(this._offsetPos, this._curWorPos, GameManager.ndPlayer.worldPosition);

          if (this._offsetPos && this._offsetPos.length() >= this._disappearRange) {
            PoolManager.instance.putNode(this.node);
          }
        };

        _createClass(EnergyBall, [{
          key: "baseInfo",
          get: function get() {
            return this._baseInfo;
          },
          set: function set(v) {
            this._baseInfo = v;
          }
        }, {
          key: "skillInfo",
          get: function get() {
            return this._skillInfo;
          },
          set: function set(v) {
            this._skillInfo = v;
          }
        }]);

        return EnergyBall;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Facade.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Notification.ts', './Singleton.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Notification, Singleton;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Notification = module.Notification;
    }, function (module) {
      Singleton = module.Singleton;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e0f86R0RRxA5rYDGTcIQU5G", "Facade", undefined);
      /** @public */


      var Facade = exports('Facade', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(Facade, _Singleton);

        function Facade() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Singleton.call.apply(_Singleton, [this].concat(args)) || this;
          _this._moduleMap = {};
          _this._loadUIFunc = null;
          _this._addNodeFunc = null;
          return _this;
        }

        var _proto = Facade.prototype;

        _proto.init = function init(loadUIFunc, addHelper) {
          this._loadUIFunc = loadUIFunc;
          this._addNodeFunc = addHelper;
        };

        _proto.tryAdd = function tryAdd(key, child) {
          return this._addNodeFunc(key, child);
        };

        _proto.loadUI = function loadUI(path) {
          return this._loadUIFunc(path);
        };

        _proto.hasModule = function hasModule(moduleName) {
          return this._moduleMap[moduleName] != null;
        };

        _proto.registerModule = function registerModule(module) {
          var name = module.getName();

          if (this.hasModule(name)) {
            console.warn("Facade warning!!! repeat registe module--->", name);
            return;
          } // @ts-ignore


          this._moduleMap[name] = module;
          module.initialize();
        };

        _proto.retrieveModule = function retrieveModule(moduleName) {
          if (!this.hasModule(moduleName)) {
            console.warn("Facade warning!!! retrieve a not register module--->", moduleName);
            return null;
          }

          return this._moduleMap[moduleName];
        };

        _proto.retrieveProxy = function retrieveProxy(moduleName, proxyName) {
          var module = this.retrieveModule(moduleName);
          if (module) return module.retrieveProxy(proxyName);
          return null;
        };

        _proto.event = function event(name, body, type) {
          if (body === void 0) {
            body = null;
          }

          if (type === void 0) {
            type = "";
          }

          this.notifyObservers(new Notification(name, body, type));
        };

        _proto.notifyObservers = function notifyObservers(notification) {
          for (var _key2 in this._moduleMap) {
            var module = this._moduleMap[_key2];
            module.notifyObservers(notification);
          }
        };

        return Facade;
      }(Singleton()));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightBackCommand.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './gameManager.ts', './clientEvent.ts', './constant.ts', './Constant2.ts', './ViewMgr.ts', './ModuleType.ts', './Command.ts'], function (exports) {
  var _inheritsLoose, cclegacy, GameManager, ClientEvent, Constant, ViewMgr, MediatorName, ModuleName, Command;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      Constant = module.Constant;
    }, null, function (module) {
      ViewMgr = module.ViewMgr;
    }, function (module) {
      MediatorName = module.MediatorName;
      ModuleName = module.ModuleName;
    }, function (module) {
      Command = module.Command;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3acd2XC2BZJZ43DxUTAhAzW", "FightBackCommand", undefined);

      var FightBackCommand = exports('FightBackCommand', /*#__PURE__*/function (_Command) {
        _inheritsLoose(FightBackCommand, _Command);

        function FightBackCommand() {
          return _Command.apply(this, arguments) || this;
        }

        var _proto = FightBackCommand.prototype;

        _proto.execute = function execute(n) {
          this.hideView(MediatorName.FightHud);
          this.hideView(MediatorName.FightPause);
          GameManager.isGameOver = true;
          ClientEvent.dispatchEvent(Constant.EVENT_TYPE.RECYCLE_ALL);
          ViewMgr.ins.show(ModuleName.Home, MediatorName.Home);
        };

        return FightBackCommand;
      }(Command));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightDebugMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './clientEvent.ts', './constant.ts', './Utils.ts', './DebugPanel.ts', './gameManager.ts', './effectManager.ts', './audioManager.ts', './uiManager.ts', './ConfigUtils.ts', './ModuleType.ts', './LocalStorageUtils.ts', './FightEvent.ts', './Mediator.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Button, facade, ClientEvent, Constant, DebugPanel, GameManager, EffectManager, AudioManager, UIManager, ConfigUtils, MediatorName, ModuleName, ProxyName, LocalStorageUtils, FightEvent, Mediator, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
    }, function (module) {
      facade = module.facade;
    }, null, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      Constant = module.Constant;
    }, null, function (module) {
      DebugPanel = module.DebugPanel;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      ConfigUtils = module.ConfigUtils;
    }, function (module) {
      MediatorName = module.MediatorName;
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
    }, function (module) {
      LocalStorageUtils = module.LocalStorageUtils;
    }, function (module) {
      FightEvent = module.FightEvent;
    }, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "45b23Ix5PxOBrLufbk7Uw6u", "FightDebugMediator", undefined);
      /**
       * File: FightDebugMediator
       * Description:
       * Created on: 2024-11-13 10:09:40
       */


      var FightDebugMediator = exports('FightDebugMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(FightDebugMediator, _Mediator);

        function FightDebugMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UIPopup;
          _this._skin = "debug/debugPanel";
          _this._playerProxy = null;
          return _this;
        }

        var _proto = FightDebugMediator.prototype;

        _proto.updateView = function updateView() {
          this.updateLevel();
          this.updateSkill();
        };

        _proto.updateSkill = function updateSkill() {
          var view = this.getComponent(DebugPanel);
          var skills = ConfigUtils.getList("TbPlayerSkill"); //策划说回复生命的不出现在技能列表里面

          skills = skills.concat().filter(function (item) {
            return item.id !== Constant.PLAYER_SKILL.RECOVERY;
          });
          var arrSkill = this._playerProxy.playerInfo.arrSkill;
          view.updateSkillView(skills, arrSkill, this.onClickSkillItem.bind(this));
        };

        _proto.updateLevel = function updateLevel() {
          var mapInfo = ConfigUtils.getList("TbCheckpoint");
          var view = this.getComponent(DebugPanel);
          var levelId = this._playerProxy.playerInfo.levelId;
          view.updateLevelView(mapInfo, levelId, this.onClickLevelItem.bind(this));
        };

        _proto.onClickLevelItem = function onClickLevelItem(itemInfo) {
          var _this2 = this;

          ClientEvent.dispatchEvent(Constant.EVENT_TYPE.RECYCLE_ALL);

          this._playerProxy.debugSelectLevel(itemInfo.id);

          ClientEvent.dispatchEvent(Constant.EVENT_TYPE.ON_GAME_INIT, function () {
            _this2.hide();

            _this2.hideView(MediatorName.FightHud);
          });
        };

        _proto.onClickSkillItem = function onClickSkillItem(itemInfo, isSelected) {
          var playerProxy = this._playerProxy;

          if (isSelected) {
            playerProxy.reducePlayerSkill(itemInfo);
          } else {
            playerProxy.addPlayerSkill(itemInfo);
            var options = {
              effectPath: "levelUp/levelUp",
              ndTarget: GameManager.ndPlayer,
              isPlayAnimation: false,
              speed: GameManager.gameSpeed,
              isRecycle: true
            };
            EffectManager.instance.loadAndPlayEffect(options);
          }
        }
        /**
         * 清除玩家缓存
         *
         * @memberof DebugPanel
         */
        ;

        _proto.onClickBtnClearStorage = function onClickBtnClearStorage() {
          LocalStorageUtils.debugClearAll();
          UIManager.instance.showTips("游戏缓存已清除，请完全关闭游戏并重新打开！");
        }
        /**
         * 切换30帧
         *
         * @memberof DebugPanel
         */
        ;

        _proto.onClickBtnFrame30 = function onClickBtnFrame30() {
          this.event(FightEvent.DebugFrame, 30);
        }
        /**
         * 切换60帧
         *
         * @memberof DebugPanel
         */
        ;

        _proto.onClickBtnFrame60 = function onClickBtnFrame60() {
          this.event(FightEvent.DebugFrame, 60);
        }
        /**
         * 清除玩家全部技能
         *
         * @memberof DebugPanel
         */
        ;

        _proto.onClickBtnClearPlayerSkill = function onClickBtnClearPlayerSkill() {
          this._playerProxy.debugClearSkill();

          ClientEvent.dispatchEvent(Constant.EVENT_TYPE.PARSE_PLAYER_SKILL);
          this.updateSkill();
        }
        /**
         *  拥有玩家全部技能
         *
         * @memberof DebugPanel
         */
        ;

        _proto.onClickBtnSelectAllPlayerSkill = function onClickBtnSelectAllPlayerSkill() {
          AudioManager.instance.playSound(Constant.SOUND.GET_SKILL);
          var arrSkill = ConfigUtils.getTableArr(Constant.playerSkillName());
          var arr = [];
          arrSkill.forEach(function (item) {
            //生命回复改成在游戏内获得，不通过技能列表获得
            if (item.id !== Constant.PLAYER_SKILL.RECOVERY) {
              arr.push(item.id);
            }
          });
          var playerProxy = facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
          playerProxy.debugOpenSkill(arr);
          ClientEvent.dispatchEvent(Constant.EVENT_TYPE.PARSE_PLAYER_SKILL);
          this.updateSkill();
          var options = {
            effectPath: "levelUp/levelUp",
            ndTarget: GameManager.ndPlayer,
            isPlayAnimation: false,
            speed: GameManager.gameSpeed,
            isRecycle: true
          };
          EffectManager.instance.loadAndPlayEffect(options);
        };

        _proto.onInit = function onInit() {
          _Mediator.prototype.onInit.call(this);

          this._playerProxy = this.facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
        };

        _proto.onShow = function onShow(param) {
          _Mediator.prototype.onShow.call(this);

          GameManager.isGamePause = true;
          this.updateView();
        };

        _proto.addListeners = function addListeners() {
          _Mediator.prototype.addListeners.call(this);

          var view = this.getComponent(DebugPanel);
          view.btnClose.node.on(Button.EventType.CLICK, this.hide, this);
          view.btnFrame30.node.on(Button.EventType.CLICK, this.onClickBtnFrame30, this);
          view.btnFrame60.node.on(Button.EventType.CLICK, this.onClickBtnFrame60, this);
          view.btnClearStorage.node.on(Button.EventType.CLICK, this.onClickBtnClearStorage, this);
          view.btnClearPlayerSkill.node.on(Button.EventType.CLICK, this.onClickBtnClearPlayerSkill, this);
          view.btnSelectAllPlayerSkill.node.on(Button.EventType.CLICK, this.onClickBtnSelectAllPlayerSkill, this);
        };

        _proto.removeListeners = function removeListeners() {
          _Mediator.prototype.removeListeners.call(this);

          var view = this.getComponent(DebugPanel);
          view.btnClose.node.off(Button.EventType.CLICK, this.hide, this);
          view.btnFrame30.node.off(Button.EventType.CLICK, this.onClickBtnFrame30, this);
          view.btnFrame60.node.off(Button.EventType.CLICK, this.onClickBtnFrame60, this);
          view.btnClearStorage.node.off(Button.EventType.CLICK, this.onClickBtnClearStorage, this);
          view.btnClearPlayerSkill.node.off(Button.EventType.CLICK, this.onClickBtnClearPlayerSkill, this);
          view.btnSelectAllPlayerSkill.node.off(Button.EventType.CLICK, this.onClickBtnSelectAllPlayerSkill, this);
        };

        _proto.onHide = function onHide() {
          _Mediator.prototype.onHide.call(this);

          GameManager.isGamePause = false;
        };

        return FightDebugMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightEvent.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "881d4IBj+BII7TaXZzFwMf/", "FightEvent", undefined);

      var FightEvent = exports('FightEvent', /*#__PURE__*/function (FightEvent) {
        FightEvent["DebugFrame"] = "DebugFrame";
        FightEvent["BackToHome"] = "BackToHome";
        FightEvent["FightLoadingOver"] = "FightLoadingOver";
        return FightEvent;
      }({}));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightFloatLabel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts', './poolManager.ts', './util.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, LabelComponent, UITransform, view, tween, find, Vec3, CameraComponent, Component, Constant, PoolManager, Util;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      LabelComponent = module.LabelComponent;
      UITransform = module.UITransform;
      view = module.view;
      tween = module.tween;
      find = module.find;
      Vec3 = module.Vec3;
      CameraComponent = module.CameraComponent;
      Component = module.Component;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, function (module) {
      Util = module.Util;
    }],
    execute: function () {
      var _dec, _dec2, _class;

      cclegacy._RF.push({}, "7865fLtZOhBK49XXAIzcwpy", "FightFloatLabel", undefined); //战斗血量增减提示脚本


      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FightFloatLabel = exports('FightFloatLabel', (_dec = ccclass("FightFloatLabel"), _dec2 = menu("_game/module/fight/hud/FightFloatLabel"), _dec(_class = _dec2(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FightFloatLabel, _Component);

        function FightFloatLabel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._tweenTip = null; //tween实例

          _this._costTime = 1.5; //缓动所需时间

          _this._arrDirection = Util.objectToArray(Constant.BLOOD_TIP_DIRECTION); //三个不同方向

          _this._isChangePos = false; //是否改变位置

          _this._targetPos = new Vec3(0, 200, 0); //目标位置

          _this._oriWorPos = new Vec3(); //初始位置

          _this._curWorPos = new Vec3(); //当前位置

          _this._oriScale = new Vec3(0.7, 0.7, 0.7); //初始缩放

          _this._oriAngle = new Vec3(); //初始角度

          _this._scale_1 = new Vec3(1, 1, 1); //最开始缩放

          _this._scale_2 = new Vec3();
          return _this;
        }

        var _proto = FightFloatLabel.prototype;

        _proto.start = function start() {// Your initialization goes here.
        }
        /**
         * 展示血量提示
         *
         * @param {*} scriptParent 关联的血条脚本
         * @param {number} tipType 提示类型
         * @param {string} bloodNum 数值
         * @param {Function} [callback] 回调函数
         * @memberof FightTip
         */
        ;

        _proto.show = function show(scriptParent, tipType, bloodNum, callback) {
          var _ndSub$getChildByName,
              _ndSub$getComponent,
              _ndSub$getComponent2,
              _this2 = this;

          this._closeTweenTip();

          this.node.eulerAngles = this._oriAngle;
          this.node.setScale(this._oriScale);
          this._isChangePos = false;

          this._oriWorPos.set(scriptParent.node.worldPosition);

          var arrChildren = this.node.children;
          arrChildren.forEach(function (item) {
            item.active = false;
          }); // let UICom = this.node.getComponent(UITransform) as UITransform;
          // UICom.priority = constant.PRIORITY.BLOOD_TIP;

          this.node.setSiblingIndex(Constant.PRIORITY.BLOOD_TIP);
          bloodNum = Math.round(bloodNum);
          var txt = String(bloodNum);
          var ndSub = null;

          if (tipType === Constant.FIGHT_TIP.ADD_BLOOD) {
            ndSub = this.node.getChildByName("addBlood");
            txt = "+" + txt;
          } else if (tipType === Constant.FIGHT_TIP.REDUCE_BLOOD) {
            ndSub = this.node.getChildByName("reduceBlood");
          } else if (tipType === Constant.FIGHT_TIP.CRITICAL_HIT) {
            ndSub = this.node.getChildByName("criticalHit"); // UICom.priority = constant.PRIORITY.BLOOD_CRITICAL_TIP;

            this.node.setSiblingIndex(Constant.PRIORITY.BLOOD_CRITICAL_TIP);
          }

          var lbHitNum = (_ndSub$getChildByName = ndSub.getChildByName('num')) == null ? void 0 : _ndSub$getChildByName.getComponent(LabelComponent);
          lbHitNum && (lbHitNum.string = txt);
          ndSub.active = true;
          var pos = this.node.getPosition();
          var width = (_ndSub$getComponent = ndSub.getComponent(UITransform)) == null ? void 0 : _ndSub$getComponent.width;
          var height = (_ndSub$getComponent2 = ndSub.getComponent(UITransform)) == null ? void 0 : _ndSub$getComponent2.height;
          var rect = view.getViewportRect();

          if (Math.abs(pos.x) + width / 2 > rect.width / 2) {
            var w = rect.width / 2 - width / 2;
            pos.x = pos.x > 0 ? w : -w;
          }

          if (Math.abs(pos.y) + height / 2 > rect.height / 2) {
            var h = rect.height / 2 - height / 2;
            pos.y = pos.y > 0 ? h : -h;
          }

          this.node.setPosition(pos);
          this.getTargetPos(scriptParent);
          this._isChangePos = true;
          this._tweenTip = tween(this.node).to(this._costTime * 0.4, {
            scale: this._scale_1
          }, {
            easing: 'smooth'
          }).to(this._costTime * 0.2, {
            scale: this._scale_2
          }, {
            easing: "backIn"
          }).call(function () {
            _this2._closeTweenTip();

            PoolManager.instance.putNode(_this2.node);
            callback && callback();
            _this2._isChangePos = false;
          }).start();
        }
        /**
         * 获取跟上次血量提示不一样方向的提示
         */
        ;

        _proto.getTargetPos = function getTargetPos(scriptParent) {
          var dir;

          var arr = this._arrDirection.concat();

          arr = arr.filter(function (item) {
            return item !== scriptParent.bloodTipDirection;
          });
          dir = arr[Math.floor(Math.random() * arr.length)];

          switch (dir) {
            case Constant.BLOOD_TIP_DIRECTION.LEFT_UP:
              this._targetPos.set(-2, 5, 0);

              break;

            case Constant.BLOOD_TIP_DIRECTION.MID_UP:
              this._targetPos.set(0, 4, 0);

              break;

            case Constant.BLOOD_TIP_DIRECTION.RIGHT_UP:
              this._targetPos.set(2, 2, 0);

              break;
          }

          this._targetPos.add(scriptParent.node.worldPosition.clone());

          scriptParent.bloodTipDirection = dir;
        };

        _proto._closeTweenTip = function _closeTweenTip() {
          if (this._tweenTip) {
            this._tweenTip.stop();

            this._tweenTip = null;
          }
        };

        _proto.update = function update(deltaTime) {
          // Your update function goes here.
          if (this._isChangePos) {
            var _this$_mainCamera;

            this._oriWorPos.lerp(this._targetPos, 0.05);

            (_this$_mainCamera = this._mainCamera) == null ? void 0 : _this$_mainCamera.convertToUINode(this._oriWorPos, find('Canvas'), this._curWorPos);
            this.node.setPosition(this._curWorPos);
          }
        };

        _createClass(FightFloatLabel, [{
          key: "_mainCamera",
          get: //最终缩放
          function get() {
            var _find;

            return (_find = find("Main Camera")) == null ? void 0 : _find.getComponent(CameraComponent);
          }
        }]);

        return FightFloatLabel;
      }(Component)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightHud.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './gameManager.ts', './constant.ts', './util.ts', './BossBloodBar.ts', './LanguageData.ts', './ConfigUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Label, Button, Component, GameManager, Constant, Util, BossBloodBar, _updateSceneRenderers, ConfigUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Label = module.Label;
      Button = module.Button;
      Component = module.Component;
    }, null, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      Util = module.Util;
    }, function (module) {
      BossBloodBar = module.BossBloodBar;
    }, function (module) {
      _updateSceneRenderers = module.updateSceneRenderers;
    }, function (module) {
      ConfigUtils = module.ConfigUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "577fcK64kxDDaUjB/NBUAA1", "FightHud", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FightHud = exports('FightHud', (_dec = ccclass("FightHud"), _dec2 = menu("_game/module/fight/hud/FightHud"), _dec3 = property(Node), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Node), _dec7 = property(Button), _dec8 = property(Button), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FightHud, _Component);

        function FightHud() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ndJoystick", _descriptor, _assertThisInitialized(_this)); //手柄节点


          _initializerDefineProperty(_this, "lbGold", _descriptor2, _assertThisInitialized(_this)); //金币数量


          _initializerDefineProperty(_this, "lbLevel", _descriptor3, _assertThisInitialized(_this)); //等级


          _initializerDefineProperty(_this, "ndBossBloodBar", _descriptor4, _assertThisInitialized(_this)); //boss血量进度条节点


          _initializerDefineProperty(_this, "btnPause", _descriptor5, _assertThisInitialized(_this)); //暂停按钮


          _initializerDefineProperty(_this, "btnDebug", _descriptor6, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = FightHud.prototype; //调试按钮

        _proto.show = function show() {
          _updateSceneRenderers();

          this.ndBossBloodBar.active = false;

          if (GameManager.ndBoss) {
            var bossInfo = ConfigUtils.queryByID("base", Constant.BASE.BOSS_01);
            var scriptBossBloodBar = this.ndBossBloodBar.getComponent(BossBloodBar);
            scriptBossBloodBar.show(GameManager.scriptBoss, bossInfo.hp);
          }
        };

        _proto.updateGold = function updateGold(gold) {
          this.lbGold.string = Util.formatMoney(gold);
        };

        _proto.updateLevel = function updateLevel(level) {
          this.lbLevel.string = "level " + level;
        };

        return FightHud;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ndJoystick", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbGold", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbLevel", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ndBossBloodBar", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnPause", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnDebug", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightHudMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './FightHud.ts', './gameManager.ts', './constant.ts', './clientEvent.ts', './ModuleType.ts', './Mediator.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Button, FightHud, GameManager, Constant, ClientEvent, MediatorName, ModuleName, ProxyName, Mediator, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
    }, null, null, function (module) {
      FightHud = module.FightHud;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      MediatorName = module.MediatorName;
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
    }, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "60191/cUU5PUruy6X65IzoQ", "FightHudMediator", undefined);
      /**
       * File: FightHudMediator
       * Description:
       * Created on: 2024-11-13 10:09:40
       */


      var FightHudMediator = exports('FightHudMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(FightHudMediator, _Mediator);

        function FightHudMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UI;
          _this._skin = "fight/fightPanel";
          _this._playerProxy = null;
          _this._debugClickTimes = 0;
          return _this;
        }

        var _proto = FightHudMediator.prototype; //调试点击次数

        _proto.updateView = function updateView() {
          var _this$getComponent;

          this._debugClickTimes = 0;
          (_this$getComponent = this.getComponent(FightHud)) == null ? void 0 : _this$getComponent.show();
          this.updateGold();
          this.updateLevel();
        };

        _proto.updateGold = function updateGold() {
          var _this$getComponent2;

          var gold = this._playerProxy.playerInfo.gold;
          (_this$getComponent2 = this.getComponent(FightHud)) == null ? void 0 : _this$getComponent2.updateGold(gold);
        };

        _proto.updateLevel = function updateLevel() {
          var _this$getComponent3;

          (_this$getComponent3 = this.getComponent(FightHud)) == null ? void 0 : _this$getComponent3.updateLevel(this._playerProxy.level);
        };

        _proto.onClickBtnPause = function onClickBtnPause() {
          this.getModule().showView(MediatorName.FightPause);
          GameManager.isGamePause = true;
        };

        _proto.onClickBtnDebug = function onClickBtnDebug() {
          this._debugClickTimes += 1;

          if (this._debugClickTimes >= 1) {
            this._debugClickTimes = 0;
            this.getModule().showView(MediatorName.FightDebug);
          }
        };

        _proto.onInit = function onInit() {
          _Mediator.prototype.onInit.call(this);

          this._playerProxy = this.facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
        };

        _proto.onShow = function onShow(param) {
          _Mediator.prototype.onShow.call(this);

          this.updateView();
        };

        _proto.addListeners = function addListeners() {
          _Mediator.prototype.addListeners.call(this);

          var view = this.getComponent(FightHud);
          ClientEvent.on(Constant.EVENT_TYPE.REFRESH_GOLD, this.updateGold, this);
          ClientEvent.on(Constant.EVENT_TYPE.REFRESH_LEVEL, this.updateLevel, this);
          view.btnDebug.node.on(Button.EventType.CLICK, this.onClickBtnDebug, this);
          view.btnPause.node.on(Button.EventType.CLICK, this.onClickBtnPause, this);
        };

        _proto.removeListeners = function removeListeners() {
          _Mediator.prototype.removeListeners.call(this);

          ClientEvent.off(Constant.EVENT_TYPE.REFRESH_GOLD, this.updateGold, this);
          ClientEvent.off(Constant.EVENT_TYPE.REFRESH_LEVEL, this.updateLevel, this);
          var view = this.getComponent(FightHud);
          view.btnDebug.node.off(Button.EventType.CLICK, this.onClickBtnDebug, this);
          view.btnPause.node.off(Button.EventType.CLICK, this.onClickBtnPause, this);
        };

        _proto.onHide = function onHide() {
          _Mediator.prototype.onHide.call(this);
        };

        return FightHudMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightLoadingOverCommand.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './ViewMgr.ts', './ModuleType.ts', './Command.ts'], function (exports) {
  var _inheritsLoose, cclegacy, ViewMgr, ModuleName, MediatorName, Command;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      ViewMgr = module.ViewMgr;
    }, function (module) {
      ModuleName = module.ModuleName;
      MediatorName = module.MediatorName;
    }, function (module) {
      Command = module.Command;
    }],
    execute: function () {
      cclegacy._RF.push({}, "0dfecjhqdhDiaw7+CTBTkaa", "FightLoadingOverCommand", undefined);

      var FightLoadingOverCommand = exports('FightLoadingOverCommand', /*#__PURE__*/function (_Command) {
        _inheritsLoose(FightLoadingOverCommand, _Command);

        function FightLoadingOverCommand() {
          return _Command.apply(this, arguments) || this;
        }

        var _proto = FightLoadingOverCommand.prototype;

        _proto.execute = function execute(n) {
          ViewMgr.ins.show(ModuleName.Fight, MediatorName.FightHud);
        };

        return FightLoadingOverCommand;
      }(Command));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/FightModule.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './DebugFrameCommand.ts', './FightBackCommand.ts', './FightLoadingOverCommand.ts', './BackMediator.ts', './FightDebugMediator.ts', './FightHudMediator.ts', './LevelLoadingMediator.ts', './PauseMediator.ts', './ReviveMediator.ts', './SettlementMediator.ts', './ShopMediator.ts', './SkillMediator.ts', './FightEvent.ts', './ModuleType.ts', './Module.ts'], function (exports) {
  var _inheritsLoose, cclegacy, DebugFrameCommand, FightBackCommand, FightLoadingOverCommand, BackMediator, FightDebugMediator, FightHudMediator, LevelLoadingMediator, PauseMediator, ReviveMediator, SettlementMediator, ShopMediator, SkillMediator, FightEvent, MediatorName, ModuleName, Module;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      DebugFrameCommand = module.DebugFrameCommand;
    }, function (module) {
      FightBackCommand = module.FightBackCommand;
    }, function (module) {
      FightLoadingOverCommand = module.FightLoadingOverCommand;
    }, function (module) {
      BackMediator = module.BackMediator;
    }, function (module) {
      FightDebugMediator = module.FightDebugMediator;
    }, function (module) {
      FightHudMediator = module.FightHudMediator;
    }, function (module) {
      LevelLoadingMediator = module.LevelLoadingMediator;
    }, function (module) {
      PauseMediator = module.PauseMediator;
    }, function (module) {
      ReviveMediator = module.ReviveMediator;
    }, function (module) {
      SettlementMediator = module.SettlementMediator;
    }, function (module) {
      ShopMediator = module.ShopMediator;
    }, function (module) {
      SkillMediator = module.SkillMediator;
    }, function (module) {
      FightEvent = module.FightEvent;
    }, function (module) {
      MediatorName = module.MediatorName;
      ModuleName = module.ModuleName;
    }, function (module) {
      Module = module.Module;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c57f3XUnABAQraVhcTmXmQD", "FightModule", undefined);

      var FightModule = exports('FightModule', /*#__PURE__*/function (_Module) {
        _inheritsLoose(FightModule, _Module);

        function FightModule() {
          return _Module.call(this, ModuleName.Fight) || this;
        }

        var _proto = FightModule.prototype;

        _proto.initializeCommands = function initializeCommands() {
          this.registerCommand(FightEvent.DebugFrame, DebugFrameCommand);
          this.registerCommand(FightEvent.BackToHome, FightBackCommand);
          this.registerCommand(FightEvent.FightLoadingOver, FightLoadingOverCommand);
        };

        _proto.initializeProxys = function initializeProxys() {// this.registerProxy(ProxyName., );
        };

        _proto.initializeMediators = function initializeMediators() {
          this.registerMediator(MediatorName.FightBack, BackMediator);
          this.registerMediator(MediatorName.FightLoading, LevelLoadingMediator);
          this.registerMediator(MediatorName.FightPause, PauseMediator);
          this.registerMediator(MediatorName.FightRevive, ReviveMediator);
          this.registerMediator(MediatorName.FightSettlement, SettlementMediator);
          this.registerMediator(MediatorName.FightSkill, SkillMediator);
          this.registerMediator(MediatorName.FightShop, ShopMediator);
          this.registerMediator(MediatorName.FightHud, FightHudMediator);
          this.registerMediator(MediatorName.FightDebug, FightDebugMediator);
        };

        return FightModule;
      }(Module));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fireBall.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './audioManager.ts', './constant.ts', './effectManager.ts', './poolManager.ts', './resourceUtil.ts', './gameManager.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Vec3, Component, AudioManager, Constant, EffectManager, PoolManager, ResourceUtil, GameManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, function (module) {
      GameManager = module.GameManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "90320FRD9ZBib7MUibgkbJA", "fireBall", undefined); //小火球脚本：抛物线，只有落地(播放爆炸)才有伤害, 所以碰撞器在hitFireBall1里面


      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var FireBall = exports('FireBall', (_dec = ccclass('FireBall'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FireBall, _Component);

        function FireBall() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._isPlayHitFireBall = false; //是否播放火球

          _this._groundWorPosY = 1.8; //地面相对世界原点高度

          _this._scriptWarning = null; //预警技能脚本

          _this._baseInfo = null; //敌人基本信息

          _this._skillInfo = null; //技能信息

          _this._isAutoRotate = true; //方向是否自动调整

          _this._posStart = new Vec3(); //开始位置

          _this._posEnd = new Vec3(); //结束位置

          _this._posOffset = new Vec3(); //开始和结束位置差

          _this._totalFlyTime = 0; //小火球飞行时间

          _this._maxFlyHeight = 0; //小火球最大飞行高度

          _this._curFlyTime = 0; //当前飞行时间

          _this._rotateCoolTime = 0; //每隔0.1秒调整角度

          _this._posNextTarget = new Vec3(); //下次的目标位置

          _this._scriptParent = null; //关联的怪物脚本

          _this._targetPos = new Vec3();
          return _this;
        }

        var _proto = FireBall.prototype; //目标位置

        _proto.start = function start() {}
        /**
        * 初始化 
        */
        ;

        _proto.init = function init(skillInfo, baseInfo, scriptParent) {
          this.skillInfo = skillInfo;
          this.baseInfo = baseInfo;
          this._scriptParent = scriptParent;
          this._totalFlyTime = 0;
          this._maxFlyHeight = 0;
          this._curFlyTime = 0;

          this._posStart.set(this.node.worldPosition.x, this.groundWorPosY, this.node.worldPosition.z);

          this._posEnd.set(scriptParent.attackPos);

          Vec3.subtract(this._posOffset, this._posEnd, this._posStart);
          this._totalFlyTime = this._posOffset.length() / skillInfo.flySpeed;
          this._maxFlyHeight = this._totalFlyTime * 3; //最大飞行高度跟飞行距离成正比     

          this.isPlayHitFireBall = false;
          this.node.children.forEach(function (ndChild) {
            ndChild.active = true;
          });
          var options = {
            ndEffect: this.node
          };
          EffectManager.instance.playParticle(options);
          AudioManager.instance.playSound(Constant.SOUND.FIRE_BALL);
        };

        _proto.update = function update(deltaTime) {
          var _this2 = this;

          if (!this.node.parent || !GameManager.ndPlayer || GameManager.isGameOver || GameManager.isGamePause) {
            return;
          } //向指定目标飞行


          if (this._totalFlyTime > 0 && this.node.parent) {
            if (this._curFlyTime < this._totalFlyTime) {
              this._curFlyTime += deltaTime;
              this._curFlyTime = this._curFlyTime >= this._totalFlyTime ? this._totalFlyTime : this._curFlyTime;
              var percent = Number((this._curFlyTime / this._totalFlyTime).toFixed(2)); //曲线飞行

              var height = this._maxFlyHeight * Math.cos(percent * Math.PI - Math.PI / 2);

              this._targetPos.set(this._posStart.x + this._posOffset.x * percent, this._posStart.y + height, this._posStart.z + this._posOffset.z * percent);

              this.node.setWorldPosition(this._targetPos);

              if (this._isAutoRotate) {
                this._rotateCoolTime -= deltaTime;

                if (this._rotateCoolTime < 0) {
                  this._rotateCoolTime = 0.1;
                  percent = Number(((this._curFlyTime + deltaTime) / this._totalFlyTime).toFixed(2));

                  if (percent < 1) {
                    //曲线飞行
                    height = this._maxFlyHeight * Math.cos(percent * Math.PI - Math.PI / 2);

                    this._posNextTarget.set(this._posStart.x + this._posOffset.x * percent, this._posStart.y + height, this._posStart.z + this._posOffset.z * percent);

                    this.node.forward = this._posNextTarget.subtract(this._targetPos).normalize();
                  }
                }
              } //小火球碰到地面


              if (Number(this.node.position.y.toFixed(2)) <= this.groundWorPosY && !this.isPlayHitFireBall && this._curFlyTime > 0) {
                var _this$_scriptParent$s;

                this.isPlayHitFireBall = true; //关闭预警

                (_this$_scriptParent$s = this._scriptParent.scriptWarning) == null ? void 0 : _this$_scriptParent$s.hideWarning();
                this.node.children.forEach(function (ndChild) {
                  ndChild.active = false;
                }); //展示火焰爆炸

                ResourceUtil.loadEffectRes("hit/hitFireBall1").then(function (prefab) {
                  var ndEffect = PoolManager.instance.getNode(prefab, _this2.node);
                  ndEffect.setWorldPosition(_this2.node.worldPosition);
                  var options = {
                    ndEffect: ndEffect,
                    speed: GameManager.gameSpeed,
                    isRecycle: true,
                    recycleTime: 1.1
                  };
                  EffectManager.instance.playParticle(options);
                });
              }
            }
          }
        };

        _createClass(FireBall, [{
          key: "baseInfo",
          get: function get() {
            return this._baseInfo;
          },
          set: function set(v) {
            this._baseInfo = v;
          }
        }, {
          key: "skillInfo",
          get: function get() {
            return this._skillInfo;
          },
          set: function set(v) {
            this._skillInfo = v;
          }
        }, {
          key: "isPlayHitFireBall",
          get: function get() {
            return this._isPlayHitFireBall;
          },
          set: function set(v) {
            this._isPlayHitFireBall = v;
          }
        }, {
          key: "groundWorPosY",
          get: function get() {
            return this._groundWorPosY;
          },
          set: function set(v) {
            this._groundWorPosY = v;
          }
        }, {
          key: "scriptWarning",
          get: function get() {
            return this._scriptWarning;
          },
          set: function set(v) {
            this._scriptWarning = v;
          }
        }]);

        return FireBall;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/fireBallBig.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts', './effectManager.ts', './resourceUtil.ts', './audioManager.ts', './poolManager.ts', './gameManager.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, tween, Component, Constant, EffectManager, ResourceUtil, AudioManager, PoolManager, GameManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, function (module) {
      GameManager = module.GameManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "07328JA8aFLSbjSpxzXqaIZ", "fireBallBig", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //大火球脚本: 炸开的时候才有伤害，跟小火球一样

      var FireBallBig = exports('FireBallBig', (_dec = ccclass('FireBallBig'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(FireBallBig, _Component);

        function FireBallBig() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._baseInfo = null; //敌人基本信息

          _this._skillInfo = null; //技能信息

          _this._scriptWarning = null; //预警技能脚本

          _this._isPlayHitFireBall = false;
          return _this;
        }

        var _proto = FireBallBig.prototype; //是否开始播放爆炸特效

        _proto.start = function start() {// [3]
        };

        _proto.init = function init(skillInfo, baseInfo, scriptParent) {
          var _this2 = this;

          this.skillInfo = skillInfo;
          this.baseInfo = baseInfo;
          this.isPlayHitFireBall = false;
          var playerWorPos = scriptParent.attackPos;
          this.node.setWorldPosition(playerWorPos.x, 23, playerWorPos.z);
          this.node.children.forEach(function (ndChild) {
            ndChild.active = true;
          });
          var options = {
            ndEffect: this.node
          };
          EffectManager.instance.playParticle(options);
          tween(this.node).to(1 / skillInfo.flySpeed, {
            position: playerWorPos
          }, {
            easing: "elasticIn"
          }).call(function () {
            var _scriptParent$scriptW;

            AudioManager.instance.playSound(Constant.SOUND.FIRE_BALL_BIG);
            _this2.isPlayHitFireBall = true; //关闭预警

            scriptParent == null ? void 0 : (_scriptParent$scriptW = scriptParent.scriptWarning) == null ? void 0 : _scriptParent$scriptW.hideWarning();

            _this2.node.children.forEach(function (ndChild) {
              ndChild.active = false;
            }); // console.log("大火球碰到地面");


            ResourceUtil.loadEffectRes("hit/hitFireBall2").then(function (prefab) {
              var ndEffect = PoolManager.instance.getNode(prefab, _this2.node);
              ndEffect.setWorldPosition(_this2.node.worldPosition);
              var options = {
                ndEffect: ndEffect,
                speed: GameManager.gameSpeed,
                isRecycle: true,
                recycleTime: 1.1
              };
              EffectManager.instance.playParticle(options).then(function () {
                PoolManager.instance.putNode(_this2.node);
              });
            });
          }).start();
        };

        _createClass(FireBallBig, [{
          key: "baseInfo",
          get: function get() {
            return this._baseInfo;
          },
          set: function set(v) {
            this._baseInfo = v;
          }
        }, {
          key: "skillInfo",
          get: function get() {
            return this._skillInfo;
          },
          set: function set(v) {
            this._skillInfo = v;
          }
        }, {
          key: "scriptWarning",
          get: function get() {
            return this._scriptWarning;
          },
          set: function set(v) {
            this._scriptWarning = v;
          }
        }, {
          key: "isPlayHitFireBall",
          get: function get() {
            return this._isPlayHitFireBall;
          },
          set: function set(v) {
            this._isPlayHitFireBall = v;
          }
        }]);

        return FireBallBig;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gameCamera.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Vec3, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "7b36dlhjPBALJv1VQ9Wc7M+", "gameCamera", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //游戏相机脚本

      var GameCamera = exports('GameCamera', (_dec = ccclass('GameCamera'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameCamera, _Component);

        function GameCamera() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._ndFollowTarget = null; //相机跟随的目标节点

          _this._oriCameraWorPos = new Vec3(); //初始相机世界坐标

          _this._targetCameraWorPos = new Vec3(); //目标相机世界坐标

          _this._curCameraWorPos = new Vec3();
          return _this;
        }

        var _proto = GameCamera.prototype; //目标相机世界坐标

        _proto.start = function start() {
          this._oriCameraWorPos = this.node.worldPosition.clone();
        };

        _proto.resetCamera = function resetCamera() {
          this._targetCameraWorPos.set(this._oriCameraWorPos);
        } // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        _proto.lateUpdate = function lateUpdate() {
          if (!this.ndFollowTarget || !this.ndFollowTarget.worldPosition || !this.ndFollowTarget.active) {
            return;
          }

          this._targetCameraWorPos = this._targetCameraWorPos.lerp(this.ndFollowTarget.worldPosition, 0.5);

          this._curCameraWorPos.set(this._oriCameraWorPos.x + this._targetCameraWorPos.x, this._oriCameraWorPos.y, this._oriCameraWorPos.z + this._targetCameraWorPos.z);

          this.node.setWorldPosition(this._curCameraWorPos);
        };

        _createClass(GameCamera, [{
          key: "ndFollowTarget",
          get: function get() {
            return this._ndFollowTarget;
          },
          set: function set(v) {
            this._ndFollowTarget = v;
          }
        }]);

        return GameCamera;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameConfig.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cc29d4TdjtEBIbtjC2hD6YK", "GameConfig", undefined); // import { IViewKey, IViewLayer, IViewParam } from "./core/mvc/view/UIInterface";


      var ConfigPath = exports('ConfigPath', function ConfigPath() {}); //json

      ConfigPath.JSON_Lang = "resources/config/config_lang.json"; //sound

      ConfigPath.M_BG_MAIN = "resources/sound/music_main.mp3";
      ConfigPath.M_UI_WIN = "resources/sound/sound_ui_win.mp3";
      ConfigPath.M_UI_BACK = "resources/sound/sound_ui_back.mp3";
      ConfigPath.M_UI_CLICK = "resources/sound/sound_ui_click.mp3";
      ConfigPath.M_UI_FORWARD = "resources/sound/sound_ui_forward.mp3"; // common
      // bg

      ConfigPath.IMG_Layer_0 = "resources/scene/bg/img_layer_0.png";
      ConfigPath.IMG_Layer_1 = "resources/scene/bg/img_layer_1.png";
      ConfigPath.IMG_Layer_2 = "resources/scene/bg/img_layer_2.png";
      ConfigPath.IMG_Layer_3 = "resources/scene/bg/img_layer_3.png";
      ConfigPath.IMG_Layer_4 = "resources/scene/bg/img_layer_4.png"; //mask

      ConfigPath.IMG_Mask_0 = "resources/scene/img_scene_mask_0.png";
      ConfigPath.IMG_Mask_1 = "resources/scene/img_scene_mask_1.png"; // static IMG_Mask_1 = "resources/scene/img_scene_mask_1.png";
      //view

      ConfigPath.LH_Test = "resources/prefabs/views/TestView.lh";
      ConfigPath.LH_ToastItem = "resources/prefabs/common/componentUI/ToastItem.lh"; //battle
      // static LH_BulletRed = "resources/prefabs/moudle/battle/bullet/BulletRed.lh";
      // static LH_BulletBlue = "resources/prefabs/moudle/battle/bullet/Bullet.lh";
      //level

      ConfigPath.LH_Level_Test = "resources/prefabs/level/chapter/Level_Test.lh";
      ConfigPath.EnterLoadList = [// { url: ConfigPath.IMG_Layer_0, type: Laya.Loader.IMAGE },
        // { url: ConfigPath.IMG_Layer_1, type: Laya.Loader.IMAGE },
        // { url: ConfigPath.IMG_Layer_2, type: Laya.Loader.IMAGE },
        // { url: ConfigPath.IMG_Layer_3, type: Laya.Loader.IMAGE },
        // { url: ConfigPath.IMG_Layer_4, type: Laya.Loader.IMAGE },
        // { url: ConfigPath.LH_ToastItem, type: Laya.Loader.HIERARCHY },
        // { url: ConfigPath.LH_BulletBlue, type: Laya.Loader.HIERARCHY },
        // { url: ConfigPath.LH_Level_10000, type: Laya.Loader.HIERARCHY },
        // { url: ConfigPath.LH_Level_10001, type: Laya.Loader.HIERARCHY },
        // { url: ConfigPath.LH_Level_10002, type: Laya.Loader.HIERARCHY },
        // { url: ConfigPath.M_BG_MAIN, type: Laya.Loader.SOUND },
        // { url: ConfigPath.M_UI_WIN, type: Laya.Loader.SOUND },
        // { url: ConfigPath.M_UI_BACK, type: Laya.Loader.SOUND },
        // { url: ConfigPath.M_UI_CLICK, type: Laya.Loader.SOUND },
        // { url: ConfigPath.M_UI_FORWARD, type: Laya.Loader.SOUND },
      ];
      var GameFSMStates = exports('GameFSMStates', /*#__PURE__*/function (GameFSMStates) {
        GameFSMStates["init"] = "init";
        GameFSMStates["home"] = "home";
        GameFSMStates["level"] = "level";
        GameFSMStates["pause"] = "pause";
        GameFSMStates["win"] = "win";
        return GameFSMStates;
      }({}));
      var GameFSMEvents = exports('GameFSMEvents', /*#__PURE__*/function (GameFSMEvents) {
        GameFSMEvents[GameFSMEvents["enterHome"] = 0] = "enterHome";
        GameFSMEvents[GameFSMEvents["enterLevel"] = 1] = "enterLevel";
        GameFSMEvents[GameFSMEvents["win"] = 2] = "win";
        GameFSMEvents[GameFSMEvents["nextLevel"] = 3] = "nextLevel";
        GameFSMEvents[GameFSMEvents["pause"] = 4] = "pause";
        GameFSMEvents[GameFSMEvents["resume"] = 5] = "resume";
        GameFSMEvents[GameFSMEvents["restartLevel"] = 6] = "restartLevel";
        GameFSMEvents[GameFSMEvents["backHome"] = 7] = "backHome";
        return GameFSMEvents;
      }({}));
      var EViewLayer = exports('EViewLayer', /*#__PURE__*/function (EViewLayer) {
        EViewLayer["Bg"] = "bg";
        EViewLayer["Battle"] = "battle";
        EViewLayer["UI"] = "ui";
        EViewLayer["UIParticle"] = "ui_particle";
        EViewLayer["UISystem"] = "ui_system";
        EViewLayer["UIPopup"] = "ui_popup";
        EViewLayer["UIMsg"] = "ui_msg";
        EViewLayer["UIGuide"] = "ui_guide";
        EViewLayer["UILoading"] = "ui_loading";
        EViewLayer["UIAlert"] = "ui_alert";
        return EViewLayer;
      }({}));
      var ViewLayerZOrder = exports('ViewLayerZOrder', [[EViewLayer.Bg, 10], [EViewLayer.Battle, 20], [EViewLayer.UI, 100], [EViewLayer.UISystem, 200], [EViewLayer.UIParticle, 250], [EViewLayer.UIPopup, 300], [EViewLayer.UIMsg, 400], [EViewLayer.UIGuide, 500], [EViewLayer.UILoading, 600], [EViewLayer.UIAlert, 700]]);
      var EViewKey = exports('EViewKey', /*#__PURE__*/function (EViewKey) {
        EViewKey["TestView"] = "TestView";
        return EViewKey;
      }({})); // type IViewRegConfig = { key: IViewKey, layer: IViewLayer, options: IViewParam, prefab: string };
      // export const ViewRegConfig: IViewRegConfig[] = [
      //     { key: EViewKey.TestView, layer: EViewLayer.UI, options: { enterAnim: false }, prefab: ConfigPath.LH_Test },
      // ]

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './constant.ts', './LocalData.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, Constant, LocalData;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      Constant = module.Constant;
    }, function (module) {
      LocalData = module.LocalData;
    }],
    execute: function () {
      cclegacy._RF.push({}, "73d38RR48FOVKVRb2Ec1XOs", "GameData", undefined);

      var GameLocalData = exports('GameLocalData', /*#__PURE__*/function (_LocalData) {
        _inheritsLoose(GameLocalData, _LocalData);

        function GameLocalData() {
          var frameRate = Constant.GAME_FRAME; // //@ts-ignore
          // if (window.wx && Util.checkIsLowPhone()) {
          //     frameRate = 30;
          // }

          return _LocalData.call(this, "GameLocalData", {
            frameRate: frameRate,
            debugEnabled: true,
            vibrationEnabled: true,
            music: true,
            sound: true,
            audioEnabled: true,
            mainVolume: 1,
            soundVolume: 1,
            musicVolume: 1,
            environmentalVolume: 1
          }) || this;
        }

        return GameLocalData;
      }(LocalData));
      var GameData = exports('GameData', /*#__PURE__*/function () {
        function GameData() {
          this._local = void 0;
          this._local = new GameLocalData();
        }

        _createClass(GameData, [{
          key: "frameRate",
          get: function get() {
            return this._local.data.frameRate;
          },
          set: function set(v) {
            this._local.data.frameRate = v;

            this._local.save();
          }
        }, {
          key: "audioEnabled",
          get: function get() {
            return this._local.data.audioEnabled;
          },
          set: function set(v) {
            this._local.data.audioEnabled = v;

            this._local.save();
          }
        }, {
          key: "debugEnabled",
          get: function get() {
            return this._local.data.debugEnabled;
          },
          set: function set(v) {
            this._local.data.debugEnabled = v;

            this._local.save();
          }
        }, {
          key: "vibrationEnabled",
          get: function get() {
            return this._local.data.vibrationEnabled;
          },
          set: function set(v) {
            this._local.data.vibrationEnabled = v;

            this._local.save();
          }
        }, {
          key: "music",
          get: function get() {
            return this._local.data.music;
          },
          set: function set(v) {
            this._local.data.music = v;

            this._local.save();
          }
        }, {
          key: "sound",
          get: function get() {
            return this._local.data.sound;
          },
          set: function set(v) {
            this._local.data.sound = v;

            this._local.save();
          }
        }, {
          key: "mainVolume",
          get: function get() {
            return this._local.data.mainVolume;
          }
        }, {
          key: "soundVolume",
          get: function get() {
            return this._local.data.soundVolume;
          }
        }, {
          key: "musicVolume",
          get: function get() {
            return this._local.data.musicVolume;
          }
        }, {
          key: "environmentalVolume",
          get: function get() {
            return this._local.data.environmentalVolume;
          }
        }]);

        return GameData;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameEvent.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "30342cc0ehKE43M2Ov5wMha", "GameEvent", undefined);

      var GameEvent = exports('GameEvent', /*#__PURE__*/function (GameEvent) {
        GameEvent["Login"] = "Login";
        GameEvent["StartLoad"] = "StartGame";
        GameEvent["EnterHome"] = "EnterHome";
        GameEvent["LoadingUpdate"] = "LoadingUpdate";
        return GameEvent;
      }({}));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameInit.ts", ['cc', './PureMVC.ts', './Utils.ts', './resourceUtil.ts', './Constant2.ts', './LoadingModule.ts', './LoginModule.ts', './GameModule.ts', './audioManager.ts', './constant.ts', './SceneRegUtils.ts', './LocalStorageUtils.ts', './GameEvent.ts', './ModuleType.ts', './ConfigUtils.ts', './GameConfig.ts'], function (exports) {
  var cclegacy, facade, ResourceUtil, LoadingModule, LoginModule, GameModule, AudioManager, Constant, SceneRegUtils, LocalStorageUtils, GameEvent, ModuleName, ProxyName, ConfigUtils, ViewLayerZOrder;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      facade = module.facade;
    }, null, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, null, function (module) {
      LoadingModule = module.LoadingModule;
    }, function (module) {
      LoginModule = module.LoginModule;
    }, function (module) {
      GameModule = module.GameModule;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      SceneRegUtils = module.SceneRegUtils;
    }, function (module) {
      LocalStorageUtils = module.LocalStorageUtils;
    }, function (module) {
      GameEvent = module.GameEvent;
    }, function (module) {
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
    }, function (module) {
      ConfigUtils = module.ConfigUtils;
    }, function (module) {
      ViewLayerZOrder = module.ViewLayerZOrder;
    }],
    execute: function () {
      cclegacy._RF.push({}, "072e8+A+M5LH6rN7ZGV7mei", "GameInit", undefined);

      var GameInit = exports('GameInit', /*#__PURE__*/function () {
        function GameInit() {}

        GameInit.start = function start() {
          Constant.LOGIN_TIME = Date.now();
          facade.init(ResourceUtil.loadUI.bind(ResourceUtil), SceneRegUtils.tryAdd.bind(SceneRegUtils));
          this.debugUtils();
          LocalStorageUtils.init("none");
          this.initUiLayers();
          new LoginModule();
          new GameModule();
          new LoadingModule();
          this.initManagerAndUtils();
          facade.event(GameEvent.Login);
        }
        /**
         * 初始化场景层级
         */
        ;

        GameInit.initUiLayers = function initUiLayers() {
          var orders = ViewLayerZOrder;
          orders.forEach(function (_ref) {
            var layer = _ref[0],
                zOrder = _ref[1];
            return SceneRegUtils.add(layer, zOrder);
          });
        }
        /**
         * 初始化全局管理类和工具
         */
        ;

        GameInit.initManagerAndUtils = function initManagerAndUtils() {
          var gameProxy = facade.retrieveProxy(ModuleName.Game, ProxyName.Game);
          AudioManager.instance.init(gameProxy.getAudioSetting(true), gameProxy.getAudioSetting(false), gameProxy.mainVolume, gameProxy.soundVolume, gameProxy.musicVolume, gameProxy.environmentalVolume);
        };

        GameInit.debugUtils = function debugUtils() {
          // if (!DEBUG) return;
          var w = window;
          w["cfg"] = ConfigUtils;
          w["Facade"] = facade; // w["Toast"] = Toast.ins;
          // w["HintUtils"] = HintUtils;
          // w["FrameAnimUtils"] = FrameAnimUtils;
        };

        return GameInit;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/gameManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './clientEvent.ts', './gameCamera.ts', './resourceUtil.ts', './constant.ts', './audioManager.ts', './util.ts', './poolManager.ts', './Utils.ts', './PureMVC.ts', './Constant2.ts', './ViewMgr.ts', './ModuleType.ts', './ConfigUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, Vec3, CameraComponent, find, AnimationComponent, SkeletalAnimationComponent, ParticleSystemComponent, Prefab, Component, ClientEvent, GameCamera, ResourceUtil, Constant, AudioManager, Util, PoolManager, facade, ViewMgr, ModuleName, ProxyName, MediatorName, ConfigUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Vec3 = module.Vec3;
      CameraComponent = module.CameraComponent;
      find = module.find;
      AnimationComponent = module.AnimationComponent;
      SkeletalAnimationComponent = module.SkeletalAnimationComponent;
      ParticleSystemComponent = module.ParticleSystemComponent;
      Prefab = module.Prefab;
      Component = module.Component;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      GameCamera = module.GameCamera;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Util = module.Util;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, null, function (module) {
      facade = module.facade;
    }, null, function (module) {
      ViewMgr = module.ViewMgr;
    }, function (module) {
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
      MediatorName = module.MediatorName;
    }, function (module) {
      ConfigUtils = module.ConfigUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor, _descriptor2, _class3;

      cclegacy._RF.push({}, "74bb5fEKqJBI7792FWkxSP/", "gameManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //游戏管理脚本

      var GameManager = exports('GameManager', (_dec = ccclass("GameManager"), _dec2 = property(GameCamera), _dec3 = property(Node), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(GameManager, _Component);

        function GameManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "camera", _descriptor, _assertThisInitialized(_this)); //相机脚本


          _initializerDefineProperty(_this, "ndLight", _descriptor2, _assertThisInitialized(_this));

          _this._dictMonsterSkill = {}; //已经预加载的敌人技能

          _this._oriMainLightWorPos = null; //主光源节点初始世界坐标

          _this._offsetWorPosMainLight = new Vec3(); //主光源和玩家的向量差

          _this._scriptMapManager = null; //地图脚本脚本

          _this._mapInfo = {};
          return _this;
        }

        var _proto = GameManager.prototype; //本层敌人攻速加成

        _proto.onEnable = function onEnable() {
          ClientEvent.on(Constant.EVENT_TYPE.ON_GAME_INIT, this._onGameInit, this);
          ClientEvent.on(Constant.EVENT_TYPE.ON_GAME_OVER, this._onGameOver, this);
          ClientEvent.on(Constant.EVENT_TYPE.ON_GAME_PAUSE, this._onGamePause, this);
          ClientEvent.on(Constant.EVENT_TYPE.REFRESH_LEVEL, this.refreshLevel, this);
          ClientEvent.on(Constant.EVENT_TYPE.RECYCLE_ALL, this._recycleAll, this);
        };

        _proto.onDisable = function onDisable() {
          ClientEvent.off(Constant.EVENT_TYPE.ON_GAME_INIT, this._onGameInit, this);
          ClientEvent.off(Constant.EVENT_TYPE.ON_GAME_OVER, this._onGameOver, this);
          ClientEvent.off(Constant.EVENT_TYPE.ON_GAME_PAUSE, this._onGamePause, this);
          ClientEvent.off(Constant.EVENT_TYPE.REFRESH_LEVEL, this.refreshLevel, this);
          ClientEvent.off(Constant.EVENT_TYPE.RECYCLE_ALL, this._recycleAll, this);
        };

        _proto.start = function start() {
          var _this$camera, _this$camera2, _find;

          GameManager.mainCamera = (_this$camera = this.camera) == null ? void 0 : _this$camera.getComponent(CameraComponent);
          GameManager.scriptGameCamera = (_this$camera2 = this.camera) == null ? void 0 : _this$camera2.getComponent(GameCamera);
          GameManager.ndGameManager = this.node;
          GameManager.ndMapManager = find("mapManager");
          GameManager.ndEffectManager = find("effectManager");
          this._oriMainLightWorPos = this.ndLight.worldPosition.clone();
          this.scriptMapManager = (_find = find("mapManager")) == null ? void 0 : _find.getComponent("MapManager");

          if (GameManager.isTesting) {
            //@ts-ignore
            window.AudioManager = AudioManager.instance; //@ts-ignore

            window.clientEvent = ClientEvent; //@ts-ignore

            window.ndGameManager = GameManager.ndGameManager; //@ts-ignore

            window.GameManager = GameManager; //@ts-ignore

            window.ndMapManager = GameManager.ndMapManager; //@ts-ignore

            window.ndEffectManager = GameManager.ndEffectManager; //@ts-ignore

            window.constant = Constant;
          }
        }
        /**
         * 初始化游戏
         */
        ;

        _proto._onGameInit = function _onGameInit(finishCb) {
          var playerProxy = facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
          var levelId = playerProxy.playerInfo.levelId; // let totalLevel = Cfg.getTableArr("checkpoint").length;
          // //游戏通关后从倒数第10关开始循环(61-70)
          // if (level > totalLevel) {
          //     level = (totalLevel - 10) + (level - totalLevel) % 10;
          // }

          this.mapInfo = ConfigUtils.get("TbCheckpoint", levelId); //设置本层敌人属性加成比例

          GameManager.attackAddition = this.mapInfo.attackAddition;
          GameManager.defenseAddition = this.mapInfo.defenseAddition;
          GameManager.hpAddition = this.mapInfo.hpAddition;
          GameManager.moveSpeedAddition = this.mapInfo.moveSpeedAddition;
          GameManager.attackSpeedAddition = this.mapInfo.attackSpeedAddition;
          GameManager.isGameStart = false;
          GameManager.isGamePause = false;
          GameManager.isGameOver = false;
          GameManager.isWin = false;
          GameManager.isRevive = false;
          GameManager.arrMonster = [];
          GameManager.gameSpeed = 1;
          GameManager.ndBoss = null;
          GameManager.existentNum = 0;
          playerProxy.addFightTimes();
          AudioManager.instance.stopAllSound();
          AudioManager.instance.stopMusic();
          ViewMgr.ins.show(ModuleName.Fight, MediatorName.FightLoading, finishCb);
        }
        /**
         * 刷新关卡, 后期优化写法。。。
         */
        ;

        _proto.refreshLevel = function refreshLevel() {
          var _this2 = this; //每层随机一张地图


          var arrMap = this.mapInfo.mapName.split("#");
          var mapName = arrMap[Math.floor(Math.random() * arrMap.length)];
          this.preloadMonsterSkill(mapName).then(function () {
            _this2._recycleAll();

            _this2._loadMap(mapName, function () {
              //第一次进入或者失败后被销毁需要重新创建
              if (!GameManager.ndPlayer) {
                _this2._createPlayer();
              } else {
                GameManager.scriptPlayer.preloadArrow(function () {
                  console.log("###_refreshLevel1");
                  ClientEvent.dispatchEvent(Constant.EVENT_TYPE.HIDE_LOADING_PANEL, function () {
                    GameManager.scriptPlayer.resetPlayerState();
                  });
                });
              }
            });
          });
        }
        /**
         * 加载地图数据
         *
         * @private
         * @param {Function} [cb=()=>{}]
         * @memberof GameManager
         */
        ;

        _proto._loadMap = function _loadMap(mapName, cb) {
          if (cb === void 0) {
            cb = function cb() {};
          }

          this.scriptMapManager.buildMap(mapName, function () {}, function () {
            cb && cb();
          });
        }
        /**
         * 创建玩家
         *
         * @private
         * @memberof GameManager
         */
        ;

        _proto._createPlayer = function _createPlayer() {
          var _this3 = this;

          ResourceUtil.loadModelRes("player/player01").then(function (pf) {
            var _GameManager$mainCame, _GameManager$ndPlayer;

            GameManager.ndPlayer = PoolManager.instance.getNode(pf, _this3.node);
            var scriptGameCamera = (_GameManager$mainCame = GameManager.mainCamera) == null ? void 0 : _GameManager$mainCame.node.getComponent(GameCamera);
            scriptGameCamera.ndFollowTarget = GameManager.ndPlayer;
            var scriptPlayer = (_GameManager$ndPlayer = GameManager.ndPlayer) == null ? void 0 : _GameManager$ndPlayer.getComponent("Player");
            GameManager.scriptPlayer = scriptPlayer;
            scriptPlayer == null ? void 0 : scriptPlayer.init();
            scriptPlayer.preloadArrow(function () {
              ClientEvent.dispatchEvent(Constant.EVENT_TYPE.HIDE_LOADING_PANEL);
            });
          });
        }
        /**
         * 回收怪兽, 武器，特效等
         *
         * @private
         * @memberof GameManager
         */
        ;

        _proto._recycleAll = function _recycleAll() {
          this.scriptMapManager.recycle();

          for (var i = this.node.children.length - 1; i >= 0; i--) {
            var ndChild = this.node.children[i];

            if (ndChild.name !== "player01") {
              PoolManager.instance.putNode(ndChild);
            }
          }

          while (GameManager.ndEffectManager.children.length) {
            PoolManager.instance.putNode(GameManager.ndEffectManager.children[0]);
          }
        }
        /**
         * 游戏结束
         */
        ;

        _proto._onGameOver = function _onGameOver() {
          var _this4 = this;

          if (GameManager.isGameOver) {
            return;
          }

          GameManager.isGamePause = true;
          console.log("game over!", "isWin ?", GameManager.isWin);

          if (GameManager.isWin) {
            ViewMgr.ins.hide(ModuleName.Fight, MediatorName.FightHud);
            GameManager.isGameOver = true;

            this._recycleAll();

            var playerProxy = facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
            playerProxy.nextLevel();
            ClientEvent.dispatchEvent(Constant.EVENT_TYPE.ON_GAME_INIT);
          } else {
            ViewMgr.ins.show(ModuleName.Fight, MediatorName.FightRevive, function () {
              if (GameManager.ndPlayer) {
                PoolManager.instance.putNode(GameManager.ndPlayer);
                GameManager.ndPlayer = null;
                GameManager.scriptPlayer = null;
              }

              _this4._recycleAll();
            });
          }
        }
        /**
         * 游戏暂停
         */
        ;

        _proto._onGamePause = function _onGamePause() {
          GameManager.isGamePause = true;
        }
        /**
         * 获取距离最近的小怪、boss节点
         * @returns
         */
        ;

        GameManager.getNearestMonster = function getNearestMonster() {
          if (GameManager.arrMonster.length) {
            var arr = GameManager.arrMonster.sort(function (a, b) {
              var distanceA = Util.getTwoNodeXZLength(GameManager.ndPlayer, a);
              var distanceB = Util.getTwoNodeXZLength(GameManager.ndPlayer, b);
              return distanceA - distanceB;
            });
            arr = arr.filter(function (item) {
              var scriptMonster = item.getComponent("Monster");
              return item.parent !== null && !scriptMonster.isDie;
            });
            return arr[0];
          } else {
            return null;
          }
        }
        /**
         * 获取除了怪物本身自己外一定范围内的怪物
         *
         * @static
         * @param {Node} ndMonster 被击中的敌人
         * @param {boolean} [isAll=false] 是否返回全部敌人,否则只随机返回一个
         * @param {number} [range=5] 范围
         * @return {*}
         * @memberof GameManager
         */
        ;

        GameManager.getNearbyMonster = function getNearbyMonster(ndMonster, isAll, range) {
          if (isAll === void 0) {
            isAll = false;
          }

          if (range === void 0) {
            range = 7;
          } //范围


          var arrMonster = [];

          if (GameManager.arrMonster.length) {
            arrMonster = GameManager.arrMonster.concat();
          }

          arrMonster = arrMonster.filter(function (item) {
            var scriptMonster = item.getComponent("Monster");
            var length = Util.getTwoNodeXZLength(GameManager.ndPlayer, item);
            return item.parent !== null && !scriptMonster.isDie && length <= range && ndMonster.worldPosition !== item.worldPosition;
          });

          if (arrMonster.length) {
            if (!isAll) {
              var index = Math.floor(Math.random() * arrMonster.length);
              return arrMonster = arrMonster.filter(function (ndChild, idx) {
                return idx === index;
              });
            } else {
              return arrMonster;
            }
          } else {
            return arrMonster;
          }
        }
        /**
         * 刷新节点下的动画、粒子播放速度
         * @param targetNode
         * @param value
         * @returns
         */
        ;

        GameManager.refreshEffectSpeed = function refreshEffectSpeed(targetNode, value) {
          if (!targetNode) {
            return;
          }

          var arrAni = targetNode.getComponentsInChildren(AnimationComponent);
          arrAni.forEach(function (item) {
            item.clips.forEach(function (clip) {
              var aniName = clip == null ? void 0 : clip.name;
              var aniState = item.getState(aniName);
              aniState.speed = value;
            });
          });
          var arrSkeletalAni = targetNode.getComponentsInChildren(SkeletalAnimationComponent);
          arrSkeletalAni.forEach(function (item) {
            item.clips.forEach(function (clip) {
              var aniName = clip == null ? void 0 : clip.name;
              var aniState = item.getState(aniName);
              aniState.speed = value;
            });
          });
          var arrParticle = targetNode.getComponentsInChildren(ParticleSystemComponent);
          arrParticle.forEach(function (item) {
            item.simulationSpeed = value;
          });
        }
        /**
         * 添加金币
         *
         * @static
         * @param {number} [value=1]
         * @memberof GameManager
         */
        ;

        GameManager.addGold = function addGold(value) {
          if (value === void 0) {
            value = 1;
          }

          var playerProxy = facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
          playerProxy.addGold(Math.ceil(value));
          ClientEvent.dispatchEvent(Constant.EVENT_TYPE.REFRESH_GOLD);
        }
        /**
         * 每层进入前预加载该层所需的敌人技能
         *
         * @private
         * @memberof GameManager
         */
        ;

        _proto.preloadMonsterSkill = function preloadMonsterSkill(mapName) {
          var _this5 = this;

          return new Promise(function (resolve, reject) {
            var arrLoadSkill = []; //等待预加载的技能

            var arrInfo = ConfigUtils.getTableArr(mapName); //获取所有敌人信息

            arrInfo = arrInfo.filter(function (item) {
              return item.id.startsWith("2");
            }); //获得敌人技能列表

            if (arrInfo.length) {
              var arrSkill = [];
              arrInfo.forEach(function (element) {
                arrSkill = arrSkill.concat(element.skill == null ? [] : element.skill.split("#"));
              });
              arrSkill.length && arrSkill.forEach(function (id) {
                if (!_this5._dictMonsterSkill[id]) {
                  arrLoadSkill.push(id);
                  _this5._dictMonsterSkill[id] = {
                    num: 1
                  };
                } else {
                  var arr = arrSkill.filter(function (itemId) {
                    return itemId === id;
                  });

                  if (arr.length > _this5._dictMonsterSkill[id].num) {
                    arrLoadSkill.push(id);
                    _this5._dictMonsterSkill[id].num += 1;
                  }
                }
              });
              var arrPromise = []; // console.log("需要预加载的技能数组", arrLoadSkill, "已经预加载的敌人技能", this._dictMonsterSkill);

              if (arrLoadSkill.length) {
                for (var i = 0; i < arrLoadSkill.length; i++) {
                  var element = arrLoadSkill[i]; //预加载敌人技能

                  var skillInfo = ConfigUtils.queryByID("monsterSkill", element);
                  var p = ResourceUtil.loadEffectRes(skillInfo.resName + "/" + skillInfo.resName).then(function (prefab) {
                    var ndSkillCollider = PoolManager.instance.getNode(prefab, GameManager.ndGameManager);
                    ndSkillCollider.setWorldPosition(_this5.node.worldPosition.x, 30, _this5.node.worldPosition.z);
                  });
                  arrPromise.push(p);
                }

                Promise.all(arrPromise).then(function () {
                  resolve(null);
                })["catch"](function (e) {
                  console.error("预加载敌人技能报错", e);
                });
              } else {
                resolve(null);
              }
            } else {
              resolve(null);
            }
          });
        }
        /**
         * 判断本层的爱心、npc是否都已经触发
         *
         * @static
         * @memberof GameManager
         */
        ;

        GameManager.checkTriggerAll = function checkTriggerAll() {
          GameManager.existentNum -= 1;

          if (GameManager.existentNum <= 0) {
            ClientEvent.dispatchEvent(Constant.EVENT_TYPE.SHOW_WARP_GATE);
          }
        }
        /**
         * 预加载弓箭特效
         *
         * @static
         * @param {number} num
         * @returns
         * @memberof GameManager
         */
        ;

        GameManager.preloadArrowEffects = function preloadArrowEffects(num) {
          return new Promise(function (resolve, reject) {
            ResourceUtil.loadDirRes("prefab/effect/arrow", Prefab, function (err, pfs) {
              if (err) {
                console.error(err);
                reject(err);
              } else {
                pfs.forEach(function (pf) {
                  PoolManager.instance.preloadPool(pf, num);
                });
                resolve(null);
              }
            });
          });
        }
        /**
         * 预加载箭
         *
         * @static
         * @param {string} arrowName
         * @param {number} num
         * @memberof GameManager
         */
        ;

        GameManager.preloadArrow = function preloadArrow(arrowName, num) {
          ResourceUtil.loadModelRes("weapon/arrow/" + arrowName).then(function (prefab) {
            PoolManager.instance.preloadPool(prefab, num);
          });
        }
        /**
         * 展示奖励(金币、爱心)弹跳
         *
         * @param {Node} ndMonster
         * @param {string} modelPath
         * @param {number} [rewardNum=1]
         * @param {Function} [callback=()=>{}]
         * @memberof EffectManager
         */
        ;

        GameManager.showRewardBounce = function showRewardBounce(ndMonster, modelPath, rewardNum, callback) {
          if (rewardNum === void 0) {
            rewardNum = 1;
          }

          if (callback === void 0) {
            callback = function callback() {};
          }

          var time = rewardNum <= 10 ? 0.15 : 0.07;
          ResourceUtil.loadModelRes(modelPath).then(function (pf) {
            for (var i = 0; i < rewardNum; i++) {
              var ndReward = PoolManager.instance.getNode(pf, GameManager.ndEffectManager);
              ndReward.setWorldPosition(ndMonster.worldPosition.x, 1.65, ndMonster.worldPosition.z);
              ndReward.active = false;
              var scriptReward = ndReward.getComponent("Reward");
              scriptReward.init((i + 1) * time, GameManager.ndEffectManager);
            }

            callback && callback();
          });
        };

        _proto.update = function update(deltaTime) {
          //光源跟随玩家人物移动
          if (GameManager.scriptPlayer && GameManager.scriptPlayer.node && !GameManager.isGameOver) {
            Vec3.subtract(this._offsetWorPosMainLight, GameManager.ndPlayer.worldPosition, this._oriMainLightWorPos);

            this._offsetWorPosMainLight.set(this._offsetWorPosMainLight.x, 0, this._offsetWorPosMainLight.z);

            this.ndLight.setWorldPosition(this._offsetWorPosMainLight.add(this._oriMainLightWorPos));
          }
        };

        _createClass(GameManager, [{
          key: "scriptMapManager",
          get: function get() {
            return this._scriptMapManager;
          },
          set: //主光源
          function set(v) {
            this._scriptMapManager = v;
          }
        }, {
          key: "mapInfo",
          get: function get() {
            return this._mapInfo;
          },
          set: function set(v) {
            this._mapInfo = v;
          }
        }], [{
          key: "mainCamera",
          get: function get() {
            return this._mainCamera;
          },
          set: function set(v) {
            this._mainCamera = v;
          }
        }, {
          key: "isGameStart",
          get: function get() {
            return this._isGameStart;
          },
          set: function set(v) {
            this._isGameStart = v;
          }
        }, {
          key: "isGamePause",
          get: function get() {
            return this._isGamePause;
          },
          set: function set(v) {
            this._isGamePause = v;
          }
        }, {
          key: "isGameOver",
          get: function get() {
            return this._isGameOver;
          },
          set: function set(v) {
            this._isGameOver = v;
          }
        }, {
          key: "scriptPlayer",
          get: function get() {
            return this._scriptPlayer;
          },
          set: function set(v) {
            this._scriptPlayer = v;
          }
        }, {
          key: "scriptGameCamera",
          get: function get() {
            return this._scriptGameCamera;
          },
          set: function set(v) {
            this._scriptGameCamera = v;
          }
        }, {
          key: "ndPlayer",
          get: function get() {
            return this._ndPlayer;
          },
          set: function set(v) {
            this._ndPlayer = v;
          }
        }, {
          key: "ndBoss",
          get: function get() {
            return this._ndBoss;
          },
          set: function set(v) {
            this._ndBoss = v;
          }
        }, {
          key: "scriptBoss",
          get: function get() {
            return this._scriptBoss;
          },
          set: function set(v) {
            this._scriptBoss = v;
          }
        }, {
          key: "ndGameManager",
          get: function get() {
            return this._ndGameManager;
          },
          set: function set(v) {
            this._ndGameManager = v;
          }
        }, {
          key: "ndEffectManager",
          get: function get() {
            return this._ndEffectManager;
          },
          set: function set(v) {
            this._ndEffectManager = v;
          }
        }, {
          key: "ndMapManager",
          get: function get() {
            return this._ndMapManager;
          },
          set: function set(v) {
            this._ndMapManager = v;
          }
        }, {
          key: "isRevive",
          get: function get() {
            return this._isRevive;
          },
          set: function set(v) {
            this._isRevive = v;
          }
        }, {
          key: "isTesting",
          get: function get() {
            return this._isTesting;
          },
          set: function set(v) {
            this._isTesting = v;
          }
        }, {
          key: "arrMonster",
          get: function get() {
            return this._arrMonster;
          },
          set: function set(v) {
            this._arrMonster = v;
          }
        }, {
          key: "existentNum",
          get: function get() {
            return this._existentNum;
          },
          set: function set(v) {
            this._existentNum = v;
          }
        }, {
          key: "attackAddition",
          get: function get() {
            return this._attackAddition;
          },
          set: function set(v) {
            this._attackAddition = v;
          }
        }, {
          key: "defenseAddition",
          get: function get() {
            return this._defenseAddition;
          },
          set: function set(v) {
            this._defenseAddition = v;
          }
        }, {
          key: "hpAddition",
          get: function get() {
            return this._hpAddition;
          },
          set: function set(v) {
            this._hpAddition = v;
          }
        }, {
          key: "moveSpeedAddition",
          get: function get() {
            return this._moveSpeedAddition;
          },
          set: function set(v) {
            this._moveSpeedAddition = v;
          }
        }, {
          key: "attackSpeedAddition",
          get: function get() {
            return this._attackSpeedAddition;
          },
          set: function set(v) {
            this._attackSpeedAddition = v;
          }
        }, {
          key: "isWin",
          get: function get() {
            return this._isWin;
          },
          set: function set(value) {
            this._isWin = value;

            if (GameManager.isGameStart) {
              ClientEvent.dispatchEvent(Constant.EVENT_TYPE.ON_GAME_OVER);
            }
          }
        }, {
          key: "gameSpeed",
          get: function get() {
            return this._gameSpeed;
          },
          set: function set(value) {
            console.log("gameSpeed", GameManager.gameSpeed);
            this._gameSpeed = value;
            GameManager.refreshEffectSpeed(GameManager.ndGameManager, this._gameSpeed);
            GameManager.refreshEffectSpeed(GameManager.ndPlayer, this._gameSpeed);
            GameManager.refreshEffectSpeed(GameManager.ndEffectManager, this._gameSpeed);
          }
        }]);

        return GameManager;
      }(Component), _class3._gameSpeed = 1, _class3._isWin = false, _class3._mainCamera = null, _class3._isGameStart = false, _class3._isGamePause = false, _class3._isGameOver = false, _class3._scriptPlayer = null, _class3._scriptGameCamera = void 0, _class3._ndPlayer = null, _class3._ndBoss = null, _class3._scriptBoss = null, _class3._ndGameManager = void 0, _class3._ndEffectManager = null, _class3._ndMapManager = null, _class3._isRevive = false, _class3._isTesting = true, _class3._arrMonster = [], _class3._existentNum = 0, _class3._attackAddition = 1, _class3._defenseAddition = 1, _class3._hpAddition = 1, _class3._moveSpeedAddition = 1, _class3._attackSpeedAddition = 1, _class3), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "camera", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ndLight", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameModule.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './GameProxy.ts', './ModuleType.ts', './Module.ts'], function (exports) {
  var _inheritsLoose, cclegacy, GameProxy, ProxyName, ModuleName, Module;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      GameProxy = module.GameProxy;
    }, function (module) {
      ProxyName = module.ProxyName;
      ModuleName = module.ModuleName;
    }, function (module) {
      Module = module.Module;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f0c85WAQVxGO4ReUuz0undO", "GameModule", undefined);

      var GameModule = exports('GameModule', /*#__PURE__*/function (_Module) {
        _inheritsLoose(GameModule, _Module);

        function GameModule() {
          return _Module.call(this, ModuleName.Game) || this;
        }

        var _proto = GameModule.prototype;

        _proto.initializeCommands = function initializeCommands() {// this.registerCommand(CommandEvent., );
        };

        _proto.initializeProxys = function initializeProxys() {
          this.registerProxy(ProxyName.Game, GameProxy);
        };

        _proto.initializeMediators = function initializeMediators() {// this.registerMediator(MediatorName., );
        };

        return GameModule;
      }(Module));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/GameProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './GameData.ts', './ModuleType.ts', './Proxy.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, GameData, ProxyName, Proxy;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      GameData = module.GameData;
    }, function (module) {
      ProxyName = module.ProxyName;
    }, function (module) {
      Proxy = module.Proxy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "cb09c4iTexIzaEMQaYnVBNz", "GameProxy", undefined);

      var GameProxy = exports('GameProxy', /*#__PURE__*/function (_DDProxy) {
        _inheritsLoose(GameProxy, _DDProxy);

        function GameProxy() {
          return _DDProxy.call(this, ProxyName.Game, new GameData()) || this;
        }

        var _proto = GameProxy.prototype;

        _proto.enableAudio = function enableAudio() {
          this._data.audioEnabled = !this._data.audioEnabled;
        };

        _proto.enableDebug = function enableDebug() {
          this._data.debugEnabled = !this._data.debugEnabled;
        };

        _proto.enableVibration = function enableVibration() {
          this._data.vibrationEnabled = !this._data.vibrationEnabled;
        }
        /**
         * 获取音频设置
         * @param isMusic
         * @returns
         */
        ;

        _proto.getAudioSetting = function getAudioSetting(isMusic) {
          return isMusic ? this._data.music : this._data.sound;
        };

        _proto.switchAudioSetting = function switchAudioSetting(enabled) {
          this._data.music = enabled;
          this._data.sound = enabled;
        };

        _createClass(GameProxy, [{
          key: "frameRate",
          get: function get() {
            return this._data.frameRate;
          },
          set: function set(v) {
            this._data.frameRate = v;
          }
        }, {
          key: "audioEnabled",
          get: function get() {
            return this._data.audioEnabled;
          }
        }, {
          key: "debugEnabled",
          get: function get() {
            return this._data.debugEnabled;
          }
        }, {
          key: "vibrationEnabled",
          get: function get() {
            return this._data.vibrationEnabled;
          }
        }, {
          key: "mainVolume",
          get: function get() {
            return this._data.mainVolume;
          }
        }, {
          key: "soundVolume",
          get: function get() {
            return this._data.soundVolume;
          }
        }, {
          key: "musicVolume",
          get: function get() {
            return this._data.musicVolume;
          }
        }, {
          key: "environmentalVolume",
          get: function get() {
            return this._data.environmentalVolume;
          }
        }]);

        return GameProxy;
      }(Proxy));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Home.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts', './Constant2.ts', './LanguageData.ts', './PureMVC.ts', './clientEvent.ts', './PlayerProxy.ts', './ModuleType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, Color, _decorator, Label, Node, Sprite, Vec3, Component, Constant, _language, _init, _updateSceneRenderers, facade, ClientEvent, PlayerProxy, ModuleName, ProxyName, MediatorName;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Color = module.Color;
      _decorator = module._decorator;
      Label = module.Label;
      Node = module.Node;
      Sprite = module.Sprite;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      Constant = module.Constant;
    }, null, function (module) {
      _language = module._language;
      _init = module.init;
      _updateSceneRenderers = module.updateSceneRenderers;
    }, function (module) {
      facade = module.facade;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      PlayerProxy = module.PlayerProxy;
    }, function (module) {
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
      MediatorName = module.MediatorName;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "c1a4buxj0ZJl7nC/0k3mAJR", "Home", undefined);

      var LANGUAGE_LABEL_COLOR = {
        NONE: new Color(255, 255, 255),
        CHOOSE: new Color(226, 129, 24)
      };
      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property; //主界面脚本

      var Home = exports('Home', (_dec = ccclass("Home"), _dec2 = menu("_game/module/Home"), _dec3 = property(Label), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(Sprite), _dec7 = property(Label), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Home, _Component);

        function Home() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "languageZhLabel", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "languageEnLabel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "dotNode", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spLevelName", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbLevel", _descriptor5, _assertThisInitialized(_this));

          _this._curDotPos = new Vec3(); //当前选中点的位置

          _this._mediator = null;
          return _this;
        }

        var _proto = Home.prototype;

        _proto.onLoad = function onLoad() {
          var proxy = facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
          this.lbLevel.string = PlayerProxy.idToString(proxy.playerInfo.highestLevel);
          this.initLanguage();
        };

        _proto.initLanguage = function initLanguage() {
          var ndDotPos = this.dotNode.position;

          if (_language === Constant.I18_LANGUAGE.ENGLISH) {
            this._curDotPos.set(27, ndDotPos.y, ndDotPos.z);

            this.dotNode.setPosition(this._curDotPos);
            this.languageZhLabel.color = LANGUAGE_LABEL_COLOR.NONE;
            this.languageEnLabel.color = LANGUAGE_LABEL_COLOR.CHOOSE;
          } else {
            this._curDotPos.set(-27, ndDotPos.y, ndDotPos.z);

            this.dotNode.setPosition(this._curDotPos);
            this.languageZhLabel.color = LANGUAGE_LABEL_COLOR.CHOOSE;
            this.languageEnLabel.color = LANGUAGE_LABEL_COLOR.NONE;
          }
        };

        _proto.onBtnSettingClick = function onBtnSettingClick() {
          this.mediator.getModule().showView(MediatorName.Setting);
        };

        _proto.onBtnStartClick = function onBtnStartClick() {
          ClientEvent.dispatchEvent(Constant.EVENT_TYPE.ON_GAME_INIT);
        };

        _proto.onBtnChangeLanguage = function onBtnChangeLanguage() {
          var ndDotPos = this.dotNode.position;
          var nowLanguage;

          if (_language === Constant.I18_LANGUAGE.CHINESE) {
            nowLanguage = Constant.I18_LANGUAGE.ENGLISH;

            this._curDotPos.set(27, ndDotPos.y, ndDotPos.z);

            this.dotNode.setPosition(this._curDotPos);
            this.languageZhLabel.color = LANGUAGE_LABEL_COLOR.NONE;
            this.languageEnLabel.color = LANGUAGE_LABEL_COLOR.CHOOSE;
          } else {
            nowLanguage = Constant.I18_LANGUAGE.CHINESE;

            this._curDotPos.set(-27, ndDotPos.y, ndDotPos.z);

            this.dotNode.setPosition(this._curDotPos);
            this.languageZhLabel.color = LANGUAGE_LABEL_COLOR.CHOOSE;
            this.languageEnLabel.color = LANGUAGE_LABEL_COLOR.NONE;
          }

          _init(nowLanguage);

          _updateSceneRenderers();
        };

        _createClass(Home, [{
          key: "mediator",
          get: function get() {
            return this._mediator;
          },
          set: function set(m) {
            this._mediator = m;
          }
        }]);

        return Home;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "languageZhLabel", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "languageEnLabel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "dotNode", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "spLevelName", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "lbLevel", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HomeMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './Home.ts', './Mediator.ts', './ModuleType.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Home, Mediator, ModuleName, MediatorName, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      Home = module.Home;
    }, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      ModuleName = module.ModuleName;
      MediatorName = module.MediatorName;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8b8edbGuJdBo4qa7IGDsFCC", "HomeMediator", undefined);
      /**
       * File: HomeMediator
       * Description: 
       * Created on: 2024-11-13 10:09:40
       */


      var HomeMediator = exports('HomeMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(HomeMediator, _Mediator);

        function HomeMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UI;
          _this._skin = "home/homePanel";
          return _this;
        }

        var _proto = HomeMediator.prototype;

        _proto.onInit = function onInit() {
          _Mediator.prototype.onInit.call(this);

          var home = this.getComponent(Home);
          home.mediator = this;
        };

        _proto.onShow = function onShow(param) {
          _Mediator.prototype.onShow.call(this);
        };

        _proto.addListeners = function addListeners() {
          _Mediator.prototype.addListeners.call(this);

          this.on(Mediator.showEvent(ModuleName.Fight, MediatorName.FightLoading), this.hide, this);
        };

        _proto.removeListeners = function removeListeners() {
          _Mediator.prototype.removeListeners.call(this);

          this.off(Mediator.showEvent(ModuleName.Fight, MediatorName.FightLoading), this);
        };

        _proto.onHide = function onHide() {
          _Mediator.prototype.onHide.call(this);
        };

        return HomeMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HomeModule.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './HomeMediator.ts', './SettingMediator.ts', './ModuleType.ts', './Module.ts'], function (exports) {
  var _inheritsLoose, cclegacy, HomeMediator, SettingMediator, MediatorName, ModuleName, Module;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      HomeMediator = module.HomeMediator;
    }, function (module) {
      SettingMediator = module.SettingMediator;
    }, function (module) {
      MediatorName = module.MediatorName;
      ModuleName = module.ModuleName;
    }, function (module) {
      Module = module.Module;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a6a33LN3gFO9KNpTiXlbwpu", "HomeModule", undefined);

      var HomeModule = exports('HomeModule', /*#__PURE__*/function (_Module) {
        _inheritsLoose(HomeModule, _Module);

        function HomeModule() {
          return _Module.call(this, ModuleName.Home) || this;
        }

        var _proto = HomeModule.prototype;

        _proto.initializeCommands = function initializeCommands() {// this.registerCommand(CommandEvent., );
        };

        _proto.initializeProxys = function initializeProxys() {// this.registerProxy(ProxyName., );
        };

        _proto.initializeMediators = function initializeMediators() {
          this.registerMediator(MediatorName.Home, HomeMediator);
          this.registerMediator(MediatorName.Setting, SettingMediator);
        };

        return HomeModule;
      }(Module));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/HttpRequest.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createForOfIteratorHelperLoose, cclegacy, warn;

  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      warn = module.warn;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ec855J8QohN0ILW+iMDZzD5", "HttpRequest", undefined);
      /**
       * 使用流程文档可参考、简化与服务器对接、使用新版API体验，可进入下面地址获取新版本，替换network目录中的内容
       * https://store.cocos.com/app/detail/5877
       */

      /** 当前请求地址集合 */


      var urls = {};
      /** 请求参数 */

      var reqparams = {};
      /** 请求事件 */

      var HttpEvent = exports('HttpEvent', /*#__PURE__*/function (HttpEvent) {
        HttpEvent["NO_NETWORK"] = "http_request_no_network";
        HttpEvent["UNKNOWN_ERROR"] = "http_request_unknown_error";
        HttpEvent["TIMEOUT"] = "http_request_timout";
        return HttpEvent;
      }({}));
      /**
       * HTTP请求返回值
       */

      var HttpReturn = exports('HttpReturn', function HttpReturn() {
        /** 是否请求成功 */
        this.isSucc = false;
        /** 请求返回数据 */

        this.res = void 0;
        /** 请求错误数据 */

        this.err = void 0;
      });
      /** HTTP请求 */

      var HttpRequest = exports('HttpRequest', /*#__PURE__*/function () {
        function HttpRequest() {
          /** 服务器地址 */
          // server: string = "http://127.0.0.1/";
          this.server = "http://192.168.0.108:7101";
          /** 请求超时时间 */

          this.timeout = 10000;
          /** 自定义请求头信息 */

          this.header = new Map();
        }

        var _proto = HttpRequest.prototype;
        /**
         * 添加自定义请求头信息
         * @param name  信息名
         * @param value 信息值
         */

        _proto.addHeader = function addHeader(name, value) {
          this.header.set(name, value);
        }
        /**
         * HTTP GET请求
         * @param name                  协议名
         * @param onComplete            请求完整回调方法
         * @param params                查询参数
         * @example
        var param = '{"uid":12345}'
        var complete = (ret: HttpReturn) => {
            console.log(ret.res);
        }
        oops.http.getWithParams(name, complete, param);
         */
        ;

        _proto.get = function get(name, onComplete, params) {
          if (params === void 0) {
            params = null;
          }

          this.sendRequest(name, params, false, onComplete);
        }
        /**
         * HTTP GET请求
         * @param name                  协议名
         * @param params                查询参数
         * @example 
        var txt = await oops.http.getAsync(name);
        if (txt.isSucc) {
            console.log(txt.res);
        }
         */
        ;

        _proto.getAsync = function getAsync(name, params) {
          var _this = this;

          if (params === void 0) {
            params = null;
          }

          return new Promise(function (resolve, reject) {
            _this.sendRequest(name, params, false, function (ret) {
              resolve(ret);
            });
          });
        }
        /**
         * HTTP GET请求非文本格式数据
         * @param name                  协议名
         * @param onComplete            请求完整回调方法
         * @param params                查询参数
         */
        ;

        _proto.getByArraybuffer = function getByArraybuffer(name, onComplete, params) {
          if (params === void 0) {
            params = null;
          }

          this.sendRequest(name, params, false, onComplete, 'arraybuffer', false);
        }
        /**
         * HTTP GET请求非文本格式数据
         * @param name                  协议名
         * @param params                查询参数
         * @returns Promise<any>
         */
        ;

        _proto.getAsyncByArraybuffer = function getAsyncByArraybuffer(name, params) {
          var _this2 = this;

          if (params === void 0) {
            params = null;
          }

          return new Promise(function (resolve, reject) {
            _this2.sendRequest(name, params, false, function (ret) {
              resolve(ret);
            }, 'arraybuffer', false);
          });
        }
        /**
         * HTTP POST请求
         * @param name                  协议名
         * @param params                查询参数
         * @param onComplete      请求完整回调方法
         * @example
        var param = '{"LoginCode":"donggang_dev","Password":"e10adc3949ba59abbe56e057f20f883e"}'
        var complete = (ret: HttpReturn) => {
            console.log(ret.res);
        }
        oops.http.post(name, complete, param);
         */
        ;

        _proto.post = function post(name, onComplete, params) {
          if (params === void 0) {
            params = null;
          }

          this.sendRequest(name, params, true, onComplete);
        }
        /**
         * HTTP POST请求
         * @param name                  协议名
         * @param params                查询参数
         */
        ;

        _proto.postAsync = function postAsync(name, params) {
          var _this3 = this;

          if (params === void 0) {
            params = null;
          }

          return new Promise(function (resolve, reject) {
            _this3.sendRequest(name, params, true, function (ret) {
              resolve(ret);
            });
          });
        }
        /**
         * 取消请求中的请求
         * @param name     协议名
         */
        ;

        _proto.abort = function abort(name) {
          var xhr = urls[this.server + name];

          if (xhr) {
            xhr.abort();
          }
        }
        /**
         * 获得字符串形式的参数
         * @param params 参数对象
         * @returns 参数字符串
         */
        ;

        _proto.getParamString = function getParamString(params) {
          var result = "";

          for (var name in params) {
            var data = params[name];

            if (data instanceof Object) {
              for (var key in data) result += key + "=" + data[key] + "&";
            } else {
              result += name + "=" + data + "&";
            }
          }

          return result.substring(0, result.length - 1);
        }
        /** 
         * Http请求 
         * @param name(string)              请求地址
         * @param params(JSON)              请求参数
         * @param isPost(boolen)            是否为POST方式
         * @param callback(function)        请求成功回调
         * @param responseType(string)      响应类型
         * @param isOpenTimeout(boolean)    是否触发请求超时错误
         */
        ;

        _proto.sendRequest = function sendRequest(name, params, isPost, onComplete, responseType, isOpenTimeout) {
          var _this4 = this;

          if (isOpenTimeout === void 0) {
            isOpenTimeout = true;
          } // if (name == null || name == '') {
          //     error("请求地址不能为空");
          //     return;
          // }


          var url,
              newUrl,
              paramsStr = "";

          if (name.toLocaleLowerCase().indexOf("http") == 0) {
            url = name;
          } else {
            url = this.server + name;
          }

          if (params) {
            paramsStr = this.getParamString(params);
            if (url.indexOf("?") > -1) newUrl = url + "&" + paramsStr;else newUrl = url + "?" + paramsStr;
          } else {
            newUrl = url;
          }

          if (urls[newUrl] != null && reqparams[newUrl] == paramsStr) {
            warn("\u5730\u5740\u3010" + url + "\u3011\u5DF2\u6B63\u5728\u8BF7\u6C42\u4E2D\uFF0C\u4E0D\u80FD\u91CD\u590D\u8BF7\u6C42");
            return;
          }

          var xhr = new XMLHttpRequest(); // 防重复请求功能

          urls[newUrl] = xhr;
          reqparams[newUrl] = paramsStr;

          if (isPost) {
            xhr.open("POST", url);
          } else {
            xhr.open("GET", newUrl);
            console.log("get------------> ", newUrl);
          } // 添加自定义请求头信息


          for (var _iterator = _createForOfIteratorHelperLoose(this.header), _step; !(_step = _iterator()).done;) {
            var _step$value = _step.value,
                key = _step$value[0],
                value = _step$value[1];
            xhr.setRequestHeader(key, value);
          } // xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded;charset=utf-8");
          // xhr.setRequestHeader("Content-Type", "application/json; charset=utf-8");


          var data = {};
          data.url = url;
          data.params = params; // 请求超时

          if (isOpenTimeout) {
            xhr.timeout = this.timeout;

            xhr.ontimeout = function () {
              _this4.deleteCache(newUrl);

              ret.isSucc = false;
              ret.err = HttpEvent.TIMEOUT; // 超时

              onComplete(data);
            };
          } // 响应结果


          var ret = new HttpReturn();

          xhr.onloadend = function () {
            if (xhr.status == 500) {
              _this4.deleteCache(newUrl);

              ret.isSucc = false;
              ret.err = HttpEvent.NO_NETWORK; // 断网

              onComplete(ret);
            }
          };

          xhr.onerror = function () {
            _this4.deleteCache(newUrl);

            ret.isSucc = false;

            if (xhr.readyState == 0 || xhr.readyState == 1 || xhr.status == 0) {
              ret.err = HttpEvent.NO_NETWORK; // 断网
            } else {
              ret.err = HttpEvent.UNKNOWN_ERROR; // 未知错误
            }

            onComplete(ret);
          };

          xhr.onreadystatechange = function () {
            if (xhr.readyState != 4) return;

            _this4.deleteCache(newUrl);

            if (xhr.status == 200 && onComplete) {
              ret.isSucc = true;

              if (responseType == 'arraybuffer') {
                xhr.responseType = responseType; // 加载非文本格式

                ret.res = xhr.response;
              } else {
                ret.res = JSON.parse(xhr.response);
              }

              onComplete(ret);
            }
          }; // 发送请求


          if (params == null || params == "") {
            xhr.send();
          } else {
            xhr.send(paramsStr);
          }
        };

        _proto.deleteCache = function deleteCache(url) {
          delete urls[url];
          delete reqparams[url];
        };

        return HttpRequest;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ICommand.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1115fqW7KFLuY0MCvqUojtN", "ICommand", undefined);
      /** @public */

      /** @public */


      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IController.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6cb9b9mppFM7pF5dXMjxA6t", "IController", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IData.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9d56aYxfkJJnJFSpwhwHZ0B", "IData", undefined);
      /** @public */


      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IFacade.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1bc973YTTJCLov5hLmvV/Ow", "IFacade", undefined);
      /** @public */


      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ILocalStoragePacker.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1301aypBLJOA5cJLezC3YqK", "ILocalStoragePacker", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IMediator.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d433bowji9Jr7YHgO4Yobl4", "IMediator", undefined);
      /** @public */


      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IModel.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "40814oTnj9KkL/H6N3rAaHU", "IModel", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IModule.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2056ecsYTdL45HHgwPdLkD/", "IModule", undefined);
      /** @public */


      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/INotification.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "4cccctTs+5IzrK0j2ddmEfr", "INotification", undefined);
      /** @public */


      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/INotifier.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "6c2fa7W25hDQ72D0o0DFVLk", "INotifier", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IObserver.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "77997EuyyJKtqCbWHdfo4b2", "IObserver", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IProxy.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "49807K+LFJKjLwh08t9h46F", "IProxy", undefined);
      /** @public */


      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/IViewComponent.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e07a42C7VtN+ofcILO6/B7C", "IViewComponent", undefined);
      /** @public */


      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/jetFires.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Component;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "20cb3raNbRA/YYlE7ckG1Nj", "jetFires", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //直线范围型的火焰

      var JetFires = exports('JetFires', (_dec = ccclass('JetFires'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(JetFires, _Component);

        function JetFires() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._baseInfo = null; //敌人基本信息

          _this._skillInfo = null;
          return _this;
        }

        var _proto = JetFires.prototype; //技能信息

        _proto.start = function start() {// [3]
        };

        _proto.init = function init(skillInfo, baseInfo, scriptParent) {
          this.skillInfo = skillInfo;
          this.baseInfo = baseInfo;
        } // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        _createClass(JetFires, [{
          key: "baseInfo",
          get: function get() {
            return this._baseInfo;
          },
          set: function set(v) {
            this._baseInfo = v;
          }
        }, {
          key: "skillInfo",
          get: function get() {
            return this._skillInfo;
          },
          set: function set(v) {
            this._skillInfo = v;
          }
        }]);

        return JetFires;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/joystick.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts', './gameManager.ts', './clientEvent.ts', './PureMVC.ts', './Constant2.ts', './ModuleType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Enum, view, Node, Vec3, UITransform, Component, Constant, GameManager, ClientEvent, facade, ModuleName, ProxyName;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      view = module.view;
      Node = module.Node;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      facade = module.facade;
    }, null, function (module) {
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8;

      cclegacy._RF.push({}, "ce11cUqRdBM+6FZLQY6qG6q", "joystick", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //触摸类型

      var TOUCH_TYPE = Enum({
        DEFAULT: 0,
        //按钮和背景距离不变，背景位置与触碰点一致，不可改变按钮背景位置，按钮背景随着按钮移动而移动，松手后无法恢复到初始位置
        FOLLOW: 1,
        //按钮和背景距离不变，背景位置与触碰点一致，不可改变按钮背景位置，按钮背景随着按钮移动而移动，松手后恢复到初始位置
        FOLLOW_ALWAYS: 2,
        //按钮和背景距离不变，背景位置与触碰点一致，可改变按钮背景位置，按钮背景随着按钮移动而移动，松手后恢复到初始位置
        FOLLOW_DOT: 3 //按钮和背景距离可改变，按钮位置与触碰点可不一致，不可改变按钮背景位置，按钮背景不随着按钮移动而移动，松手后恢复到初始位置

      }); //方向

      var DIRECTION_TYPE = Enum({
        FOUR: 4,
        EIGHT: 8,
        ALL: 0
      });
      var screenHeight = view.getVisibleSize().height; //屏幕可视范围高度

      var Joystick = exports('Joystick', (_dec = ccclass("Joystick"), _dec2 = property({
        type: Node,
        displayName: '摇杆背景节点'
      }), _dec3 = property({
        type: Node,
        displayName: '摇杆节点'
      }), _dec4 = property({
        type: TOUCH_TYPE,
        displayName: '触摸类型'
      }), _dec5 = property({
        type: DIRECTION_TYPE,
        displayName: '方向类型'
      }), _dec6 = property({
        displayName: '启动半透明'
      }), _dec7 = property({
        displayName: '点击跟随'
      }), _dec8 = property({
        displayName: '内圈大小'
      }), _dec9 = property(Node), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Joystick, _Component);

        function Joystick() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ndRing", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ndDot", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "touchType", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "directionType", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isEnableTransparent", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "isFollowStart", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "innerSize", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ndTip", _descriptor8, _assertThisInitialized(_this));

          _this._angle = 0; //当前的角度

          _this._oriRingPos = null; //圆圈初始位置

          _this._targetRingPos = new Vec3(); //圆圈背景位置

          _this._touchStartLocation = new Vec3(); //开始触碰位置

          _this._touchMoveLocation = new Vec3(); //移动触碰位置

          _this._touchEndLocation = new Vec3(); //结束触碰位置

          _this._isOutInnerSize = false; //终点拖动的点是否超出按钮圆圈背景

          _this._distanceRate = 0; //遥感移动距离比

          _this._checkInterval = 0.04; //每40ms刷新一次

          _this._oldAngle = 0; //之前的角度

          _this._currentTime = 0; //当前累积时间

          _this._oriDotPos = new Vec3(); //中间按钮初始坐标

          _this._movePos = new Vec3(); //移动坐标

          _this._curRingPos_1 = new Vec3(); //当前圆圈坐标

          _this._curRingPos_2 = new Vec3(); //

          _this._onClickCb = null;
          _this._onEndCb = null;
          _this._clearFECb = null;
          _this._onBeginFECb = null;
          _this._onSuccessFECb = null;
          _this._isMoving = false;
          return _this;
        }

        var _proto = Joystick.prototype; //是否正在移动

        _proto.start = function start() {
          var playerProxy = facade.retrieveProxy(ModuleName.Player, ProxyName.Player);

          if (playerProxy.playerInfo.levelId > 1 && this.ndTip.active) {
            this.ndTip.active = false;
          }
        };

        _proto.onEnable = function onEnable() {
          this.node.on(Node.EventType.TOUCH_START, this._touchStartEvent, this);
          this.node.on(Node.EventType.TOUCH_MOVE, this._touchMoveEvent, this); // 触摸在圆圈内离开或在圆圈外离开后，摇杆归位，player速度为0

          this.node.on(Node.EventType.TOUCH_END, this._touchEndEvent, this);
          this.node.on(Node.EventType.TOUCH_CANCEL, this._touchEndEvent, this);
        };

        _proto.onDisable = function onDisable() {
          this.node.off(Node.EventType.TOUCH_START, this._touchStartEvent, this);
          this.node.off(Node.EventType.TOUCH_MOVE, this._touchMoveEvent, this); // 触摸在圆圈内离开或在圆圈外离开后，摇杆归位，player速度为0

          this.node.off(Node.EventType.TOUCH_END, this._touchEndEvent, this);
          this.node.off(Node.EventType.TOUCH_CANCEL, this._touchEndEvent, this); //重置

          this.isMoving = false;
          this.ndDot.setPosition(this._oriDotPos);

          if (this._oriRingPos) {
            this.ndRing.setPosition(this._oriRingPos);
          }
        };

        _proto._touchStartEvent = function _touchStartEvent(event) {
          var _this$node$getCompone; // 记录触摸的世界坐标，给touch move使用
          // this.dot.opacity = 255;


          this._targetRingPos = null;
          var touch = event.getUILocation();

          this._touchStartLocation.set(touch.x, touch.y, 0);

          var touchPos = (_this$node$getCompone = this.node.getComponent(UITransform)) == null ? void 0 : _this$node$getCompone.convertToNodeSpaceAR(this._touchStartLocation);

          if (!this._oriRingPos) {
            this._oriRingPos = this.ndRing.getPosition().clone();
          } // 记录摇杆位置，给touch move使用
          // this._stickPos.set(touchPos);


          this._isOutInnerSize = false;

          if (!this.isFollowStart) {
            var _this$ndRing$getCompo, _this$ndRing$getCompo2;

            touchPos = (_this$ndRing$getCompo = this.ndRing.getComponent(UITransform)) == null ? void 0 : _this$ndRing$getCompo.convertToNodeSpaceAR(this._touchStartLocation); //触摸点与圆圈中心的距离

            var distance = touchPos.length();
            var width = (_this$ndRing$getCompo2 = this.ndRing.getComponent(UITransform)) == null ? void 0 : _this$ndRing$getCompo2.contentSize.width; //圆圈半径

            var radius = width / 2; //手指在圆圈内触摸,控杆跟随触摸点

            if (radius > distance) {
              this.ndDot.setPosition(touchPos);

              this._updateAngle(touchPos);

              return true;
            }

            return false;
          } else {
            //设置遥感可移动范围
            if (this.touchType === TOUCH_TYPE.FOLLOW) {
              touchPos.y = touchPos.y >= -screenHeight / 6 ? -screenHeight / 6 : touchPos.y;
            }

            this.ndRing.setPosition(touchPos);
          }
        };

        _proto._touchMoveEvent = function _touchMoveEvent(event) {
          var _this$ndRing$getCompo3, _this$ndRing$getCompo4;

          var touch = event.getUILocation();

          this._touchMoveLocation.set(touch.x, touch.y, 0);

          var touchPos = (_this$ndRing$getCompo3 = this.ndRing.getComponent(UITransform)) == null ? void 0 : _this$ndRing$getCompo3.convertToNodeSpaceAR(this._touchMoveLocation); // if (this.touchType === TOUCH_TYPE.FOLLOW) {
          //     let offsetPos = cc.v3(touchPos.x - this._stickPos.x, touchPos.y - this._stickPos.y, 0);
          //     touchPos = offsetPos;
          // }

          var distance = touchPos.length();

          if (distance > this.innerSize) {
            this.isMoving = true;
            this._isOutInnerSize = true;
          } else {
            this._isOutInnerSize = false;
          } //有拖动且有角度才视为开始游戏


          if (!GameManager.isGameStart && this.isMoving) {
            GameManager.isGameStart = true;
            ClientEvent.dispatchEvent(Constant.EVENT_TYPE.MONSTER_MOVE);

            if (this.ndTip.active) {
              this.ndTip.active = false;
            }

            this._currentTime = this._checkInterval;
          }

          var width = (_this$ndRing$getCompo4 = this.ndRing.getComponent(UITransform)) == null ? void 0 : _this$ndRing$getCompo4.contentSize.width; //圆圈半径

          var radius = width / 2;
          var rate = 0; // 由于摇杆的postion是以父节点为锚点，所以定位要加上ring和dot当前的位置(stickX,stickY)

          if (radius > distance) {
            rate = Number((distance / radius).toFixed(3));
            this.ndDot.setPosition(touchPos);
          } else if (this.touchType !== TOUCH_TYPE.FOLLOW_DOT) {
            rate = 1; //控杆永远保持在圈内，并在圈内跟随触摸更新角度

            var radian = Math.atan2(touchPos.y, touchPos.x);
            var x = Math.cos(radian) * radius;
            var y = Math.sin(radian) * radius;

            this._movePos.set(x, y, 0);

            if (this.touchType === TOUCH_TYPE.FOLLOW_ALWAYS) {
              var _this$node$getCompone2;

              this._curRingPos_2.set(touch.x - x, touch.y - y, 0);

              var ringPos = (_this$node$getCompone2 = this.node.getComponent(UITransform)) == null ? void 0 : _this$node$getCompone2.convertToNodeSpaceAR(this._curRingPos_2);
              this._targetRingPos = ringPos;
            }

            this.ndDot.setPosition(this._movePos);
          } else {
            // 点跟随移动
            this.ndDot.setPosition(touchPos);
          } //更新角度


          this._updateAngle(touchPos); //更新遥感移动距离百分比


          this._distanceRate = rate;
        };

        _proto._touchEndEvent = function _touchEndEvent(event) {
          if (!this.isMoving) {
            //可以判断为点击
            this.onClickCb && this.onClickCb();
          } else {
            var _this$ndRing$getCompo5;

            var touch = event.getUILocation();

            this._touchEndLocation.set(touch.x, touch.y, 0);

            var touchPos = (_this$ndRing$getCompo5 = this.ndRing.getComponent(UITransform)) == null ? void 0 : _this$ndRing$getCompo5.convertToNodeSpaceAR(this._touchEndLocation);
            var isDragToInner = false;

            if (touchPos.length() < this.innerSize) {
              //取消掉
              isDragToInner = true;
              this.onEndCb && this.onEndCb(isDragToInner);
            } else {
              this.onEndCb && this.onEndCb(isDragToInner);
            }
          }

          this.isMoving = false;
          this.ndDot.setPosition(this._oriDotPos);

          if (this.touchType === TOUCH_TYPE.FOLLOW || this.touchType === TOUCH_TYPE.FOLLOW_ALWAYS || this.touchType === TOUCH_TYPE.FOLLOW_DOT) {
            this._targetRingPos = null;
            this.ndRing.setPosition(this._oriRingPos);
          }
        };

        _proto._updateAngle = function _updateAngle(pos) {
          this._angle = Math.round(Math.atan2(pos.y, pos.x) * 180 / Math.PI);
          return this._angle;
        };

        _proto.reset = function reset() {
          this.isMoving = false;
          this.ndDot.setPosition(this._oriDotPos);
        };

        _proto.update = function update(deltaTime) {
          // Your update function goes here.
          if (!GameManager.isGameStart || GameManager.isGameOver || GameManager.isGamePause || !GameManager.scriptPlayer) {
            return;
          } //设置终终点按钮位置


          if (this._targetRingPos) {
            this._curRingPos_1.set(0, 0, 0);

            Vec3.lerp(this._curRingPos_1, this.ndRing.position, this._targetRingPos, 20 * deltaTime);
            this.ndRing.setPosition(this._curRingPos_1);
          }

          this._currentTime += deltaTime;

          if (this._currentTime >= this._checkInterval) {
            this._currentTime = 0;

            if (this.isMoving) {
              if (this.angle !== this._oldAngle) {
                this._oldAngle = this.angle;
                GameManager.scriptPlayer.playAction({
                  action: Constant.PLAYER_ACTION.MOVE,
                  value: this.angle
                });
              }
            } else {
              this.isMoving = false;

              if (GameManager.scriptPlayer.isMoving) {
                GameManager.scriptPlayer.playAction({
                  action: Constant.PLAYER_ACTION.STOP_MOVE
                });
              }
            }
          }
        };

        _createClass(Joystick, [{
          key: "onClickCb",
          get: function get() {
            return this._onClickCb;
          },
          set: //第一关文字提示
          function set(v) {
            this._onClickCb = v;
          }
        }, {
          key: "onEndCb",
          get: function get() {
            return this._onEndCb;
          },
          set: function set(v) {
            this._onEndCb = v;
          }
        }, {
          key: "clearFECb",
          get: function get() {
            return this._clearFECb;
          },
          set: function set(v) {
            this._clearFECb = v;
          }
        }, {
          key: "onBeginFECb",
          get: function get() {
            return this._onBeginFECb;
          },
          set: function set(v) {
            this._onBeginFECb = v;
          }
        }, {
          key: "onSuccessFECb",
          get: function get() {
            return this._onSuccessFECb;
          },
          set: function set(v) {
            this._onSuccessFECb = v;
          }
        }, {
          key: "isMoving",
          get: function get() {
            return this._isMoving;
          },
          set: function set(v) {
            this._isMoving = v;
          }
        }, {
          key: "distanceRate",
          get: function get() {
            return this._distanceRate;
          }
        }, {
          key: "angle",
          get: function get() {
            return this._angle;
          },
          set: function set(v) {
            this._angle = v;
          }
        }]);

        return Joystick;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ndRing", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ndDot", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "touchType", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return TOUCH_TYPE.DEFAULT;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "directionType", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return DIRECTION_TYPE.ALL;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "isEnableTransparent", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "isFollowStart", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return false;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "innerSize", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "ndTip", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/lang.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1a7e1/Wpc9MoaS5kA+xGjbS", "lang", undefined);
      /** 本文件由tool-config工具自动生成,请勿手动修改!!! */


      var Lang = exports('Lang', /*#__PURE__*/function (Lang) {
        Lang["loading"] = "loading";
        Lang["loadLang"] = "loadLang";
        Lang["loadScene"] = "loadScene";
        Lang["loadRegisterModules"] = "loadRegisterModules";
        Lang["loadCommonRes"] = "loadCommonRes";
        Lang["loadFinished"] = "loadFinished";
        Lang["energyNotEnough"] = "energyNotEnough";
        return Lang;
      }({}));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LanguageData.ts", ['cc'], function (exports) {
  var cclegacy, director;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
    }],
    execute: function () {
      exports({
        init: _init,
        t: t,
        updateSceneRenderers: _updateSceneRenderers
      });

      cclegacy._RF.push({}, "b3f01X4Ik5LEbIPKXZr3JWD", "LanguageData", undefined);

      var _language = exports('_language', 'zh');

      var ready = exports('ready', false);
      /**
       * 初始化
       * @param language 
       */

      function _init(language) {
        ready = exports('ready', true);
        _language = exports('_language', language);
      }

      function t(key) {
        var win = window;

        if (!win.languages) {
          return key;
        }

        var searcher = key.split('.');
        var data = win.languages[_language];

        for (var i = 0; i < searcher.length; i++) {
          data = data[searcher[i]];

          if (!data) {
            return '';
          }
        }

        return data || '';
      }

      function _updateSceneRenderers() {
        // very costly iterations
        var rootNodes = director.getScene().children; // walk all nodes with localize label and update

        var allLocalizedLabels = [];
        var allLocalizedSprites = [];
        var allLocalizedMaterial = [];

        for (var i = 0; i < rootNodes.length; ++i) {
          var labels = rootNodes[i].getComponentsInChildren('LocalizedLabel');
          Array.prototype.push.apply(allLocalizedLabels, labels);
          var sprites = rootNodes[i].getComponentsInChildren('LocalizedSprite');
          Array.prototype.push.apply(allLocalizedSprites, sprites);
          var meshs = rootNodes[i].getComponentsInChildren('LocalizedMaterial');
          Array.prototype.push.apply(allLocalizedMaterial, meshs);
        }

        for (var _i = 0; _i < allLocalizedLabels.length; ++_i) {
          var label = allLocalizedLabels[_i];
          if (!label.node.active) continue;
          label.updateLabel();
        } // walk all nodes with localize sprite and update


        for (var _i2 = 0; _i2 < allLocalizedSprites.length; ++_i2) {
          var sprite = allLocalizedSprites[_i2];
          if (!sprite.node.active) continue;
          sprite.updateSprite();
        }

        for (var _i3 = 0; _i3 < allLocalizedMaterial.length; ++_i3) {
          var mesh = allLocalizedMaterial[_i3];
          if (!mesh.node.active) continue;
          mesh.updateMat();
        }
      }

      var win = window;
      win._languageData = {
        get language() {
          return _language;
        },

        init: function init(lang) {
          _init(lang);
        },
        updateSceneRenderers: function updateSceneRenderers() {
          _updateSceneRenderers();
        }
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/laser.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './effectManager.ts', './constant.ts', './audioManager.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Component, EffectManager, Constant, AudioManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "504049FuYdEFIRZxBEBstqp", "laser", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //激光技能脚本

      var Laser = exports('Laser', (_dec = ccclass('Laser'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Laser, _Component);

        function Laser() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._baseInfo = null; //敌人基本信息

          _this._skillInfo = null; //技能信息

          _this._timer = null; //定时器

          _this._scriptWarning = null;
          return _this;
        }

        var _proto = Laser.prototype; //预警技能脚本

        _proto.start = function start() {// [3]
        };

        _proto.init = function init(skillInfo, baseInfo, scriptParent) {
          var _this2 = this;

          this.skillInfo = skillInfo;
          this.baseInfo = baseInfo;
          this.node.active = false;

          this._closeTimer();

          this._timer = setTimeout(function () {
            if (!scriptParent.isDie) {
              var _scriptParent$scriptW;

              AudioManager.instance.playSound(Constant.SOUND.LASER);
              _this2.node.active = true;
              scriptParent == null ? void 0 : (_scriptParent$scriptW = scriptParent.scriptWarning) == null ? void 0 : _scriptParent$scriptW.hideWarning();
              var options = {
                ndEffect: _this2.node,
                speed: skillInfo.flySpeed,
                isRecycle: true
              };
              EffectManager.instance.playParticle(options).then(function () {
                _this2._closeTimer();
              });
            } else {
              _this2._closeTimer();
            }
          }, 400);
        };

        _proto._closeTimer = function _closeTimer() {
          if (this._timer) {
            clearTimeout(this._timer);
            this._timer = null;
          }
        } // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        _createClass(Laser, [{
          key: "baseInfo",
          get: function get() {
            return this._baseInfo;
          },
          set: function set(v) {
            this._baseInfo = v;
          }
        }, {
          key: "skillInfo",
          get: function get() {
            return this._skillInfo;
          },
          set: function set(v) {
            this._skillInfo = v;
          }
        }, {
          key: "scriptWarning",
          get: function get() {
            return this._scriptWarning;
          },
          set: function set(v) {
            this._scriptWarning = v;
          }
        }]);

        return Laser;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LevelLoadingMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './gameManager.ts', './clientEvent.ts', './constant.ts', './Constant2.ts', './LoadingPanel.ts', './FightEvent.ts', './Mediator.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, GameManager, ClientEvent, Constant, LoadingPanel, FightEvent, Mediator, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      Constant = module.Constant;
    }, null, function (module) {
      LoadingPanel = module.LoadingPanel;
    }, function (module) {
      FightEvent = module.FightEvent;
    }, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "26ae7hfVS9DCa+yLqsGN30d", "LevelLoadingMediator", undefined);
      /**
       * File: LevelLoadingMediator
       * Description:
       * Created on: 2024-11-13 10:09:40
       */


      var LevelLoadingMediator = exports('LevelLoadingMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(LevelLoadingMediator, _Mediator);

        function LevelLoadingMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UILoading;
          _this._skin = "loading/loadingPanel";
          _this._isShowOver = false;
          _this._isNeedHide = false;
          return _this;
        }

        var _proto = LevelLoadingMediator.prototype;

        _proto.tweenOut = function tweenOut(callback) {
          var _this2 = this;

          this._isNeedHide = true;
          callback && callback();
          if (!this._isShowOver) return;
          GameManager.scriptGameCamera.resetCamera();
          var view = this.getComponent(LoadingPanel);
          view.tweenOut(function () {
            _this2.hide();

            _this2.event(FightEvent.FightLoadingOver);
          });
        };

        _proto.onInit = function onInit() {
          _Mediator.prototype.onInit.call(this);
        };

        _proto.onShow = function onShow(callback) {
          var _this3 = this;

          _Mediator.prototype.onShow.call(this);

          callback && callback();
          var view = this.getComponent(LoadingPanel);
          view.tweenIn(function () {
            _this3._isShowOver = true;
            ClientEvent.dispatchEvent(Constant.EVENT_TYPE.REFRESH_LEVEL);

            if (_this3._isNeedHide) {
              _this3.tweenOut();
            }
          });
        };

        _proto.addListeners = function addListeners() {
          _Mediator.prototype.addListeners.call(this);

          ClientEvent.on(Constant.EVENT_TYPE.HIDE_LOADING_PANEL, this.tweenOut, this);
        };

        _proto.removeListeners = function removeListeners() {
          _Mediator.prototype.removeListeners.call(this);

          ClientEvent.off(Constant.EVENT_TYPE.HIDE_LOADING_PANEL, this.tweenOut, this);
        };

        _proto.onHide = function onHide() {
          _Mediator.prototype.onHide.call(this);
        };

        return LevelLoadingMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingCommand.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Constant2.ts', './lang.ts', './Utils.ts', './PureMVC.ts', './PlayerModule.ts', './HomeModule.ts', './ViewMgr.ts', './FightModule.ts', './ModuleType.ts', './GameEvent.ts', './ConfigUtils.ts', './Command.ts', './PromiseEx.ts'], function (exports) {
  var _inheritsLoose, _asyncToGenerator, _regeneratorRuntime, cclegacy, director, game, PhysicsSystem, profiler, Game, Lang, PlayerModule, HomeModule, ViewMgr, FightModule, ModuleName, MediatorName, ProxyName, GameEvent, ConfigUtils, Command, PromiseEx;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      game = module.game;
      PhysicsSystem = module.PhysicsSystem;
      profiler = module.profiler;
      Game = module.Game;
    }, null, function (module) {
      Lang = module.Lang;
    }, null, null, function (module) {
      PlayerModule = module.PlayerModule;
    }, function (module) {
      HomeModule = module.HomeModule;
    }, function (module) {
      ViewMgr = module.ViewMgr;
    }, function (module) {
      FightModule = module.FightModule;
    }, function (module) {
      ModuleName = module.ModuleName;
      MediatorName = module.MediatorName;
      ProxyName = module.ProxyName;
    }, function (module) {
      GameEvent = module.GameEvent;
    }, function (module) {
      ConfigUtils = module.ConfigUtils;
    }, function (module) {
      Command = module.Command;
    }, function (module) {
      PromiseEx = module.PromiseEx;
    }],
    execute: function () {
      cclegacy._RF.push({}, "03301gpMBxKs5i+NqhrY8XI", "LoadingCommand", undefined);

      var LoadingCommand = exports('LoadingCommand', /*#__PURE__*/function (_Command) {
        _inheritsLoose(LoadingCommand, _Command);

        function LoadingCommand() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Command.call.apply(_Command, [this].concat(args)) || this;
          _this.DELAY_TIME = 400;
          return _this;
        }

        var _proto = LoadingCommand.prototype;

        _proto.sequeueInit = /*#__PURE__*/function () {
          var _sequeueInit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  this.showLoadingView();
                  _context.next = 3;
                  return this.initConfig();

                case 3:
                  _context.next = 5;
                  return this.loadCommonRes();

                case 5:
                  _context.next = 7;
                  return this.initModules();

                case 7:
                  _context.next = 9;
                  return this.initGameInfo();

                case 9:
                  this.startGame();

                case 10:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function sequeueInit() {
            return _sequeueInit.apply(this, arguments);
          }

          return sequeueInit;
        }();

        _proto.startGame = function startGame() {
          console.log("LoadingCommand---startGame--->");
          director.loadScene("fight", function () {
            ViewMgr.ins.show(ModuleName.Home, MediatorName.Home);
          });
        }
        /**
         * 初始化场景
         * 帧率、
         */
        ;

        _proto.initGameInfo = /*#__PURE__*/function () {
          var _initGameInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
            var _this$facade$retrieve;

            var gameProxy, frameRate, playerProxy;
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  // gamemodule
                  // 帧率、
                  gameProxy = (_this$facade$retrieve = this.facade.retrieveModule(ModuleName.Game)) == null ? void 0 : _this$facade$retrieve.retrieveProxy(ProxyName.Game);
                  frameRate = gameProxy.frameRate;
                  console.log("LoadingCommand---initGameInfo---frameRate--->", frameRate);
                  game.frameRate = gameProxy.frameRate;
                  PhysicsSystem.instance.fixedTimeStep = 1 / frameRate; // debug

                  gameProxy.debugEnabled ? profiler.showStats() : profiler.hideStats(); //引导
                  // GuideManager.instance.start();
                  //加载子包
                  // SubPackageManager.instance.loadAllPackage();

                  playerProxy = this.facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
                  playerProxy.checkToCreatePlayerInfo();
                  game.on(Game.EVENT_HIDE, function () {
                    playerProxy.recordHideTime();
                  });
                  _context2.next = 11;
                  return PromiseEx.delay(this.DELAY_TIME);

                case 11:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function initGameInfo() {
            return _initGameInfo.apply(this, arguments);
          }

          return initGameInfo;
        }()
        /**
         * 显示加载场景界面
         */
        ;

        _proto.showLoadingView = function showLoadingView() {
          this.showView(MediatorName.Loading);
        }
        /**
         * 加载游戏配置，设置语言包。
         */
        ;

        _proto.initConfig = /*#__PURE__*/function () {
          var _initConfig = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return ConfigUtils.init();

                case 2:
                  this.updateLoadingTip({
                    desc: ConfigUtils.lang(Lang.loadLang),
                    value: 0.05
                  });
                  _context3.next = 5;
                  return PromiseEx.delay(this.DELAY_TIME);

                case 5:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));

          function initConfig() {
            return _initConfig.apply(this, arguments);
          }

          return initConfig;
        }()
        /**
         * 游戏逻辑模块(功能模块)
         */
        ;

        _proto.initModules = /*#__PURE__*/function () {
          var _initModules = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  new PlayerModule();
                  new HomeModule();
                  new FightModule();
                  this.updateLoadingTip({
                    desc: ConfigUtils.lang(Lang.loadRegisterModules),
                    value: 1.0
                  });
                  _context4.next = 6;
                  return PromiseEx.delay(this.DELAY_TIME);

                case 6:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, this);
          }));

          function initModules() {
            return _initModules.apply(this, arguments);
          }

          return initModules;
        }()
        /**
         * 设置加载Common资源
         */
        ;

        _proto.loadCommonRes = /*#__PURE__*/function () {
          var _loadCommonRes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  this.updateLoadingTip({
                    desc: ConfigUtils.lang(Lang.loadCommonRes)
                  }); // Laya.loader.on(Laya.Event.ERROR, this, this.onLoadError);
                  // await Laya.loader.load(ConfigPath.EnterLoadList, null, Laya.Handler.create(this, this.onLoadProgress, null, false));

                  this.updateLoadingTip({
                    value: 0.95
                  });
                  _context5.next = 4;
                  return PromiseEx.delay(this.DELAY_TIME);

                case 4:
                  this.updateLoadingTip({
                    desc: ConfigUtils.lang(Lang.loadCommonRes),
                    value: 0.97
                  });
                  _context5.next = 7;
                  return PromiseEx.delay(this.DELAY_TIME);

                case 7:
                case "end":
                  return _context5.stop();
              }
            }, _callee5, this);
          }));

          function loadCommonRes() {
            return _loadCommonRes.apply(this, arguments);
          }

          return loadCommonRes;
        }();

        _proto.updateLoadingTip = function updateLoadingTip(data) {
          this.event(GameEvent.LoadingUpdate, data);
        };

        _proto.onLoadProgress = function onLoadProgress(progress) {
          this.updateLoadingTip({
            desc: ConfigUtils.lang(Lang.loadCommonRes),
            value: 0.15 + 0.8 * progress
          });
        };

        _proto.onLoadError = function onLoadError(error) {};

        _proto.execute = function execute() {
          this.sequeueInit();
        };

        return LoadingCommand;
      }(Command));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingConst.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ab415Ox75dLirOVNu4g7qlz", "LoadingConst", undefined);

      var LoadingConst = exports('LoadingConst', function LoadingConst() {}); // 这些字段会在语言包没有加载前使用，直接放在代码中；

      LoadingConst.ProgressTip = {
        /** 加载中 */
        loading: "加载中"
      };

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LoadingConst.ts', './Constant2.ts', './LoadingView.ts', './PureMVC.ts', './GameEvent.ts', './Mediator.ts', './ModuleType.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, LoadingConst, LoadingView, GameEvent, Mediator, ModuleName, MediatorName, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      LoadingConst = module.LoadingConst;
    }, null, function (module) {
      LoadingView = module.LoadingView;
    }, null, function (module) {
      GameEvent = module.GameEvent;
    }, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      ModuleName = module.ModuleName;
      MediatorName = module.MediatorName;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "fbe0e76f6hJIomvORDKtm4G", "LoadingMediator", undefined);

      var LoadingMediator = exports('LoadingMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(LoadingMediator, _Mediator);

        function LoadingMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UILoading;
          _this._skin = "boot/bootPanel";
          return _this;
        }

        var _proto = LoadingMediator.prototype;

        _proto.updateView = function updateView(desc, value) {
          var view = this.getComponent(LoadingView);
          view == null ? void 0 : view.updateView(desc, value);
        };

        _proto.onProgressUpdate = function onProgressUpdate(e) {
          var _e$body = e.body,
              desc = _e$body.desc,
              value = _e$body.value;
          this.updateView(desc, value);
        };

        _proto.onShow = function onShow() {
          this.updateView(LoadingConst.ProgressTip.loading, 0);
        };

        _proto.addListeners = function addListeners() {
          this.on(GameEvent.LoadingUpdate, this.onProgressUpdate, this);
          this.on(Mediator.showEvent(ModuleName.Home, MediatorName.Home), this.hide, this);
        };

        _proto.removeListeners = function removeListeners() {
          this.off(GameEvent.LoadingUpdate, this);
          this.off(Mediator.showEvent(ModuleName.Home, MediatorName.Home), this);
        };

        _proto.onHide = function onHide() {
          console.log("LoadingMediator---onHide--->");
        };

        return LoadingMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingModule.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './LoadingCommand.ts', './LoadingMediator.ts', './GameEvent.ts', './ModuleType.ts', './Module.ts'], function (exports) {
  var _inheritsLoose, cclegacy, LoadingCommand, LoadingMediator, GameEvent, MediatorName, ModuleName, Module;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      LoadingCommand = module.LoadingCommand;
    }, function (module) {
      LoadingMediator = module.LoadingMediator;
    }, function (module) {
      GameEvent = module.GameEvent;
    }, function (module) {
      MediatorName = module.MediatorName;
      ModuleName = module.ModuleName;
    }, function (module) {
      Module = module.Module;
    }],
    execute: function () {
      cclegacy._RF.push({}, "8ebd2SKnTlMro41k4y8O99R", "LoadingModule", undefined);

      var LoadingModule = exports('LoadingModule', /*#__PURE__*/function (_Module) {
        _inheritsLoose(LoadingModule, _Module);

        function LoadingModule() {
          return _Module.call(this, ModuleName.Loading) || this;
        }

        var _proto = LoadingModule.prototype;

        _proto.initializeCommands = function initializeCommands() {
          this.registerCommand(GameEvent.StartLoad, LoadingCommand);
        };

        _proto.initializeProxys = function initializeProxys() {};

        _proto.initializeMediators = function initializeMediators() {
          this.registerMediator(MediatorName.Loading, LoadingMediator);
        };

        return LoadingModule;
      }(Module));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, AnimationComponent, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      AnimationComponent = module.AnimationComponent;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2;

      cclegacy._RF.push({}, "ab85cl0XlBNg47ZPaEmtpUj", "LoadingPanel", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingPanel = exports('LoadingPanel', (_dec = ccclass("LoadingPanel"), _dec2 = menu("_game/module/LoadingPanel"), _dec3 = property(Node), _dec4 = property(AnimationComponent), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadingPanel, _Component);

        function LoadingPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "blackNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "aniCloud", _descriptor2, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LoadingPanel.prototype;

        _proto.tweenOut = function tweenOut(callback) {
          this.blackNode.active = false;
          this.aniCloud.getState("cloudAnimationOut").time = 0;
          this.aniCloud.getState("cloudAnimationOut").sample();
          this.aniCloud.play("cloudAnimationOut");
          callback && this.aniCloud.once(AnimationComponent.EventType.FINISHED, callback);
        };

        _proto.tweenIn = function tweenIn(callback) {
          this.aniCloud.getState("cloudAnimationIn").time = 0;
          this.aniCloud.getState("cloudAnimationIn").sample();
          this.aniCloud.play("cloudAnimationIn");
          callback && this.aniCloud.once(AnimationComponent.EventType.FINISHED, callback);
        };

        return LoadingPanel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "blackNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "aniCloud", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoadingView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './StringUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, ProgressBar, Label, Component, StringUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      ProgressBar = module.ProgressBar;
      Label = module.Label;
      Component = module.Component;
    }, null, function (module) {
      StringUtils = module.StringUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "3a539nM3nxP65pXjWQJI8Bs", "LoadingView", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoadingView = exports('LoadingView', (_dec = ccclass("LoadingView"), _dec2 = menu("__module__/loading"), _dec3 = property(ProgressBar), _dec4 = property(Label), _dec5 = property(Label), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoadingView, _Component);

        function LoadingView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "bar", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lblVersion", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lblProgress", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LoadingView.prototype;

        _proto.updateView = function updateView(desc, value) {
          value != null && (this.bar.progress = value);

          if (desc != null) {
            var progress = StringUtils.percent(value != null ? value : this.bar.progress);
            this.lblProgress.string = desc + "..." + progress;
          }
        };

        return LoadingView;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "bar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lblVersion", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lblProgress", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LocalData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LocalStorageUtils.ts'], function (exports) {
  var _createClass, cclegacy, LocalStorageUtils;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      LocalStorageUtils = module.LocalStorageUtils;
    }],
    execute: function () {
      cclegacy._RF.push({}, "297d4c0HUdLDop6DH+Er3XI", "LocalData", undefined);

      var LocalData = exports('LocalData', /*#__PURE__*/function () {
        function LocalData(key, defaultData) {
          this._key = void 0;
          this._data = null;
          this._defaultData = void 0;
          this._key = key;
          this._defaultData = defaultData;
        }

        var _proto = LocalData.prototype;

        _proto.save = function save() {
          LocalStorageUtils.set(this._key, this.data);
        };

        _createClass(LocalData, [{
          key: "data",
          get: function get() {
            if (this._data == null) {
              this._data = LocalStorageUtils.getJSON(this._key, this._defaultData);
            }

            return this._data;
          }
        }]);

        return LocalData;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LocalizedLabel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Component, ready, _init, t;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      ready = module.ready;
      _init = module.init;
      t = module.t;
    }],
    execute: function () {
      var _dec, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "edf98QH2D1AUoCrtQlbxFrU", "LocalizedLabel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var LocalizedLabel = exports('LocalizedLabel', (_dec = ccclass('LocalizedLabel'), _dec(_class = executeInEditMode(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LocalizedLabel, _Component);

        function LocalizedLabel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.label = null;

          _initializerDefineProperty(_this, "key", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LocalizedLabel.prototype;

        _proto.onLoad = function onLoad() {
          if (!ready) {
            _init('zh');
          }

          this.fetchRender();
        };

        _proto.fetchRender = function fetchRender() {
          var label = this.getComponent('cc.Label');

          if (label) {
            this.label = label;
            this.updateLabel();
            return;
          }
        };

        _proto.updateLabel = function updateLabel() {
          this.label && (this.label.string = t(this.key));
        };

        return LocalizedLabel;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "key", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return '';
        }
      }), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LocalizedMaterial.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, Material, MeshRenderer, Component, ready, _init, _language;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Material = module.Material;
      MeshRenderer = module.MeshRenderer;
      Component = module.Component;
    }, function (module) {
      ready = module.ready;
      _init = module.init;
      _language = module._language;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _dec3, _dec4, _class4, _class5, _descriptor3;

      cclegacy._RF.push({}, "35069qDXPFL47Ep1p+WLvRd", "LocalizedMaterial", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var LocalizedMaterialItem = (_dec = ccclass('LocalizedMaterialItem'), _dec2 = property({
        type: Material
      }), _dec(_class = (_class2 = function LocalizedMaterialItem() {
        _initializerDefineProperty(this, "language", _descriptor, this);

        _initializerDefineProperty(this, "material", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "language", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'zh';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "material", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class);
      var LocalizedMaterial = exports('LocalizedMaterial', (_dec3 = ccclass('LocalizedMaterial'), _dec4 = property({
        type: LocalizedMaterialItem
      }), _dec3(_class4 = executeInEditMode(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LocalizedMaterial, _Component);

        function LocalizedMaterial() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.mesh = null;

          _initializerDefineProperty(_this, "materialsList", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LocalizedMaterial.prototype;

        _proto.onLoad = function onLoad() {
          if (!ready) {
            _init('zh');
          }

          this.fetchRender();
        };

        _proto.fetchRender = function fetchRender() {
          var mesh = this.getComponent(MeshRenderer);

          if (mesh) {
            this.mesh = mesh;
            this.updateMat();
            return;
          }
        };

        _proto.updateMat = function updateMat() {
          for (var i = 0; i < this.materialsList.length; i++) {
            var item = this.materialsList[i]; // @ts-ignore

            if (item.language === _language) {
              // @ts-ignore
              this.mesh && this.mesh.setMaterial(item.material, 0);
            }
          }
        };

        return LocalizedMaterial;
      }(Component), _descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "materialsList", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class5)) || _class4) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LocalizedSprite.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _initializerDefineProperty, _inheritsLoose, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Component, ready, _init, _language;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _initializerDefineProperty = module.initializerDefineProperty;
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Component = module.Component;
    }, function (module) {
      ready = module.ready;
      _init = module.init;
      _language = module._language;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _dec3, _dec4, _class4, _class5, _descriptor3;

      cclegacy._RF.push({}, "c05c25C4xNAupWYMB93tIzp", "LocalizedSprite", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          executeInEditMode = _decorator.executeInEditMode;
      var LocalizedSpriteItem = (_dec = ccclass('LocalizedSpriteItem'), _dec2 = property({
        type: SpriteFrame
      }), _dec(_class = (_class2 = function LocalizedSpriteItem() {
        _initializerDefineProperty(this, "language", _descriptor, this);

        _initializerDefineProperty(this, "spriteFrame", _descriptor2, this);
      }, (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "language", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 'zh';
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spriteFrame", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class);
      var LocalizedSprite = exports('LocalizedSprite', (_dec3 = ccclass('LocalizedSprite'), _dec4 = property({
        type: LocalizedSpriteItem
      }), _dec3(_class4 = executeInEditMode(_class4 = (_class5 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LocalizedSprite, _Component);

        function LocalizedSprite() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this.sprite = null;

          _initializerDefineProperty(_this, "spriteList", _descriptor3, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = LocalizedSprite.prototype;

        _proto.onLoad = function onLoad() {
          if (!ready) {
            _init('zh');
          }

          this.fetchRender();
        };

        _proto.fetchRender = function fetchRender() {
          var sprite = this.getComponent('cc.Sprite');

          if (sprite) {
            this.sprite = sprite;
            this.updateSprite();
            return;
          }
        };

        _proto.updateSprite = function updateSprite() {
          for (var i = 0; i < this.spriteList.length; i++) {
            var item = this.spriteList[i]; // @ts-ignore

            if (item.language === _language) {
              // @ts-ignore
              this.sprite.spriteFrame = item.spriteFrame;
              break;
            }
          }
        };

        return LocalizedSprite;
      }(Component), _descriptor3 = _applyDecoratedDescriptor(_class5.prototype, "spriteList", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      }), _class5)) || _class4) || _class4));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LocalStorageUtils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PackerCrypto.ts', './PackerNone.ts', './PackerNormal.ts'], function (exports) {
  var _createClass, cclegacy, sys, PackerCrypto, PackerNone, PackerNormal;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      sys = module.sys;
    }, function (module) {
      PackerCrypto = module.PackerCrypto;
    }, function (module) {
      PackerNone = module.PackerNone;
    }, function (module) {
      PackerNormal = module.PackerNormal;
    }],
    execute: function () {
      cclegacy._RF.push({}, "70a48cvLCtHgIxwVvt+6AEs", "LocalStorageUtils", undefined);

      var LocalStorageUtils = exports('LocalStorageUtils', /*#__PURE__*/function () {
        function LocalStorageUtils() {}
        /** 获取数据分组关键字 */


        LocalStorageUtils.getHashKey = function getHashKey(key) {
          if (this._userID != null && this._userID != "") {
            key = this._userID + "_" + key;
          }

          return key ? this.iss.hashKey(key) : key;
        }
        /**
         * 初始化本地存储数据加密工具
         * @param isp
         */
        ;

        LocalStorageUtils.init = function init(isp) {
          var _this = this;

          switch (isp) {
            case "normal":
              this._iss = new PackerNormal();
              break;

            case "crypto":
              this._iss = new PackerCrypto();
              break;

            default:
              this._iss = new PackerNone();
              break;
          } //每隔5秒保存一次数据


          this._saveTimer = setInterval(function () {
            _this.scheduleSave();
          }, 5000);
        }
        /**
         * 定时存储
         * @returns
         */
        ;

        LocalStorageUtils.scheduleSave = function scheduleSave() {
          if (!this._markSave) {
            return;
          }

          this.save();
        }
        /**
         * 设置用户唯一标识
         * @param id
         */
        ;

        LocalStorageUtils.setUserId = function setUserId(id) {
          this._userID = id;
        };

        LocalStorageUtils.save = function save() {
          if (this._isDebugClear) return; // console.log("LocalStorageUtils---saveGame--->", this.game);

          if (!sys.isNative) {
            sys.localStorage.setItem(LocalStorageUtils.GAME_KEY, JSON.stringify(this.game));
            return;
          }
        };

        LocalStorageUtils.saveGameLater = function saveGameLater(runNow) {
          if (runNow) {
            this.save();
            return;
          }

          this._markSave = true; //标记为需要存储，避免一直在写入，而是每隔一段时间进行写入
        };

        LocalStorageUtils.debugClearAll = function debugClearAll() {
          this._isDebugClear = true;
          sys.localStorage.removeItem(LocalStorageUtils.GAME_KEY);
        };

        LocalStorageUtils.set = function set(key, value, runNow) {
          if (runNow === void 0) {
            runNow = false;
          }

          if (typeof value === "function") {
            console.error("LocalStorageUtils---set---> error: 储存的值不能为方法");
            return;
          }

          var hashKey = this.getHashKey(key);

          if (hashKey == null) {
            console.error("LocalStorageUtils---set---> error: 存储的key不能为空");
            return;
          }

          if (null == value) {
            console.warn("LocalStorageUtils---set---> warn: 存储的值为空，则直接移除该存储");
            this["delete"](key);
            return;
          }

          if (typeof value === "object") {
            try {
              value = JSON.stringify(value);
            } catch (e) {
              console.error("\u89E3\u6790\u5931\u8D25\uFF0Cstr = " + value);
              return;
            }
          } else if (typeof value === "number") {
            value = value + "";
          }

          this.game[hashKey] = this.iss.encode(value);
          this.saveGameLater(runNow);
        };

        LocalStorageUtils["delete"] = function _delete(key, runNow) {
          if (runNow === void 0) {
            runNow = false;
          }

          var hashKey = this.getHashKey(key);

          if (hashKey == null) {
            console.error("删除的key不能为空");
            return;
          }

          delete this.game[hashKey];
          this.saveGameLater(runNow);
        }
        /**
         * 获取指定关键字的数据
         * @param key          获取的关键字
         * @param defaultValue 获取的默认值
         * @returns
         */
        ;

        LocalStorageUtils.get = function get(key, defaultValue) {
          if (defaultValue === void 0) {
            defaultValue = null;
          }

          if (null == key) {
            console.error("存储的key不能为空");
            return null;
          }

          key = this.getHashKey(key);
          var str = this.game[key];

          if (null != str && "" !== str) {
            str = this.iss.decode(str);
          }

          if (null === str) {
            return defaultValue;
          }

          return str;
        };

        LocalStorageUtils.getJSON = function getJSON(key, defaultValue) {
          if (defaultValue === void 0) {
            defaultValue = null;
          }

          var val = this.get(key, defaultValue);
          return val ? JSON.parse(val) : defaultValue;
        };

        LocalStorageUtils.getNumber = function getNumber(key, defaultValue) {
          if (defaultValue === void 0) {
            defaultValue = 0;
          }

          var val = this.get(key, defaultValue);
          return Number(val) || defaultValue;
        };

        LocalStorageUtils.getBoolean = function getBoolean(key, defaultValue) {
          if (defaultValue === void 0) {
            defaultValue = false;
          }

          var r = this.get(key, defaultValue);
          return r.toLowerCase() === "true";
        };

        _createClass(LocalStorageUtils, null, [{
          key: "iss",
          get: function get() {
            if (!this._iss) {
              this._iss = new PackerNone();
            }

            return this._iss;
          }
        }, {
          key: "game",
          get: function get() {
            if (this._game == null) {
              if (sys.isNative) ;else {
                var content = sys.localStorage.getItem(LocalStorageUtils.GAME_KEY);
                content = content ? JSON.parse(content) : null;
                this._game = content ? content : {};
              }
            }

            return this._game;
          }
        }]);

        return LocalStorageUtils;
      }());
      LocalStorageUtils.GAME_KEY = "_game_";
      LocalStorageUtils._game = void 0;
      LocalStorageUtils._userID = null;
      LocalStorageUtils._iss = null;
      LocalStorageUtils._saveTimer = -1;
      LocalStorageUtils._markSave = false;
      LocalStorageUtils._isDebugClear = false;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/lodash.ts", ['cc'], function (exports) {
  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "0468cW9EAhIEYW1z5xRGGJX", "lodash", undefined);

      var ccclass = _decorator.ccclass;
      var Lodash = exports('Lodash', (_dec = ccclass("Lodash"), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function Lodash() {}
        /* class member could be defined like this */
        // dummy = '';

        /**
         * 遍历 collection（集合）元素，返回 predicate（断言函数）第一个返回真值的第一个元素
         * @param  {any} collection 一个用来迭代的集合
         * @param {Function} predicate 每次迭代调用的函数。
         * @returns 返回匹配元素，否则返回 undefined。
         */


        Lodash.find = function find(collection, predicate) {
          var result;

          if (!Array.isArray(collection)) {
            collection = Lodash._toArray(collection);
          }

          result = collection.filter(predicate);

          if (result.length) {
            return result[0];
          }

          return undefined;
        }
        /**
         * 调用 iteratee 遍历 collection(集合) 中的每个元素
         * @param  {any} collection 一个用来迭代的集合
         * @param {Function} iteratee 每次迭代调用的函数。
         */
        ;

        Lodash.forEach = function forEach(collection, iteratee) {
          if (!Array.isArray(collection)) {
            var array = Lodash._toArrayKey(collection);

            array.forEach(function (value, index, arr) {
              var key1 = value['key'];
              var value1 = value['value'];
              iteratee(value1, key1, collection);
            });
          } else {
            collection.forEach(iteratee);
          }
        }
        /**
         * 深度拷贝
         * @param {any} sObj 拷贝的对象
         * @returns 
         */
        ;

        Lodash.cloneDeep = function cloneDeep(sObj) {
          if (sObj === null || typeof sObj !== "object") {
            return sObj;
          }

          var s = {};

          if (sObj.constructor === Array) {
            s = [];
          }

          for (var i in sObj) {
            if (sObj.hasOwnProperty(i)) {
              s[i] = Lodash.cloneDeep(sObj[i]);
            }
          }

          return s;
        }
        /**
         * 创建一个数组， value（值） 是 iteratee（迭代函数）遍历 collection（集合）中的每个元素后返回的结果。
         * @param {Array|Object} collection  一个用来迭代的集合.
         * @param {Function} predicate  一个迭代函数，用来转换key（键
         * @returns {Array} 返回一个组成集合数组
         */
        ;

        Lodash.map = function map(collection, iteratee) {
          if (!Array.isArray(collection)) {
            collection = Lodash._toArray(collection);
          }

          var arr = [];
          collection.forEach(function (value, index, array) {
            arr.push(iteratee(value, index, array));
          });
          return arr;
        }
        /**
         * 
         * @param srcObj 
         * @returns 
         */
        ;

        Lodash._toArrayKey = function _toArrayKey(srcObj) {
          var resultArr = []; // to array

          for (var key in srcObj) {
            if (!srcObj.hasOwnProperty(key)) {
              continue;
            }

            resultArr.push({
              key: key,
              value: srcObj[key]
            });
          }

          return resultArr;
        };

        Lodash._toArray = function _toArray(srcObj) {
          var resultArr = []; // to array

          for (var key in srcObj) {
            if (!srcObj.hasOwnProperty(key)) {
              continue;
            }

            resultArr.push(srcObj[key]);
          }

          return resultArr;
        }
        /**
         * 遍历 collection（集合）元素，返回 predicate（断言函数）返回真值 的所有元素的数组。
         * @param {Array|Object} collection  一个用来迭代的集合.
         * @param {Function} predicate  一个迭代函数，用来转换key（键
         * @returns 返回一个新的过滤后的数组。
         */
        ;

        Lodash.filter = function filter(collection, iteratees) {
          if (!Array.isArray(collection)) {
            collection = Lodash._toArray(collection);
          }

          return collection.filter(iteratees);
        }
        /**
         * 执行深比较来确定两者的值是否相等。
         * @param {any}x 
         * @param {any}y 
         * @returns {boolean} 如果 两个值完全相同，那么返回 true，否则返回 false。
         */
        ;

        Lodash.isEqual = function isEqual(x, y) {
          var in1 = x instanceof Object;
          var in2 = y instanceof Object;

          if (!in1 || !in2) {
            return x === y;
          }

          if (Object.keys(x).length !== Object.keys(y).length) {
            return false;
          }

          for (var p in x) {
            var a = x[p] instanceof Object;
            var b = y[p] instanceof Object;

            if (a && b) {
              return Lodash.isEqual(x[p], y[p]);
            } else if (x[p] !== y[p]) {
              return false;
            }
          }

          return true;
        }
        /**
         * 接收一个要移除值的数组。
         * @param {Array} array 修改的数组
         * @param {Array} value 移除值的数组
         * @param  {Function} comparator comparator（比较器）调用每个元素。
         * @returns 
         */
        ;

        Lodash.pullAllWith = function pullAllWith(array, value, comparator) {
          value.forEach(function (item) {
            var res = array.filter(function (n) {
              return comparator(n, item);
            });
            res.forEach(function (item) {
              var index = array.indexOf(item);

              if (array.indexOf(item) !== -1) {
                array.splice(index, 1);
              }
            });
          });
          return array;
        }
        /**
         * 返回当前时间戳
         * @returns 
         */
        ;

        Lodash.now = function now() {
          return Date.now();
        }
        /**
         * 接收一个要移除值的数组。
         * @param {Array} array 修改的数组
         * @param {Array} value 移除值的数组
         * @returns 
         */
        ;

        Lodash.pullAll = function pullAll(array, value) {
          value.forEach(function (item) {
            var index = array.indexOf(item);

            if (array.indexOf(item) !== -1) {
              array.splice(index, 1);
            }
          });
          return array;
        }
        /**
         * 从右到左遍历集合中每一个元素的。
         * @param {Array|Object} collection  一个用来迭代的集合.
         * @param {Function} predicate  一个迭代函数
         */
        ;

        Lodash.forEachRight = function forEachRight(collection, iteratee) {
          if (!Array.isArray(collection)) {
            collection = Lodash._toArray(collection);
          } //@ts-ignore


          for (var i = collection.length - 1; i >= 0; i--) {
            //@ts-ignore
            var ret = iteratee(collection[i]);
            if (!ret) break;
          }
        }
        /**
         * 检查字符串string是否以 target 开头。
         * @param {string} str 要检索的字符串。
         * @param {string}target  要检查的字符串。
         * @param {number}position 检索的位置。
         * @returns 
         */
        ;

        Lodash.startsWith = function startsWith(str, target, position) {
          str = str.substr(position);
          return str.startsWith(target);
        }
        /**
         * 检查字符串string是否以 target 结束。
         * @param {string} str 要检索的字符串。
         * @param {string}target  要检查的字符串。
         * @param {number}position 检索的位置。
         * @returns 
         */
        ;

        Lodash.endsWith = function endsWith(str, target, position) {
          str = str.substr(position);
          return str.endsWith(target);
        }
        /**
         * 移除数组中predicate（断言）返回为真值的所有元素
         * @param {Array} array  一个用来迭代的集合.
         * @param {Function} predicate  一个迭代函数
         * @returns 
         */
        ;

        Lodash.remove = function remove(array, predicate) {
          var result = [];
          var indexes = [];
          array.forEach(function (item, index) {
            if (predicate(item)) {
              result.push(item);
              indexes.push(index);
            }
          });

          Lodash._basePullAt(array, indexes);

          return result;
        };

        Lodash._basePullAt = function _basePullAt(array, indexes) {
          var length = array ? indexes.length : 0;
          var lastIndex = length - 1;
          var previous;

          while (length--) {
            var index = indexes[length];

            if (length === lastIndex || index !== previous) {
              previous = index;
              Array.prototype.splice.call(array, index, 1);
            }
          }

          return array;
        }
        /**
         * 返回第一个通过 predicate 判断为真值的元素的索引值
         * @param {Array} array  一个用来迭代的集合.
         * @param {Function} predicate  一个迭代函数
         * @param {number} fromIndex 开始查找索引值
         * @returns 
         */
        ;

        Lodash.findIndex = function findIndex(array, predicate, fromIndex) {
          array = array.slice(fromIndex);
          var i;

          if (typeof predicate === "function") {
            for (i = 0; i < array.length; i++) {
              if (predicate(array[i])) {
                return i;
              }
            }
          } else if (Array.isArray(predicate)) {
            for (i = 0; i < array.length; i++) {
              var key = predicate[0];
              var vaule = true; //@ts-ignore

              if (predicate.length > 1) {
                vaule = predicate[1];
              }

              if (array[i][key] === vaule) {
                return i;
              }
            }
          } else {
            for (i = 0; i < array.length; i++) {
              if (array[i] === predicate) {
                return i;
              }
            }
          }

          return -1;
        }
        /**
         * 创建一个新数组，将array与任何数组 或 值连接在一起。
         * @returns 
         */
        ;

        Lodash.concat = function concat() {
          var length = arguments.length;

          if (!length) {
            return [];
          }

          var array = arguments[0];
          var index = 1;

          while (index < length) {
            array = array.concat(arguments[index]);
            index++;
          }

          return array;
        }
        /**
         * 检查 value 是否是原始Number数值型 或者 对象。
         * @param {any }value 
         * @returns 
         */
        ;

        Lodash.isNumber = function isNumber(value) {
          return typeof value === 'number';
        }
        /**
         * 返回首次 value 在数组array中被找到的 索引值
         * @param {Array}array 
         * @param {any}value 
         * @param {number} fromIndex 
         * @returns 
         */
        ;

        Lodash.indexOf = function indexOf(array, value, fromIndex) {
          array = array.slice(fromIndex);
          return array.indexOf(value);
        }
        /**
         * 将 array 中的所有元素转换为由 separator 分隔的字符串。
         * @param {any} array 要转换的数组
         * @param {string} separator 分隔元素。
         * @returns 
         */
        ;

        Lodash.join = function join(array, separator) {
          if (array === null) return '';
          var result = '';
          array.forEach(function (item) {
            result += item + separator;
          });
          return result.substr(0, result.length - 1);
        }
        /**
         * 根据separator 拆分字符串string。
         * @param {string} str 要转换的数组
         * @param {RegExp|string} separator 分隔元素。
         * @param {number} limit 限制结果的数量。
         * @returns 
         */
        ;

        Lodash.split = function split(str, separator, limit) {
          return str.split(separator, limit);
        }
        /**
         * 计算 array 中的最大值。 如果 array 是 空的或者假值将会返回 undefined。
         * @param {Array}array 
         * @returns 
         */
        ;

        Lodash.max = function max(array) {
          if (array && array.length) {
            var result;

            for (var i = 0; i < array.length; i++) {
              if (i === 0) {
                result = array[0];
              } else if (result < array[i]) {
                result = array[i];
              }
            }

            return result;
          }

          return undefined;
        }
        /**
         * 创建一个切片数组，去除array前面的n个元素。（n默认值为1。）
         * @param {Array}array : 要查询的数组。
         * @param {number}n 要去除的元素个数。
         * @returns 
         */
        ;

        Lodash.drop = function drop(array, n) {
          var length = array === null ? 0 : array.length;

          if (!length) {
            return [];
          }

          return array.slice(n);
        }
        /**
         * 将array递归为一维数组。
         * @param {Array} arr 
         * @returns 
         */
        ;

        Lodash.flattenDeep = function flattenDeep(arr) {
          return arr.reduce(function (prev, cur) {
            return prev.concat(Array.isArray(cur) ? Lodash.flattenDeep(cur) : cur);
          }, []);
        }
        /**
         * 创建一个去重后的array数组副本。使用了SameValueZero 做等值比较。只有第一次出现的元素才会被保留。
         * @param {Array} array 
         * @returns 
         */
        ;

        Lodash.uniq = function uniq(array) {
          var result = [];
          array.forEach(function (item) {
            if (result.indexOf(item) === -1) {
              result.push(item);
            }
          });
          return result;
        }
        /**
         * 检查 value 是否是 NaN。
         * @param {any}value 
         * @returns 
         */
        ;

        Lodash.isNaN = function isNaN(value) {
          // An `NaN` primitive is the only value that is not equal to itself.
          // Perform the `toStringTag` check first to avoid errors with some
          // ActiveX objects in IE.
          return Lodash.isNumber(value) && value !== +value;
        }
        /**
         * 将数组（array）拆分成多个 size 长度的区块，并将这些区块组成一个新数组
         * @param {Array}array 
         * @param {number}size 
         * @returns 
         */
        ;

        Lodash.chunk = function chunk(array, size) {
          var length = array === null ? 0 : array.length;

          if (!length || size < 1) {
            return [];
          }

          var result = [];

          while (array.length > size) {
            result.push(array.slice(0, size));
            array = array.slice(size);
          }

          result.push(array);
          return result;
        }
        /**
         * 转换 value 为一个有限数字
         * @param {any} value 
         * @returns 
         */
        ;

        Lodash.toFinite = function toFinite(value) {
          var INFINITY = 1 / 0;
          var MAX_INTEGER = 1.7976931348623157e+308;

          if (!value) {
            return value === 0 ? value : 0;
          }

          value = Number(value);

          if (value === INFINITY || value === -INFINITY) {
            var sign = value < 0 ? -1 : 1;
            return sign * MAX_INTEGER;
          }

          return value === value ? value : 0;
        }
        /**
         * 判断是否为对象
         * @param {any}value  
         * @returns {boolean}
         */
        ;

        Lodash.isObject = function isObject(value) {
          var type = typeof value;
          return value !== null && (type === 'object' || type === 'function');
        };
        /**
         * 
         * @param value 
         * @returns 
         */


        Lodash.isLength = function isLength(value) {
          return typeof value === 'number' && value > -1 && value % 1 === 0 && value <= Lodash.MAX_SAFE_INTEGER;
        };

        Lodash._isArrayLike = function _isArrayLike(value) {
          return value !== null && Lodash.isLength(value.length)
          /*&& !isFunction(value)*/
          ;
        }
        /**
         * 返回数组总符合条件的最大值
         * @param {Array} array  一个用来迭代的集合.
         * @param {Function} predicate  一个迭代函数
         * @returns {Object} 返回最大值
         */
        ;

        Lodash.maxBy = function maxBy(array, predicate) {
          if (array && array.length) {
            var result;
            var objResult;

            for (var i = 0; i < array.length; i++) {
              if (i === 0) {
                result = predicate(array[0]);
                objResult = array[0];
              } else if (result < array[i]) {
                result = array[i];
                objResult = array[i];
              }
            }

            return objResult;
          }

          return undefined;
        }
        /**
         * 返回数组总符合条件的最小值
         * @param {Array} array  一个用来迭代的集合.
         * @param {Function} predicate  一个迭代函数
         * @returns {Object} 返回最小值
         */
        ;

        Lodash.minBy = function minBy(array, predicate) {
          if (array && array.length) {
            var result;
            var objResult;

            for (var i = 0; i < array.length; i++) {
              if (i === 0) {
                result = predicate(array[0]);
                objResult = array[0];
              } else if (result > array[i]) {
                result = predicate(array[i]);
                objResult = array[i];
              }
            }

            return objResult;
          }

          return undefined;
        }
        /**
         * 返回复合迭代函数的总和
         * @param {Array|Object} collection  一个用来迭代的集合.
         * @param {Function} predicate  一个迭代函数
         * @returns {Object} 返回总和
         */
        ;

        Lodash.sumBy = function sumBy(collection, predicate) {
          var sum = 0;

          for (var _key in collection) {
            //@ts-ignore
            sum += predicate(collection[_key]);
          }

          return sum;
        }
        /**
         * 返回复合迭代函数的次数
         * @param {Array|Object} collection  一个用来迭代的集合.
         * @param {Function} predicate  一个迭代函数，用来转换key（键
         * @returns {Object} 返回一个组成集合对象
         */
        ;

        Lodash.countBy = function countBy(collection, predicate) {
          var objRet = {};

          for (var _key2 in collection) {
            var value = predicate(_key2);

            if (objRet.hasOwnProperty(value)) {
              objRet[value] += 1;
            } else {
              objRet[value] = 1;
            }
          }

          return objRet;
        };

        return Lodash;
      }(), _class2.MAX_SAFE_INTEGER = 9007199254740991, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginCommand.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './ModuleType.ts', './Command.ts'], function (exports) {
  var _inheritsLoose, cclegacy, MediatorName, Command;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      MediatorName = module.MediatorName;
    }, function (module) {
      Command = module.Command;
    }],
    execute: function () {
      cclegacy._RF.push({}, "db3a6lUh5NDNZEcHr5qkMKT", "LoginCommand", undefined);

      var LoginCommand = exports('LoginCommand', /*#__PURE__*/function (_Command) {
        _inheritsLoose(LoginCommand, _Command);

        function LoginCommand() {
          return _Command.apply(this, arguments) || this;
        }

        var _proto = LoginCommand.prototype;

        _proto.execute = function execute(n) {
          this.showView(MediatorName.Login);
        };

        return LoginCommand;
      }(Command));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './LocalData.ts'], function (exports) {
  var _createClass, _inheritsLoose, cclegacy, LocalData;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      LocalData = module.LocalData;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f83df7DlLRLs4hx1XtMiI09", "LoginData", undefined);

      var LoginLocalData = /*#__PURE__*/function (_LocalData) {
        _inheritsLoose(LoginLocalData, _LocalData);

        function LoginLocalData(defaultVal) {
          return _LocalData.call(this, "LoginLocalData", defaultVal) || this;
        }

        return LoginLocalData;
      }(LocalData);

      var LoginData = exports('LoginData', /*#__PURE__*/function () {
        function LoginData() {
          this._local = null;
          this.gateData = null;
          this._local = new LoginLocalData({
            accountLastLogin: ""
          });
        }

        _createClass(LoginData, [{
          key: "accountLastLogin",
          get: function get() {
            return this._local.data.accountLastLogin;
          },
          set: function set(v) {
            this._local.data.accountLastLogin = v;

            this._local.save();
          }
        }]);

        return LoginData;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './GameEvent.ts', './Mediator.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, GameEvent, Mediator, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      GameEvent = module.GameEvent;
    }, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "de6055JhYNN7L5imJuvi2QA", "LoginMediator", undefined);
      /**
       * File: LoginMediator
       * Description: 
       * Created on: 2024-11-13 10:09:40
       */


      var LoginMediator = exports('LoginMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(LoginMediator, _Mediator);

        function LoginMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UI;
          _this._skin = "login/loginPanel";
          return _this;
        }

        var _proto = LoginMediator.prototype;

        _proto.onInit = function onInit() {
          _Mediator.prototype.onInit.call(this);
        };

        _proto.onShow = function onShow(param) {
          _Mediator.prototype.onShow.call(this);
        };

        _proto.addListeners = function addListeners() {
          _Mediator.prototype.addListeners.call(this);

          this.on(GameEvent.StartLoad, this.hide, this);
        };

        _proto.removeListeners = function removeListeners() {
          _Mediator.prototype.removeListeners.call(this);

          this.off(GameEvent.StartLoad, this);
        };

        _proto.onHide = function onHide() {
          _Mediator.prototype.onHide.call(this);
        };

        return LoginMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginModule.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './LoginCommand.ts', './LoginMediator.ts', './LoginProxy.ts', './GameEvent.ts', './ModuleType.ts', './Module.ts'], function (exports) {
  var _inheritsLoose, cclegacy, LoginCommand, LoginMediator, LoginProxy, GameEvent, ProxyName, MediatorName, ModuleName, Module;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      LoginCommand = module.LoginCommand;
    }, function (module) {
      LoginMediator = module.LoginMediator;
    }, function (module) {
      LoginProxy = module.LoginProxy;
    }, function (module) {
      GameEvent = module.GameEvent;
    }, function (module) {
      ProxyName = module.ProxyName;
      MediatorName = module.MediatorName;
      ModuleName = module.ModuleName;
    }, function (module) {
      Module = module.Module;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d9f8aX8FcVE/5+hJXn83msH", "LoginModule", undefined);

      var LoginModule = exports('LoginModule', /*#__PURE__*/function (_Module) {
        _inheritsLoose(LoginModule, _Module);

        function LoginModule() {
          return _Module.call(this, ModuleName.Login) || this;
        }

        var _proto = LoginModule.prototype;

        _proto.initializeCommands = function initializeCommands() {
          this.registerCommand(GameEvent.Login, LoginCommand);
        };

        _proto.initializeProxys = function initializeProxys() {
          this.registerProxy(ProxyName.Login, LoginProxy);
        };

        _proto.initializeMediators = function initializeMediators() {
          this.registerMediator(MediatorName.Login, LoginMediator);
        };

        return LoginModule;
      }(Module));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './HttpRequest.ts', './Utils.ts', './Constant2.ts', './LoginData.ts', './SocketUtils.ts', './proto_bundle.mjs_cjs=&original=.js', './MD5.ts', './proto_bundle.js', './GameEvent.ts', './ModuleType.ts', './Proxy.ts'], function (exports) {
  var _inheritsLoose, cclegacy, HttpRequest, LoginData, SocketUtils, Md5Util, _cjsExports, GameEvent, ProxyName, Proxy;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      HttpRequest = module.HttpRequest;
    }, null, null, function (module) {
      LoginData = module.LoginData;
    }, function (module) {
      SocketUtils = module.SocketUtils;
    }, null, function (module) {
      Md5Util = module.Md5Util;
    }, function (module) {
      _cjsExports = module.default;
    }, function (module) {
      GameEvent = module.GameEvent;
    }, function (module) {
      ProxyName = module.ProxyName;
    }, function (module) {
      Proxy = module.Proxy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "92319Dup/tPaqBPv2XDSceX", "LoginProxy", undefined);
      /** 方法名称: loginAccount */
      // {
      //     "accountId": 10000000002,
      //     "areaId": 1,
      //     "gateToken": "MTAwMDAwMDAwMDJfMTczMzgxNzQwMzc4NF80MEQ2QzQwMTkyNUI0NkI5QjJCMDNDRTY2NDlBMzhCQg==",
      //     "loginPath": "ws://192.168.0.108:8001/websocket",
      //     "mainTainValue": 0
      // }


      var LoginProxy = exports('LoginProxy', /*#__PURE__*/function (_DDProxy) {
        _inheritsLoose(LoginProxy, _DDProxy);

        function LoginProxy() {
          return _DDProxy.call(this, ProxyName.Login, new LoginData()) || this;
        }

        var _proto = LoginProxy.prototype;

        _proto.loginHttpGate = function loginHttpGate(account) {
          this._data.accountLastLogin = account;
          var param = {
            cmd: "loginAccount",
            openId: account,
            operatorId: "1",
            version: "1.0.0",
            terminal: "1",
            terminalType: "2",
            channel: 0,
            token: ""
          };
          this.httpGet("loginAccount", param, this.onLoginHttpGateSuccess.bind(this));
        };

        _proto.genHttpParam = function genHttpParam(cmd, param) {
          var newObj = Object.assign({
            cmd: cmd,
            randnum: Date.now()
          }, param);
          var keys = Object.keys(newObj).sort();
          var result = keys.reduce(function (acc, key) {
            return acc + newObj[key].toString();
          }, "");
          newObj.key = Md5Util.md5(result);
          return newObj;
        };

        _proto.httpGet = function httpGet(cmd, param, onComplete) {
          var http = new HttpRequest();
          http.get("", onComplete, this.genHttpParam(cmd, param));
        };

        _proto.onLoginHttpGateSuccess = function onLoginHttpGateSuccess(data) {
          console.log("------------login-->", data);

          if (!data.isSucc) {
            // todo 处理登录异常；
            return;
          } //
          // LoginData.accountId = jd.data.accountId;
          // LoginData.areaId = jd.data.areaId;
          // LoginData.loginPath = jd.data.loginPath;
          // LoginData.gateToken = jd.data.gateToken;


          var gateData = data.res.data;
          this._data.gateData = gateData;
          var tain = gateData.mainTainValue;
          if (tain > 0) ;else {
            SocketUtils.connect(gateData.loginPath);
            setTimeout(this.login.bind(this), 1000);
          }
        };

        _proto.login = function login() {
          var _this = this;

          var mclient = _cjsExports.com.proto.MClient.create();

          mclient.reLogin = 0;
          mclient.channel = 1;
          mclient.version = "1.0.0";
          mclient.terminal = "";
          mclient.terminalType = "";
          var _ref = this._data.gateData,
              accountId = _ref.accountId,
              areaId = _ref.areaId,
              gateToken = _ref.gateToken;
          var msg = {};
          msg.accountId = accountId;
          msg.areaId = areaId;
          msg.client = mclient;
          msg.operatorId = "1";
          msg.loginSign = "";
          msg.gateToken = gateToken;
          msg.loginIp = "xxx";
          console.log("slogin========================", msg);
          SocketUtils.send("2001", msg);
          SocketUtils.on("2001", function (s) {
            console.log("on========================", s);

            _this.event(GameEvent.StartLoad);
          }, this);
        };

        return LoginProxy;
      }(Proxy));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/LoginView.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './ModuleType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, EditBox, Component, facade, ModuleName, ProxyName;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      EditBox = module.EditBox;
      Component = module.Component;
    }, function (module) {
      facade = module.facade;
    }, null, function (module) {
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "c107eMrNgROUKxX1NPsRy7W", "LoginView", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var LoginView = exports('LoginView', (_dec = ccclass("LoginView"), _dec2 = menu("_game/module/LoginView"), _dec3 = property(EditBox), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(LoginView, _Component);

        function LoginView() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "editBox", _descriptor, _assertThisInitialized(_this));

          _this._proxy = void 0;
          return _this;
        }

        var _proto = LoginView.prototype;

        _proto.onLoad = function onLoad() {
          this._proxy = facade.retrieveProxy(ModuleName.Login, ProxyName.Login);
        };

        _proto.onDestroy = function onDestroy() {
          this._proxy = undefined;
        };

        _proto.onEnable = function onEnable() {
          var _this$_proxy$getData$, _this$_proxy;

          this.editBox.string = (_this$_proxy$getData$ = (_this$_proxy = this._proxy) == null ? void 0 : _this$_proxy.getData().accountLastLogin) != null ? _this$_proxy$getData$ : "";
        };

        _proto.onClickLogin = function onClickLogin() {
          var _this$_proxy2;

          var account = this.editBox.string;

          if (account.length == 0) {
            // toast tip  输入为空，请重新输入。
            console.log("输入为空，请重新输入!");
            return;
          }

          (_this$_proxy2 = this._proxy) == null ? void 0 : _this$_proxy2.loginHttpGate(account);
        };

        return LoginView;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "editBox", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MacroCommand.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Notifier.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Notifier;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Notifier = module.Notifier;
    }],
    execute: function () {
      cclegacy._RF.push({}, "1891f6tGM1JrqpvVS7aT/V/", "MacroCommand", undefined);
      /** @public */


      var MacroCommand = exports('MacroCommand', /*#__PURE__*/function (_Notifier) {
        _inheritsLoose(MacroCommand, _Notifier);

        function MacroCommand() {
          var _this;

          _this = _Notifier.call(this) || this; //@ts-ignore

          _this._module = void 0; //@ts-ignore

          _this._subCommands = null;
          _this._subCommands = [];
          return _this;
        }

        var _proto = MacroCommand.prototype;

        _proto.addSubCommand = function addSubCommand(commandClassRef) {
          this._subCommands.push(commandClassRef);
        };

        _proto.setModule = function setModule(module) {
          this._module = module;
        };

        _proto.execute = function execute(n) {
          var subCommands = this._subCommands;

          for (var i = 0; i < subCommands.length; i++) {
            var commandClassRef = subCommands[i];
            var commandClassInstance = new commandClassRef();
            commandClassInstance.setModule(this._module);
            commandClassInstance.execute(n);
          }

          this._subCommands.splice(0);
        };

        _proto.retrieveProxy = function retrieveProxy(proxyName) {
          return this._module.retrieveProxy(proxyName);
        };

        return MacroCommand;
      }(Notifier));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/main", ['./debug-view-runtime-control.ts', './migrate-canvas.ts', './GameInit.ts', './boot.ts', './Singleton.ts', './PureMVC.ts', './Command.ts', './ICommand.ts', './MacroCommand.ts', './SimpleCommand.ts', './Facade.ts', './IFacade.ts', './IMediator.ts', './IViewComponent.ts', './Mediator.ts', './IModule.ts', './Module.ts', './Controller.ts', './IController.ts', './IModel.ts', './Model.ts', './View.ts', './WChannel.ts', './WService.ts', './WSocket.ts', './INotification.ts', './INotifier.ts', './IObserver.ts', './Notification.ts', './Notifier.ts', './Observer.ts', './IData.ts', './IProxy.ts', './Proxy.ts', './PathUtils.ts', './PromiseEx.ts', './SceneRegUtils.ts', './StringUtils.ts', './Utils.ts', './ConfigUtils.ts', './ByteBuf.ts', './lang.ts', './schema.ts', './MD5.ts', './SHA1.ts', './LocalData.ts', './LocalStorageUtils.ts', './ILocalStoragePacker.ts', './PackerCrypto.ts', './PackerNone.ts', './PackerNormal.ts', './HttpRequest.ts', './SocketMerge.ts', './SocketUtils.ts', './proto.bundle.mjs_cjs=&original=.js', './proto_bundle.mjs_cjs=&original=.js', './arrow.ts', './boss.ts', './characterRigid.ts', './colliderItem.ts', './gameCamera.ts', './gameManager.ts', './mapManager.ts', './monster.ts', './monsterModel.ts', './monsterSkillCollider.ts', './dispersion.ts', './dispersionSurround.ts', './energyBall.ts', './fireBall.ts', './fireBallBig.ts', './jetFires.ts', './laser.ts', './tornado.ts', './player.ts', './playerModel.ts', './reward.ts', './test.ts', './warningCircle.ts', './warningLine.ts', './warningStrip.ts', './audioManager.ts', './clientEvent.ts', './btn_adapter.ts', './effectManager.ts', './poolManager.ts', './resourceUtil.ts', './uiManager.ts', './cocosAnalytics.min.mjs_cjs=&original=.js', './Constant2.ts', './SocketConst.ts', './CommonEvent.ts', './FightEvent.ts', './GameEvent.ts', './PlayerEvent.ts', './GameConfig.ts', './constant.ts', './EMapAreaStatus.ts', './ModuleType.ts', './SellType.ts', './FightModule.ts', './DebugFrameCommand.ts', './FightBackCommand.ts', './FightLoadingOverCommand.ts', './BackMediator.ts', './BackPanel.ts', './LevelLoadingMediator.ts', './LoadingPanel.ts', './DebugLevelItem.ts', './DebugPanel.ts', './DebugSkillItem.ts', './FightDebugMediator.ts', './BossBloodBar.ts', './FightFloatLabel.ts', './FightHud.ts', './FightHudMediator.ts', './monsterBloodBar.ts', './playerBloodBar.ts', './tips.ts', './PauseMediator.ts', './PausePanel.ts', './SkillIcon.ts', './SkillList.ts', './ReviveMediator.ts', './RevivePanel.ts', './SettlementMediator.ts', './SettlementPanel.ts', './ShopItem.ts', './ShopMediator.ts', './ShopPanel.ts', './SkillItem.ts', './SkillMediator.ts', './SkillPanel.ts', './GameModule.ts', './GameData.ts', './GameProxy.ts', './HomeModule.ts', './Home.ts', './HomeMediator.ts', './Setting.ts', './SettingMediator.ts', './LoadingModule.ts', './Background.ts', './LoadingCommand.ts', './LoadingConst.ts', './LoadingMediator.ts', './LoadingView.ts', './LoginModule.ts', './LoginCommand.ts', './LoginMediator.ts', './LoginView.ts', './LoginData.ts', './LoginProxy.ts', './ViewMgr.ts', './PlayerModule.ts', './NewPLayerData.ts', './PlayerProxy.ts', './camera.ts', './joystick.ts', './lodash.ts', './util.ts', './LanguageData.ts', './LocalizedLabel.ts', './LocalizedMaterial.ts', './LocalizedSprite.ts'], function () {
  return {
    setters: [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null],
    execute: function () {}
  };
});

System.register("chunks:///_virtual/mapManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts', './monster.ts', './boss.ts', './resourceUtil.ts', './gameManager.ts', './clientEvent.ts', './audioManager.ts', './poolManager.ts', './Utils.ts', './ConfigUtils.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, _decorator, Vec3, Component, isValid, PhysicsSystem, Node, Constant, Monster, Boss, ResourceUtil, GameManager, ClientEvent, AudioManager, PoolManager, ConfigUtils;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Component = module.Component;
      isValid = module.isValid;
      PhysicsSystem = module.PhysicsSystem;
      Node = module.Node;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      Monster = module.Monster;
    }, function (module) {
      Boss = module.Boss;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, null, function (module) {
      ConfigUtils = module.ConfigUtils;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "d3b32wEGk5A9ptwhpJ6lghY", "mapManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //关卡模型管理脚本（怪物、爱心、障碍、npc）

      var MapManager = exports('MapManager', (_dec = ccclass('MapManager'), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MapManager, _Component);

        function MapManager() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._ndAn = null; //默认暗夜地图节点

          _this._ndAnS = null; //S型暗夜地图节点

          _this._warpGateWorPos_1 = new Vec3(16.414, 1.635, -0.804); //an地图传送门位置

          _this._warpGateWorPos_2 = new Vec3(34.61, 1.635, -20); //anS地图传送门位置

          _this._ndWarpGate = null; //传送门

          _this._completeListener = null; //加载完成回调

          _this._arrItem = []; //存放各项模块节点信息, 除了道路,在玩家后面一定距离则进行回收

          _this._arrMap = []; //当前关卡数据表

          _this._dictModuleType = void 0;
          return _this;
        }

        var _proto = MapManager.prototype; //是否是S型暗夜地图

        _proto.onEnable = function onEnable() {
          ClientEvent.on(Constant.EVENT_TYPE.SHOW_WARP_GATE, this._showWarpGate, this);
        };

        _proto.onDisable = function onDisable() {
          ClientEvent.off(Constant.EVENT_TYPE.SHOW_WARP_GATE, this._showWarpGate, this);
        };

        _proto.start = function start() {// [3]
        };

        _proto.buildMap = function buildMap(mapName, progressCb, completeCb) {
          var _this2 = this;

          this._completeListener = completeCb;
          this._dictModuleType = {};
          this._arrItem = [];
          this._arrMap = [];
          this._arrMap = ConfigUtils.getTableArr(mapName).concat();

          var cb = function cb() {
            if (mapName.startsWith("map1")) {
              _this2._ndAn && (_this2._ndAn.active = false);
              _this2._ndAnS && (_this2._ndAnS.active = true);
              MapManager.isMapAnS = true;
            } else {
              _this2._ndAn && (_this2._ndAn.active = true);
              _this2._ndAnS && (_this2._ndAnS.active = false);
              MapManager.isMapAnS = false;
            }

            if (isValid(_this2._ndWarpGate)) {
              if (PhysicsSystem.PHYSICS_PHYSX) {
                _this2._ndWarpGate.destroy();
              } else {
                PoolManager.instance.putNode(_this2._ndWarpGate);
              }
            }

            for (var i = _this2._arrMap.length - 1; i >= 0; i--) {
              var item = _this2._arrMap[i];
              var baseInfo = ConfigUtils.queryByID('base', item.id);

              if (!_this2._dictModuleType.hasOwnProperty(baseInfo.type)) {
                _this2._dictModuleType[baseInfo.type] = [];
              }

              _this2._dictModuleType[baseInfo.type].push(item);
            }

            var arrPromise = [];

            for (var _i in _this2._dictModuleType) {
              var _item = _this2._dictModuleType[_i];

              if (_item.length) {
                arrPromise.push(_this2._buildModel(_i));
              }
            }

            Promise.all(arrPromise).then(function () {
              _this2._completeListener && _this2._completeListener();
              console.log("load " + mapName + " over");
            })["catch"](function (e) {
              console.error("load item module err", e);
            });
          };

          if (mapName.startsWith("map0") && !this._ndAn) {
            ResourceUtil.loadModelRes('scene/an').then(function (prefab) {
              _this2._ndAn = PoolManager.instance.getNode(prefab, _this2.node.parent);
              cb();
            });
          } else if (mapName.startsWith("map1") && !this._ndAnS) {
            ResourceUtil.loadModelRes('scene/anS').then(function (prefab) {
              _this2._ndAnS = PoolManager.instance.getNode(prefab, _this2.node.parent);
              cb();
            });
          } else {
            cb();
          }
        };

        _proto._buildModel = function _buildModel(type) {
          var _this3 = this;

          return new Promise(function (resolve, reject) {
            var arrPromise = [];
            var objItems = _this3._dictModuleType[type]; //同类型的信息

            _this3._dictModuleType[type] = [];

            var _loop = function _loop() {
              //怪物在该层级别的配置信息
              var layerInfo = objItems[idx]; //怪物的模块数据

              var baseInfo = ConfigUtils.queryByID("base", layerInfo.id);
              var modelPath = type + "/" + baseInfo.resName;
              var p = ResourceUtil.loadModelRes(modelPath).then(function (prefab) {
                var parentName = type + 'Group'; //先创建父节点

                var ndParent = _this3.node.getChildByName(parentName);

                if (!ndParent) {
                  ndParent = new Node(parentName);
                  ndParent.parent = _this3.node;
                }

                var ndChild = PoolManager.instance.getNode(prefab, ndParent);
                var position = layerInfo.position ? layerInfo.position.split(',') : baseInfo.position.split(',');
                var angle = layerInfo.angle ? layerInfo.angle.split(',') : baseInfo.angle.split(',');
                var scale = layerInfo.scale ? layerInfo.scale.split(',') : baseInfo.scale.split(',');
                ndChild.setPosition(new Vec3(Number(position[0]), Number(position[1]), Number(position[2])));
                ndChild.eulerAngles = new Vec3(Number(angle[0]), Number(angle[1]), Number(angle[2]));
                ndChild.setScale(new Vec3(Number(scale[0]), Number(scale[1]), Number(scale[2]))); //test

                if (baseInfo.type === Constant.BASE_TYPE.MONSTER) {
                  var scriptMonster = ndChild == null ? void 0 : ndChild.getComponent(Monster);
                  scriptMonster.init(baseInfo, layerInfo);
                  GameManager.arrMonster.push(ndChild);
                } else if (baseInfo.type === Constant.BASE_TYPE.BOSS) {
                  GameManager.arrMonster.push(ndChild);
                  GameManager.ndBoss = ndChild;
                  GameManager.scriptBoss = ndChild == null ? void 0 : ndChild.getComponent(Boss);
                  GameManager.scriptBoss.init(baseInfo, layerInfo);
                } else if (baseInfo.type === Constant.BASE_TYPE.NPC) {
                  GameManager.existentNum += 1;
                } else if (baseInfo.type === Constant.BASE_TYPE.HEART) {
                  GameManager.existentNum += 1;
                }

                _this3._arrItem.push(ndChild);
              });
              arrPromise.push(p);
            };

            for (var idx = 0; idx < objItems.length; idx++) {
              _loop();
            }

            Promise.all(arrPromise).then(function () {
              resolve(null);
            })["catch"](function (e) {
              console.error("e", e);
            });
          });
        }
        /**
         * 回收模块
         */
        ;

        _proto.recycle = function recycle() {
          for (var index = 0; index < this._arrItem.length; index++) {
            var element = this._arrItem[index];

            this._recycleModel(element);
          }

          this.node.removeAllChildren();
        }
        /**
         * 回收子模块
         * @param ndItem 
         */
        ;

        _proto._recycleModel = function _recycleModel(ndItem) {
          PoolManager.instance.putNode(ndItem);
        }
        /**
         * 展示传送门
         *
         * @private
         * @memberof GameManager
         */
        ;

        _proto._showWarpGate = function _showWarpGate() {
          var _this4 = this;

          ResourceUtil.loadModelRes("warpGate/warpGate").then(function (pf) {
            _this4._ndWarpGate = PoolManager.instance.getNode(pf, _this4.node.parent);
            AudioManager.instance.playSound(Constant.SOUND.SHOW_WRAP_GATE);

            if (_this4._ndAn && _this4._ndAn.active) {
              _this4._ndWarpGate.setWorldPosition(_this4._warpGateWorPos_1);
            } else {
              _this4._ndWarpGate.setWorldPosition(_this4._warpGateWorPos_2);
            }
          });
        };

        _createClass(MapManager, null, [{
          key: "isMapAnS",
          get: function get() {
            return this._isMapAnS;
          },
          set: function set(v) {
            this._isMapAnS = v;
          }
        }]);

        return MapManager;
      }(Component), _class2._isMapAnS = false, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/MD5.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "393efLm7b1FwpQ3c6yffWlN", "MD5", undefined);

      var Md5Util = exports('Md5Util', /*#__PURE__*/function () {
        function Md5Util() {}

        Md5Util.md5 = function md5(string) {
          var self = this;
          var x;
          var k, AA, BB, CC, DD, a, b, c, d;
          var S11 = 7,
              S12 = 12,
              S13 = 17,
              S14 = 22;
          var S21 = 5,
              S22 = 9,
              S23 = 14,
              S24 = 20;
          var S31 = 4,
              S32 = 11,
              S33 = 16,
              S34 = 23;
          var S41 = 6,
              S42 = 10,
              S43 = 15,
              S44 = 21;
          string = self.Utf8Encode(string);
          x = self.ConvertToWordArray(string);
          a = 0x67452301;
          b = 0xefcdab89;
          c = 0x98badcfe;
          d = 0x10325476;

          for (k = 0; k < x.length; k += 16) {
            AA = a;
            BB = b;
            CC = c;
            DD = d;
            a = self.FF(a, b, c, d, x[k + 0], S11, 0xd76aa478);
            d = self.FF(d, a, b, c, x[k + 1], S12, 0xe8c7b756);
            c = self.FF(c, d, a, b, x[k + 2], S13, 0x242070db);
            b = self.FF(b, c, d, a, x[k + 3], S14, 0xc1bdceee);
            a = self.FF(a, b, c, d, x[k + 4], S11, 0xf57c0faf);
            d = self.FF(d, a, b, c, x[k + 5], S12, 0x4787c62a);
            c = self.FF(c, d, a, b, x[k + 6], S13, 0xa8304613);
            b = self.FF(b, c, d, a, x[k + 7], S14, 0xfd469501);
            a = self.FF(a, b, c, d, x[k + 8], S11, 0x698098d8);
            d = self.FF(d, a, b, c, x[k + 9], S12, 0x8b44f7af);
            c = self.FF(c, d, a, b, x[k + 10], S13, 0xffff5bb1);
            b = self.FF(b, c, d, a, x[k + 11], S14, 0x895cd7be);
            a = self.FF(a, b, c, d, x[k + 12], S11, 0x6b901122);
            d = self.FF(d, a, b, c, x[k + 13], S12, 0xfd987193);
            c = self.FF(c, d, a, b, x[k + 14], S13, 0xa679438e);
            b = self.FF(b, c, d, a, x[k + 15], S14, 0x49b40821);
            a = self.GG(a, b, c, d, x[k + 1], S21, 0xf61e2562);
            d = self.GG(d, a, b, c, x[k + 6], S22, 0xc040b340);
            c = self.GG(c, d, a, b, x[k + 11], S23, 0x265e5a51);
            b = self.GG(b, c, d, a, x[k + 0], S24, 0xe9b6c7aa);
            a = self.GG(a, b, c, d, x[k + 5], S21, 0xd62f105d);
            d = self.GG(d, a, b, c, x[k + 10], S22, 0x2441453);
            c = self.GG(c, d, a, b, x[k + 15], S23, 0xd8a1e681);
            b = self.GG(b, c, d, a, x[k + 4], S24, 0xe7d3fbc8);
            a = self.GG(a, b, c, d, x[k + 9], S21, 0x21e1cde6);
            d = self.GG(d, a, b, c, x[k + 14], S22, 0xc33707d6);
            c = self.GG(c, d, a, b, x[k + 3], S23, 0xf4d50d87);
            b = self.GG(b, c, d, a, x[k + 8], S24, 0x455a14ed);
            a = self.GG(a, b, c, d, x[k + 13], S21, 0xa9e3e905);
            d = self.GG(d, a, b, c, x[k + 2], S22, 0xfcefa3f8);
            c = self.GG(c, d, a, b, x[k + 7], S23, 0x676f02d9);
            b = self.GG(b, c, d, a, x[k + 12], S24, 0x8d2a4c8a);
            a = self.HH(a, b, c, d, x[k + 5], S31, 0xfffa3942);
            d = self.HH(d, a, b, c, x[k + 8], S32, 0x8771f681);
            c = self.HH(c, d, a, b, x[k + 11], S33, 0x6d9d6122);
            b = self.HH(b, c, d, a, x[k + 14], S34, 0xfde5380c);
            a = self.HH(a, b, c, d, x[k + 1], S31, 0xa4beea44);
            d = self.HH(d, a, b, c, x[k + 4], S32, 0x4bdecfa9);
            c = self.HH(c, d, a, b, x[k + 7], S33, 0xf6bb4b60);
            b = self.HH(b, c, d, a, x[k + 10], S34, 0xbebfbc70);
            a = self.HH(a, b, c, d, x[k + 13], S31, 0x289b7ec6);
            d = self.HH(d, a, b, c, x[k + 0], S32, 0xeaa127fa);
            c = self.HH(c, d, a, b, x[k + 3], S33, 0xd4ef3085);
            b = self.HH(b, c, d, a, x[k + 6], S34, 0x4881d05);
            a = self.HH(a, b, c, d, x[k + 9], S31, 0xd9d4d039);
            d = self.HH(d, a, b, c, x[k + 12], S32, 0xe6db99e5);
            c = self.HH(c, d, a, b, x[k + 15], S33, 0x1fa27cf8);
            b = self.HH(b, c, d, a, x[k + 2], S34, 0xc4ac5665);
            a = self.II(a, b, c, d, x[k + 0], S41, 0xf4292244);
            d = self.II(d, a, b, c, x[k + 7], S42, 0x432aff97);
            c = self.II(c, d, a, b, x[k + 14], S43, 0xab9423a7);
            b = self.II(b, c, d, a, x[k + 5], S44, 0xfc93a039);
            a = self.II(a, b, c, d, x[k + 12], S41, 0x655b59c3);
            d = self.II(d, a, b, c, x[k + 3], S42, 0x8f0ccc92);
            c = self.II(c, d, a, b, x[k + 10], S43, 0xffeff47d);
            b = self.II(b, c, d, a, x[k + 1], S44, 0x85845dd1);
            a = self.II(a, b, c, d, x[k + 8], S41, 0x6fa87e4f);
            d = self.II(d, a, b, c, x[k + 15], S42, 0xfe2ce6e0);
            c = self.II(c, d, a, b, x[k + 6], S43, 0xa3014314);
            b = self.II(b, c, d, a, x[k + 13], S44, 0x4e0811a1);
            a = self.II(a, b, c, d, x[k + 4], S41, 0xf7537e82);
            d = self.II(d, a, b, c, x[k + 11], S42, 0xbd3af235);
            c = self.II(c, d, a, b, x[k + 2], S43, 0x2ad7d2bb);
            b = self.II(b, c, d, a, x[k + 9], S44, 0xeb86d391);
            a = self.AddUnsigned(a, AA);
            b = self.AddUnsigned(b, BB);
            c = self.AddUnsigned(c, CC);
            d = self.AddUnsigned(d, DD);
          }

          var temp = self.WordToHex(a) + self.WordToHex(b) + self.WordToHex(c) + self.WordToHex(d);
          return temp.toUpperCase();
        };

        Md5Util.RotateLeft = function RotateLeft(lValue, iShiftBits) {
          return lValue << iShiftBits | lValue >>> 32 - iShiftBits;
        };

        Md5Util.AddUnsigned = function AddUnsigned(lX, lY) {
          var lX4, lY4, lX8, lY8, lResult;
          lX8 = lX & 0x80000000;
          lY8 = lY & 0x80000000;
          lX4 = lX & 0x40000000;
          lY4 = lY & 0x40000000;
          lResult = (lX & 0x3fffffff) + (lY & 0x3fffffff);

          if (lX4 & lY4) {
            return lResult ^ 0x80000000 ^ lX8 ^ lY8;
          }

          if (lX4 | lY4) {
            if (lResult & 0x40000000) {
              return lResult ^ 0xc0000000 ^ lX8 ^ lY8;
            } else {
              return lResult ^ 0x40000000 ^ lX8 ^ lY8;
            }
          } else {
            return lResult ^ lX8 ^ lY8;
          }
        };

        Md5Util.F = function F(x, y, z) {
          return x & y | ~x & z;
        };

        Md5Util.G = function G(x, y, z) {
          return x & z | y & ~z;
        };

        Md5Util.H = function H(x, y, z) {
          return x ^ y ^ z;
        };

        Md5Util.I = function I(x, y, z) {
          return y ^ (x | ~z);
        };

        Md5Util.FF = function FF(a, b, c, d, x, s, ac) {
          var self = this;
          a = self.AddUnsigned(a, self.AddUnsigned(self.AddUnsigned(self.F(b, c, d), x), ac));
          return self.AddUnsigned(self.RotateLeft(a, s), b);
        };

        Md5Util.GG = function GG(a, b, c, d, x, s, ac) {
          var self = this;
          a = self.AddUnsigned(a, self.AddUnsigned(self.AddUnsigned(self.G(b, c, d), x), ac));
          return self.AddUnsigned(self.RotateLeft(a, s), b);
        };

        Md5Util.HH = function HH(a, b, c, d, x, s, ac) {
          var self = this;
          a = self.AddUnsigned(a, self.AddUnsigned(self.AddUnsigned(self.H(b, c, d), x), ac));
          return self.AddUnsigned(self.RotateLeft(a, s), b);
        };

        Md5Util.II = function II(a, b, c, d, x, s, ac) {
          var self = this;
          a = self.AddUnsigned(a, self.AddUnsigned(self.AddUnsigned(self.I(b, c, d), x), ac));
          return self.AddUnsigned(self.RotateLeft(a, s), b);
        };

        Md5Util.ConvertToWordArray = function ConvertToWordArray(string) {
          var lWordCount;
          var lMessageLength = string.length;
          var lNumberOfWords_temp1 = lMessageLength + 8;
          var lNumberOfWords_temp2 = (lNumberOfWords_temp1 - lNumberOfWords_temp1 % 64) / 64;
          var lNumberOfWords = (lNumberOfWords_temp2 + 1) * 16;
          var lWordArray = Array(lNumberOfWords - 1);
          var lBytePosition = 0;
          var lByteCount = 0;

          while (lByteCount < lMessageLength) {
            lWordCount = (lByteCount - lByteCount % 4) / 4;
            lBytePosition = lByteCount % 4 * 8;
            lWordArray[lWordCount] = lWordArray[lWordCount] | string.charCodeAt(lByteCount) << lBytePosition;
            lByteCount++;
          }

          lWordCount = (lByteCount - lByteCount % 4) / 4;
          lBytePosition = lByteCount % 4 * 8;
          lWordArray[lWordCount] = lWordArray[lWordCount] | 0x80 << lBytePosition;
          lWordArray[lNumberOfWords - 2] = lMessageLength << 3;
          lWordArray[lNumberOfWords - 1] = lMessageLength >>> 29;
          return lWordArray;
        };

        Md5Util.WordToHex = function WordToHex(lValue) {
          var WordToHexValue = "",
              WordToHexValue_temp = "",
              lByte,
              lCount;

          for (lCount = 0; lCount <= 3; lCount++) {
            lByte = lValue >>> lCount * 8 & 255;
            WordToHexValue_temp = "0" + lByte.toString(16);
            WordToHexValue = WordToHexValue + WordToHexValue_temp.substr(WordToHexValue_temp.length - 2, 2);
          }

          return WordToHexValue;
        };

        Md5Util.Utf8Encode = function Utf8Encode(string) {
          var utftext = "";

          for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);

            if (c < 128) {
              utftext += String.fromCharCode(c);
            } else if (c > 127 && c < 2048) {
              utftext += String.fromCharCode(c >> 6 | 192);
              utftext += String.fromCharCode(c & 63 | 128);
            } else {
              utftext += String.fromCharCode(c >> 12 | 224);
              utftext += String.fromCharCode(c >> 6 & 63 | 128);
              utftext += String.fromCharCode(c & 63 | 128);
            }
          }

          return utftext;
        };

        return Md5Util;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Mediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Notifier.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, Notifier;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Notifier = module.Notifier;
    }],
    execute: function () {
      cclegacy._RF.push({}, "92ae8ZczCJFz7DSMNEsoZSU", "Mediator", undefined);
      /** @public */


      var MediatorBase = /*#__PURE__*/function (_Notifier) {
        _inheritsLoose(MediatorBase, _Notifier);

        function MediatorBase(viewComponent) {
          var _this;

          if (viewComponent === void 0) {
            viewComponent = null;
          }

          _this = _Notifier.call(this) || this;
          _this.__name__ = void 0;
          _this._module = void 0;
          _this.viewNode = null;
          _this.viewNode = viewComponent;
          return _this;
        }

        var _proto = MediatorBase.prototype;

        _proto.retrieveProxy = function retrieveProxy(proxyName) {
          var _this$_module;

          return (_this$_module = this._module) == null ? void 0 : _this$_module.retrieveProxy(proxyName);
        }
        /**
         * @deprecated This method will be removed in next version
         * Use `on()` instead for better performance.
         */
        ;

        _proto.onNotification = function onNotification(event, method, context) {
          var _this$_module2;

          (_this$_module2 = this._module) == null ? void 0 : _this$_module2.registerObserver(event, method, context);
        };

        _proto.on = function on(event, method, context) {
          var _this$_module3;

          (_this$_module3 = this._module) == null ? void 0 : _this$_module3.registerObserver(event, method, context);
        }
        /**
         * @deprecated This method will be removed in next version
         * Use `off()` instead for better performance.
         */
        ;

        _proto.offNotification = function offNotification(event, context) {
          var _this$_module4;

          (_this$_module4 = this._module) == null ? void 0 : _this$_module4.removeObserver(event, context);
        };

        _proto.off = function off(event, context) {
          var _this$_module5;

          (_this$_module5 = this._module) == null ? void 0 : _this$_module5.removeObserver(event, context);
        };

        _proto.setModule = function setModule(module) {
          this._module = module;
        };

        _proto.getModule = function getModule() {
          return this._module;
        };

        _proto.setName = function setName(val) {
          this.__name__ = val;
        };

        _proto.getName = function getName() {
          return this.__name__;
        };

        _proto.listNotificationInterests = function listNotificationInterests() {
          return [];
        };

        _proto.handleNotification = function handleNotification(notification) {};

        _proto.onRegister = function onRegister() {};

        _proto.onRemove = function onRemove() {};

        return MediatorBase;
      }(Notifier);

      var MediatorStatus = /*#__PURE__*/function (MediatorStatus) {
        MediatorStatus[MediatorStatus["Default"] = 0] = "Default";
        MediatorStatus[MediatorStatus["Loading"] = 1] = "Loading";
        MediatorStatus[MediatorStatus["Show"] = 2] = "Show";
        return MediatorStatus;
      }(MediatorStatus || {}); // 显示中


      var Mediator = exports('Mediator', /*#__PURE__*/function (_MediatorBase) {
        _inheritsLoose(Mediator, _MediatorBase);

        function Mediator() {
          var _this2;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this2 = _MediatorBase.call.apply(_MediatorBase, [this].concat(args)) || this;
          _this2._skin = void 0; // protected _parent: EViewLayer;

          _this2._parent = void 0; // protected _defaultParent: EViewLayer;

          _this2._defaultParent = void 0;
          _this2._showParam = void 0;
          _this2._status = MediatorStatus.Default;
          return _this2;
        }

        Mediator.showEvent = function showEvent(module, mediator) {
          return "Show_" + module + "_" + mediator;
        };

        Mediator.hideEvent = function hideEvent(module, mediator) {
          return "Hide_" + module + "_" + mediator;
        };

        var _proto2 = Mediator.prototype;

        _proto2.init = function init() {
          var _this3 = this;

          this._status = MediatorStatus.Loading;

          if (this._skin) {
            this.facade.loadUI(this._skin).then(function (node) {
              _this3._status = MediatorStatus.Show;
              _this3.viewNode = node;

              _this3.onCreateViewCompleted();
            });
          } else {
            if (this.viewNode) {
              this._status = MediatorStatus.Show;
              this.onCreateViewCompleted();
            } else {
              this.warn("show", "[view is null!!!]");
            }
          }
        };

        _proto2.getNode = function getNode() {
          return this.viewNode;
        };

        _proto2.getComponent = function getComponent(classConstructor) {
          var node = this.getNode();
          if (!node) return null;
          return node.getComponent(classConstructor);
        };

        _proto2.doShow = function doShow() {
          if (this._status === MediatorStatus.Show) {
            this.onCreateViewCompleted();
            return;
          }

          this.init();
        };

        _proto2.onCreateViewCompleted = function onCreateViewCompleted() {
          this._status = MediatorStatus.Show;
          var viewCompoent = this.viewNode;
          this.facade.tryAdd(this._parent, viewCompoent);
          this.onInit();
          this.addListeners();
          this.event(Mediator.showEvent(this.getModule().getName(), this.getName()));
          this.onShow(this._showParam);
        };

        _proto2.warn = function warn(method) {
          var _console;

          for (var _len2 = arguments.length, param = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
            param[_key2 - 1] = arguments[_key2];
          }

          (_console = console).warn.apply(_console, [this.getName() + "---" + method + "--->"].concat(param));
        }
        /**
         * @生命周期函数
         * 界面资源加载完成 
         * 首次init后调用一次
         */
        ;

        _proto2.onAssetLoaded = function onAssetLoaded() {}
        /**
         * @生命周期函数
         * 界面初始化完成 在onAssetLoaded之后 
         * 首次init后调用一次 可用于初始化数据
         */
        ;

        _proto2.onInit = function onInit() {}
        /**
         * @生命周期函数
         * 用来添加界面需要的事件监听
         * 每次打开界面都会调用一次
         */
        ;

        _proto2.addListeners = function addListeners() {}
        /**
         * @生命周期函数
         * 用来移除界面需要的事件监听
         * 每次关闭界面都会调用一次
         */
        ;

        _proto2.removeListeners = function removeListeners() {}
        /**
         * @生命周期函数
         * 打开界面时触发
         * 每次打开界面都会调用一次
         */
        ;

        _proto2.onShow = function onShow(param) {}
        /**
         * @生命周期函数
         * 关闭界面时触发
         * 每次关闭界面都会调用一次
         */
        ;

        _proto2.onHide = function onHide() {};

        _proto2.getModule = function getModule() {
          return _MediatorBase.prototype.getModule.call(this);
        };

        _proto2.show = function show(param, parent) {
          if (this._status != MediatorStatus.Default) {
            this.warn("show", "[repeat show meditor]");
            return;
          }

          this._showParam = param;
          this._parent = parent == null ? this._defaultParent : parent;

          if (this._parent == null) {
            this.warn("show", "parent is null");
            return;
          }

          this.doShow();
        };

        _proto2.hide = function hide(destroyImmediately) {
          if (destroyImmediately === void 0) {
            destroyImmediately = true;
          }

          if (this._status == MediatorStatus.Default) {
            this.warn("hide", "[try to hide a mediator not show]");
            return;
          } // if (this._isLoading) return;
          // this._isLoading = true;
          // Laya.loader.load(this._skin).then((res)=>{
          //     this._isInit = true;
          //     this._isLoading = false;
          //     this.viewNode = res.create();
          //     this.onAssetLoaded();
          //     this.onInit();
          //     this.onCreateViewCompleted();
          // } );
          // let viewCompoent = this.getViewComponent();
          // this._parent.addChild(viewCompoent);
          // this.addListeners();
          // this.onShow();
          //=-====
          // this._status = MediatorStatus.Default


          if (this._status == MediatorStatus.Loading) {
            // cancelLoadByUrl(url: string): void;
            // 资源没加载完 不会跑后面的流程 所以什么都不做 取消这个加载就行了
            this.warn("hide", "[try to hide a mediator in loading assets]");
          } else {
            var view = this.getNode();
            view.removeFromParent();
            this._parent = undefined;
            this.removeListeners();
            this._showParam = null;
            this.event(Mediator.hideEvent(this.getModule().getName(), this.getName()));
            this.onHide();
            var name = this.getName();
            var module = this.getModule();

            if (destroyImmediately) {
              module.removeMediator(name);
            } else {
              module.destroyViewLater(name);
            }
          }
        };

        _proto2.showView = function showView(mediator) {
          this.getModule().showView(mediator);
        };

        _proto2.hideView = function hideView(mediator) {
          this.getModule().hideView(mediator);
        };

        _proto2.showModuleView = function showModuleView(module, mediator) {
          var _this$facade$retrieve;

          (_this$facade$retrieve = this.facade.retrieveModule(module)) == null ? void 0 : _this$facade$retrieve.showView(mediator);
        };

        _proto2.hideModuleView = function hideModuleView(module, mediator) {
          var _this$facade$retrieve2;

          (_this$facade$retrieve2 = this.facade.retrieveModule(module)) == null ? void 0 : _this$facade$retrieve2.hideView(mediator);
        };

        _proto2.onClickExtraArea = function onClickExtraArea() {};

        _createClass(Mediator, [{
          key: "parentNode",
          get: function get() {
            return this.getNode().parent;
          }
        }]);

        return Mediator;
      }(MediatorBase));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/migrate-canvas.ts", ['cc'], function () {
  var cclegacy, director, Director, Canvas, Camera, game;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      director = module.director;
      Director = module.Director;
      Canvas = module.Canvas;
      Camera = module.Camera;
      game = module.game;
    }],
    execute: function () {
      cclegacy._RF.push({}, "7bb93gANKpA/5QU2qBaDZjt", "migrate-canvas", undefined);

      var customLayerMask = 0x000fffff;
      var builtinLayerMask = 0xfff00000;
      director.on(Director.EVENT_AFTER_SCENE_LAUNCH, function () {
        var _director$getScene, _director$getScene2, _director$getScene3;

        var roots = (_director$getScene = director.getScene()) == null ? void 0 : _director$getScene.children;
        var allCanvases = (_director$getScene2 = director.getScene()) == null ? void 0 : _director$getScene2.getComponentsInChildren(Canvas);
        if (allCanvases.length <= 1) return;
        allCanvases = allCanvases.filter(function (x) {
          return !!x.cameraComponent;
        });
        var allCameras = (_director$getScene3 = director.getScene()) == null ? void 0 : _director$getScene3.getComponentsInChildren(Camera);
        var usedLayer = 0;
        allCameras.forEach(function (x) {
          return usedLayer |= x.visibility & customLayerMask;
        });
        var persistCanvas = [];

        for (var i = 0, l = roots.length; i < l; i++) {
          var root = roots[i];
          if (!game.isPersistRootNode(root)) continue;
          var canvases = root.getComponentsInChildren(Canvas);
          if (canvases.length === 0) continue;
          persistCanvas.push.apply(persistCanvas, canvases.filter(function (x) {
            return !!x.cameraComponent;
          }));
        }

        persistCanvas.forEach(function (val) {
          var isLayerCollided = allCanvases.find(function (x) {
            return x !== val && x.cameraComponent.visibility & val.cameraComponent.visibility & customLayerMask;
          });

          if (isLayerCollided) {
            var availableLayers = ~usedLayer;
            var lastAvailableLayer = availableLayers & ~(availableLayers - 1);
            val.cameraComponent.visibility = lastAvailableLayer | val.cameraComponent.visibility & builtinLayerMask;
            setChildrenLayer(val.node, lastAvailableLayer);
            usedLayer |= availableLayers;
          }
        });
      });

      function setChildrenLayer(node, layer) {
        for (var i = 0, l = node.children.length; i < l; i++) {
          node.children[i].layer = layer;
          setChildrenLayer(node.children[i], layer);
        }
      }

      var setParentEngine = cc.Node.prototype.setParent;

      cc.Node.prototype.setParent = function (value, keepWorldTransform) {
        setParentEngine.call(this, value, keepWorldTransform);
        if (!value) return; // find canvas

        var layer = getCanvasCameraLayer(this);

        if (layer) {
          this.layer = layer;
          setChildrenLayer(this, layer);
        }
      };

      function getCanvasCameraLayer(node) {
        var layer = null;
        var canvas = node.getComponent(Canvas);

        if (canvas && canvas.cameraComponent) {
          if (canvas.cameraComponent.visibility & canvas.node.layer) {
            layer = canvas.node.layer;
          } else {
            layer = canvas.cameraComponent.visibility & ~(canvas.cameraComponent.visibility - 1);
          }

          return layer;
        }

        if (node.parent) {
          layer = getCanvasCameraLayer(node.parent);
        }

        return layer;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Model.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ba1566J7GhGK7pqUno+ouyF", "Model", undefined);

      var Model = exports('Model', /*#__PURE__*/function () {
        function Model() {
          this._proxyMap = null;
          this._proxyMap = {};
        }

        var _proto = Model.prototype;

        _proto.retrieveProxy = function retrieveProxy(proxyName) {
          return this._proxyMap[proxyName] || null;
        };

        _proto.removeProxy = function removeProxy(proxyName) {
          var proxy = this.retrieveProxy(proxyName);

          if (proxy) {
            delete this._proxyMap[proxyName];
            proxy.onRemove();
          }

          return proxy;
        };

        _proto.hasProxy = function hasProxy(proxyName) {
          return this.retrieveProxy(proxyName) != null;
        };

        _proto.registerProxy = function registerProxy(proxyName, proxy) {
          this._proxyMap[proxyName] = proxy;
          proxy.onRegister();
        } // 网络重连暂时忽略
        // private onConnectLost(isDirectlyConnectSocket: boolean): void {
        //     for (let k in this._proxyMap) {
        //         let proxy = this._proxyMap[k];
        //         if (proxy) {
        //             proxy.startReconnect();
        //         }
        //     }
        //     this._proxyMap = {};
        //     // self.initializeModel();
        // };
        ;

        return Model;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Module.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Facade.ts', './Controller.ts', './Model.ts', './View.ts', './Notifier.ts', './Observer.ts'], function (exports) {
  var _inheritsLoose, _assertThisInitialized, cclegacy, Facade, Controller, Model, View, Notifier, Observer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Facade = module.Facade;
    }, function (module) {
      Controller = module.Controller;
    }, function (module) {
      Model = module.Model;
    }, function (module) {
      View = module.View;
    }, function (module) {
      Notifier = module.Notifier;
    }, function (module) {
      Observer = module.Observer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "bfc65Db53xI9ZYYsKY5d8Ct", "Module", undefined);
      /** @public */


      var Module = exports('Module', /*#__PURE__*/function (_Notifier) {
        _inheritsLoose(Module, _Notifier);

        function Module(name) {
          var _this;

          _this = _Notifier.call(this) || this;
          _this._name = void 0;
          _this._view = void 0;
          _this._model = void 0;
          _this._controller = void 0;
          _this._hideList = [];
          _this._name = name;
          _this._view = new View(_assertThisInitialized(_this));
          _this._model = new Model();
          _this._controller = new Controller(_assertThisInitialized(_this)); // module在初始化时自动注册到facade单例中去；注册成功后调用initialize； 

          Facade.ins.registerModule(_assertThisInitialized(_this));
          return _this;
        }
        /**
         * 子类继承 
         * 注册模块需要监听执行的Command
         * this.registerCommand("x", CommandX);
         */


        var _proto = Module.prototype;

        _proto.initializeCommands = function initializeCommands() {}
        /**
         * 子类继承 
         * 注册模块用到Proxy
         * this.registerProxy(ProxyX);
         */
        ;

        _proto.initializeProxys = function initializeProxys() {}
        /**
         * 子类继承 
         * 注册模块用到Mediator
         * this.registerMediator(MediatorX);
         */
        ;

        _proto.initializeMediators = function initializeMediators() {};

        _proto.initialize = function initialize() {
          this.initializeCommands();
          this.initializeProxys();
          this.initializeMediators();
        };

        _proto.getName = function getName() {
          return this._name;
        };

        _proto.registerCommand = function registerCommand(notificationName, commandClassRef) {
          this._controller.registerCommand(notificationName, commandClassRef);
        };

        _proto.removeCommand = function removeCommand(notificationName, commandClassRef) {
          this._controller.removeCommand(notificationName, commandClassRef);
        };

        _proto.registerProxy = function registerProxy(proxyName, proxy) {
          if (this.hasProxy(proxyName)) {
            console.warn("warning!!! [Module.registerProxy]: repeat register proxy-------->", this.getName(), proxyName);
            return;
          }

          var p = new proxy(); //@ts-ignore

          p.setModule(this);

          this._model.registerProxy(proxyName, p);
        };

        _proto.retrieveProxy = function retrieveProxy(proxyName) {
          return this._model.retrieveProxy(proxyName);
        };

        _proto.removeProxy = function removeProxy(proxyName) {
          return this._model.removeProxy(proxyName);
        };

        _proto.hasProxy = function hasProxy(proxyName) {
          return this._model.hasProxy(proxyName);
        };

        _proto.registerMediator = function registerMediator(mediatorName, mediatorCls) {
          this._view.registerMediator(mediatorName, mediatorCls);
        };

        _proto.retrieveMediator = function retrieveMediator(mediatorName, initIfRegiste) {
          if (initIfRegiste === void 0) {
            initIfRegiste = false;
          }

          return this._view.retrieveMediator(mediatorName, initIfRegiste);
        };

        _proto.removeMediator = function removeMediator(mediatorName) {
          this._view.removeMediator(mediatorName);
        };

        _proto.hasMeditor = function hasMeditor(mediatorName) {
          return this._view.hasMediator(mediatorName);
        };

        _proto.notifyObservers = function notifyObservers(notification) {
          if (this._view) this._view.notifyObservers(notification);
        };

        _proto.registerObserver = function registerObserver(eventName, method, context) {
          var observer = new Observer(method, context);

          this._view.registerObserver(eventName, observer);
        };

        _proto.removeObserver = function removeObserver(eventName, context) {
          this._view.removeObserver(eventName, context);
        };

        _proto.startTimer = function startTimer() {// Laya.timer.loop(1, this, this.onTimeUpdate);
        };

        _proto.deleteInHideList = function deleteInHideList(mediatorName) {
          var hideList = this._hideList;

          for (var i = 0; i < hideList.length; i--) {
            var item = hideList[i];

            if (item[0] === mediatorName) {
              hideList.splice(i, 1);
              return;
            }
          }
        };

        _proto.onTimeUpdate = function onTimeUpdate() {
          var hideList = this._hideList;

          for (var i = hideList.length; i >= 0; i--) {
            var _hideList$i = hideList[i],
                name = _hideList$i[0],
                time = _hideList$i[1];

            if (time == 0) {
              this.removeMediator(name);
              hideList.splice(i, 1);
            } else {
              hideList[i][1] -= 1;
            }
          }

          if (hideList.length == 0) ;
        };

        _proto.showView = function showView(mediatorName, param, parent) {
          this.deleteInHideList(mediatorName);
          var mediator = this.retrieveMediator(mediatorName, true);

          if (mediator) {
            mediator.show(param, parent);
          }
        };

        _proto.hideView = function hideView(mediatorName, destroyImmediately) {
          if (destroyImmediately === void 0) {
            destroyImmediately = true;
          }

          var mediator = this.retrieveMediator(mediatorName);

          if (mediator) {
            mediator.hide(destroyImmediately);
          }
        };

        _proto.destroyViewLater = function destroyViewLater(mediatorName) {
          if (this._hideList.length == 0) {
            this.startTimer();
          }

          this._hideList.push([mediatorName, Module.DestroyedCount]);
        };

        return Module;
      }(Notifier));
      Module.DestroyedCount = 10000;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ModuleType.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "9b04dvL8eFNmJUQtKdMvSpL", "ModuleType", undefined);

      var ModuleName = exports('ModuleName', /*#__PURE__*/function (ModuleName) {
        ModuleName["Game"] = "Game";
        ModuleName["Loading"] = "Loading";
        ModuleName["Login"] = "Login";
        ModuleName["Player"] = "Palyer";
        ModuleName["Common"] = "Common";
        ModuleName["Home"] = "Home";
        ModuleName["Map"] = "Map";
        ModuleName["Fight"] = "Fight";
        ModuleName["Aquarium"] = "Aquarium";
        return ModuleName;
      }({}));
      var ProxyName = exports('ProxyName', /*#__PURE__*/function (ProxyName) {
        ProxyName["Login"] = "Login";
        ProxyName["Game"] = "Game";
        ProxyName["Player"] = "Player";
        ProxyName["Setting"] = "Setting";
        ProxyName["Fight"] = "Fight";
        ProxyName["Aquarium"] = "Aquarium";
        return ProxyName;
      }({}));
      var MediatorName = exports('MediatorName', /*#__PURE__*/function (MediatorName) {
        MediatorName["ComSell"] = "ComSell";
        MediatorName["ModalConfirm"] = "ModalConfirm";
        MediatorName["Login"] = "Login";
        MediatorName["Loading"] = "Loading";
        MediatorName["Home"] = "Home";
        MediatorName["HomeHud"] = "HomeHud";
        MediatorName["Setting"] = "Setting";
        MediatorName["Map"] = "Map";
        MediatorName["MapLucky"] = "MapLucky";
        MediatorName["Fight"] = "Fight";
        MediatorName["FightBack"] = "FightBack";
        MediatorName["FightLoading"] = "FightLoading";
        MediatorName["FightPause"] = "FightPause";
        MediatorName["FightRevive"] = "FightRevive";
        MediatorName["FightSettlement"] = "FightSettlement";
        MediatorName["FightSkill"] = "FightSkill";
        MediatorName["FightShop"] = "FightShop";
        MediatorName["FightHud"] = "FightHud";
        MediatorName["FightDebug"] = "FightDebug";
        MediatorName["FishingBuff"] = "FishingBuff";
        MediatorName["FishingResult"] = "FishingResult";
        MediatorName["Aquarium"] = "Aquarium";
        MediatorName["AquariumDetail"] = "AquariumDetail";
        return MediatorName;
      }({}));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/monster.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './audioManager.ts', './util.ts', './effectManager.ts', './uiManager.ts', './constant.ts', './gameManager.ts', './clientEvent.ts', './monsterModel.ts', './resourceUtil.ts', './energyBall.ts', './fireBall.ts', './dispersionSurround.ts', './dispersion.ts', './fireBallBig.ts', './tornado.ts', './laser.ts', './characterRigid.ts', './poolManager.ts', './Utils.ts', './ConfigUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, Quat, Vec3, _decorator, Material, SkinnedMeshRenderer, tween, macro, Component, AudioManager, Util, EffectManager, UIManager, Constant, GameManager, ClientEvent, MonsterModel, ResourceUtil, EnergyBall, FireBall, DispersionSurround, Dispersion, FireBallBig, Tornado, Laser, CharacterRigid, PoolManager, ConfigUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Quat = module.Quat;
      Vec3 = module.Vec3;
      _decorator = module._decorator;
      Material = module.Material;
      SkinnedMeshRenderer = module.SkinnedMeshRenderer;
      tween = module.tween;
      macro = module.macro;
      Component = module.Component;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Util = module.Util;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      MonsterModel = module.MonsterModel;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, function (module) {
      EnergyBall = module.EnergyBall;
    }, function (module) {
      FireBall = module.FireBall;
    }, function (module) {
      DispersionSurround = module.DispersionSurround;
    }, function (module) {
      Dispersion = module.Dispersion;
    }, function (module) {
      FireBallBig = module.FireBallBig;
    }, function (module) {
      Tornado = module.Tornado;
    }, function (module) {
      Laser = module.Laser;
    }, function (module) {
      CharacterRigid = module.CharacterRigid;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, null, function (module) {
      ConfigUtils = module.ConfigUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "75fe4NpEqNMNZSSj5Z9vDnA", "monster", undefined);

      var qt_0 = new Quat();
      var v3_0 = new Vec3();
      var ccclass = _decorator.ccclass,
          property = _decorator.property; //普通怪物脚本

      var Monster = exports('Monster', (_dec = ccclass('Monster'), _dec2 = property(Material), _dec3 = property(Material), _dec4 = property(SkinnedMeshRenderer), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Monster, _Component);

        function Monster() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "matNormal", _descriptor, _assertThisInitialized(_this)); //默认材质


          _initializerDefineProperty(_this, "matDissolve", _descriptor2, _assertThisInitialized(_this)); //阵亡时候溶解材质


          _initializerDefineProperty(_this, "skiMeshCom", _descriptor3, _assertThisInitialized(_this));

          _this._scriptCharacterRigid = null;
          _this._attackPos = new Vec3(); //技能即将攻击的位置

          _this._attackForward = new Vec3(); //攻击朝向

          _this._scriptWarning = null; //预警技能脚本

          _this._curAttackSpeed = 0; //当前攻击速度    

          _this._layerInfo = null; //怪物在当前层级的配置数据

          _this._baseInfo = null; //怪物在base表里面对应数据

          _this._skillInfo = null; //技能信息

          _this._bloodTipDirection = Constant.BLOOD_TIP_DIRECTION.LEFT_UP; //血量提示方向

          _this._scriptBloodBar = null; //关联的血条脚本

          _this._scriptMonsterModel = null; //怪物动画组件播放脚本

          _this._isMoving = false; //怪物是否正在移动

          _this._allSkillInfo = null; //所有拥有的技能信息

          _this._isDie = false; //是否死亡

          _this._curAttackInterval = 0; //距离上次被攻击的时长

          _this._isHitByPlayer = false; //是否被玩家击中

          _this._isInitBloodBar = false; //是否已经初始化血条

          _this._bloodTipOffsetPos = new Vec3(0, 50, 0); //怪物血条距离人物位置偏差

          _this._hideBloodCountDown = 3; //怪物的血条被攻击后才会显示，且如果3秒未被攻击则会隐藏

          _this._hitEffectPos = new Vec3(0, 0.2, 0); //受击特效位置

          _this._isAllowToAttack = false; //是否允许攻击

          _this._playerMonsterOffset = new Vec3(); //怪物和玩家间距

          _this._curAngleY = 0; //当前Y分量旋转角度

          _this._horizontal = 0; //水平移动距离

          _this._vertical = 0; //垂直移动距离

          _this._iceDamageCountDown = 0; //冰冻伤害倒计时

          _this._fireDamageCountDown = 0; //灼烧伤害倒计时

          _this._ndMonsterSkill = null; //技能特效节点

          _this._skillIndex = 0; //当前技能索引

          _this._minLength = 3; //怪物和玩家之间的最小距离

          _this._curMoveSpeed = 0; //当前移动速度

          _this._dissolveData = {
            uEdge: 1,
            time: 1
          }; //溶解数据，v溶解程度默认为1（0为完全溶解），time为溶解所需时间
          //移动相关

          _this._moveMode = 0; //移动方式

          _this._movePattern = 0; //移动模式

          _this._moveFrequency = 0; //两次移动间隔,为0表示一直移动)

          _this._offsetPos = new Vec3(); //和玩家之间的向量差

          _this._offsetPos_2 = new Vec3(); //和玩家之间的向量差

          _this._mixOffset = new Vec3(1, 0, 1); //和玩家的最小间距

          _this._targetWorPos = new Vec3(); //下一步的目标位置

          _this._isPlayRotate = false; //是否旋转

          _this._curAngle = new Vec3(); //当前旋转的角度

          _this._curAngle_2 = new Vec3(); //怪物角度

          _this._tempAngle = new Vec3(); //临时变量，怪物角度

          _this._rotateDirection = new Vec3(); //旋转方向

          _this._forWard = new Vec3(); //朝向

          _this._ndRunSmokeEffect = null; //烟雾特效

          _this._originAngle = new Vec3(0, -90, 0); //怪物开始角度

          _this._targetAngle = new Vec3(); //目标旋转角度

          _this._checkInterval = 0.04; //每40ms刷新一次

          _this._currentTime = 0; //当前累积时间

          _this._ndBody = null; //

          _this._curMoveWorPos = new Vec3(); //当前怪物移动位置

          _this._isArrived = false; //是否到达

          _this._checkMoveInterval = 0; //检查当前是否移动时间间隔

          _this._prevMoveWorPos = new Vec3(); //之前怪物的移动坐标

          _this._moveUnit = new Vec3(); //每次移动的单位向量

          _this._minLengthRatio = 1.1; //达到最小距离的1.1倍视为进入最小距离

          _this._randomMoveTryTimes = 5; //每次随机移动位置最多计算次数

          _this._action = 0;
          return _this;
        }

        var _proto = Monster.prototype; //怪物行为

        _proto.onEnable = function onEnable() {
          ClientEvent.on(Constant.EVENT_TYPE.MONSTER_MOVE, this._monsterMove, this);
        };

        _proto.onDisable = function onDisable() {
          ClientEvent.off(Constant.EVENT_TYPE.MONSTER_MOVE, this._monsterMove, this); //回收血条节点

          if (this.scriptBloodBar) {
            if (this.scriptBloodBar.node.parent) {
              PoolManager.instance.putNode(this.scriptBloodBar.node);
            }

            this.scriptBloodBar = null;
          } //回收预警节点


          this.recycleWarning(); //回收技能节点

          if (this._ndMonsterSkill) {
            PoolManager.instance.putNode(this._ndMonsterSkill);
            this._ndMonsterSkill = null;
          }
        };

        _proto.start = function start() {// [3]
        };

        _proto.init = function init(baseInfo, layerInfo) {
          this.baseInfo = baseInfo;
          this.layerInfo = layerInfo;
          this.isDie = false;
          this.recycleWarning();
          this.skiMeshCom.setMaterial(this.matNormal, 0);
          this._ndBody = this.node.getChildByName("body");
          this._scriptMonsterModel = this._ndBody.getComponent(MonsterModel);

          this._scriptMonsterModel.playAni(Constant.MONSTER_ANI_TYPE.IDLE, true);

          this.scriptCharacterRigid = this.node.getComponent(CharacterRigid);
          this.scriptCharacterRigid.stopMove();
          this._curAttackInterval = 0;
          this._isHitByPlayer = false;
          this._isInitBloodBar = false;
          this._isAllowToAttack = false;
          this._isArrived = false;
          this._checkMoveInterval = 0;
          this._iceDamageCountDown = 0;
          this._fireDamageCountDown = 0;
          this._ndMonsterSkill = null;
          this._skillIndex = 0;

          this._moveUnit.set(0, 0, 0);

          this._movePattern = layerInfo.movePattern ? layerInfo.movePattern : this.baseInfo.movePattern;
          this._dissolveData.uEdge = 1;
          this.scriptBloodBar = null;

          this._refreshSkill();

          this._scriptMonsterModel.scriptMonster = this;
          this.curAttackSpeed = this.baseInfo.attackSpeed;
          this.curMoveSpeed = this.baseInfo.moveSpeed;

          this._getMinLength();
        }
        /**
         * 获取怪物和玩家之间的最小距离
         *
         * @memberof Monster
         */
        ;

        _proto._getMinLength = function _getMinLength() {
          if (this.node.name === "aula") {
            this._minLength = 2;
            this._dissolveData.time = 3.33;
          } else if (this.node.name === "boomDragon") {
            this._minLength = 2;
            this._dissolveData.time = 0.87;
          } else if (this.node.name === "hellFire") {
            this._minLength = 2.5;
            this._dissolveData.time = 1.06;
          } else if (this.node.name === "magician") {
            this._minLength = 2.5;
            this._dissolveData.time = 0.87;
          } else if (this.node.name === "dragon") {
            this._minLength = 5;
            this._dissolveData.time = 2;
          }
        }
        /**
         * 刷新当前使用技能
         *
         * @private
         * @memberof Monster
         */
        ;

        _proto._refreshSkill = function _refreshSkill() {
          this._allSkillInfo = this.layerInfo.skill == null ? [] : this.layerInfo.skill.split("#");

          if (this._allSkillInfo.length) {
            this._skillIndex = this._skillIndex >= this._allSkillInfo.length ? 0 : this._skillIndex;
            var skillID = this._allSkillInfo[this._skillIndex];
            this.skillInfo = ConfigUtils.queryByID("monsterSkill", skillID);
            this._skillIndex += 1;
          }
        }
        /**
         * 怪物阵亡
         *
         * @memberof Monster
         */
        ;

        _proto.showDie = function showDie() {
          var _this2 = this;

          this.scriptCharacterRigid.stopMove();
          this.recycleWarning();
          AudioManager.instance.playSound(this.node.name + "Die");
          GameManager.showRewardBounce(this.node, "gold/gold", this.baseInfo.goldNum, function () {
            if (_this2.baseInfo.heartDropRate >= Math.random()) {
              GameManager.showRewardBounce(_this2.node, "heart/heart", 1);
            }
          }); //检查玩家是否拥有嗜血技能：主角击杀敌人时回复自身生命上限2%的生命值。

          if (GameManager.scriptPlayer.isBloodthirsty) {
            var bloodNum = GameManager.scriptPlayer.curHpLimit * 0.02;
            GameManager.scriptPlayer.addBlood(bloodNum);
          } //溶解效果


          this.skiMeshCom.setMaterial(this.matDissolve, 0);
          tween(this._dissolveData).to(this._dissolveData.time, {
            uEdge: 0.1
          }).start();

          this._scriptMonsterModel.playAni(Constant.MONSTER_ANI_TYPE.DIE, false, function () {
            if (_this2.isDie) {
              if (GameManager.ndBoss) {
                GameManager.ndBoss = null;
              }

              if (_this2.scriptBloodBar) {
                _this2.scriptBloodBar = null;
              }

              PoolManager.instance.putNode(_this2.node);
            }
          });
        };

        _proto.recycleWarning = function recycleWarning() {
          //回收预警节点
          if (this.scriptWarning) {
            if (this.scriptWarning.node.parent) {
              PoolManager.instance.putNode(this.scriptWarning.node);
            }

            this.scriptWarning = null;
          }
        }
        /**
         * 怪物播放受击效果
         *
         * @param {boolean} isArrowLaunch 是否被弹射的弓箭射中，如果是则造成普通伤害
         * @param {boolean} isPassiveLightning 是否被动受到电击
         * @return {*} 
         * @memberof Monster
         */
        ;

        _proto.playHit = function playHit(isArrowLaunch, isPassiveLightning) {
          var _this3 = this;

          if (isArrowLaunch === void 0) {
            isArrowLaunch = false;
          }

          if (isPassiveLightning === void 0) {
            isPassiveLightning = false;
          }

          if (this.isDie) {
            return;
          }

          AudioManager.instance.playSound(Constant.SOUND.HIT_MONSTER); //播放受击特效

          var effectPath = "hit/hit";
          var arrEffectPath = [];
          var recycleTime = 1.2;
          var isHasIce = GameManager.scriptPlayer.isArrowIce;
          var isHasFire = GameManager.scriptPlayer.isArrowFire;
          var isHasLightning = GameManager.scriptPlayer.isArrowLightning;

          if (isHasFire || isHasIce || isHasLightning) {
            if (isHasFire && isHasIce && isHasLightning) {
              arrEffectPath = ["hit/hitFire", "hit/hitIce", "hit/hitLightning"];
            } else {
              if (isHasFire && isHasIce || isHasFire && isHasLightning || isHasIce && isHasLightning) {
                if (isHasFire && isHasIce) {
                  arrEffectPath = ["hit/hitFire", "hit/hitIce"];
                } else if (isHasLightning && isHasFire) {
                  arrEffectPath = ["hit/hitFire", "hit/hitLightning"];
                } else if (isHasLightning && isHasIce) {
                  arrEffectPath = ["hit/hitIce", "hit/hitLightning"];
                }
              } else {
                if (isHasFire) {
                  arrEffectPath = ["hit/hitFire"];
                } else if (isHasIce) {
                  arrEffectPath = ["hit/hitIce"];
                } else if (isHasLightning) {
                  arrEffectPath = ["hit/hitLightning"];
                }
              }
            }

            effectPath = arrEffectPath[Math.floor(Math.random() * arrEffectPath.length)];

            if (effectPath === "hit/hitFire") {
              //灼烧技能持续2秒
              recycleTime = 2;
            } else if (effectPath === "hit/hitIce") {
              recycleTime = 1;
            } //被冰冻技能击中


            if (isHasIce && this._iceDamageCountDown <= 0) {
              this._iceDamageCountDown = 1;
            } //被灼烧技能击中


            if (isHasFire && this._fireDamageCountDown <= 0) {
              this._fireDamageCountDown = 2;
            }
          }

          var options = {
            effectPath: effectPath,
            ndTarget: this.node,
            pos: this._hitEffectPos,
            isPlayAnimation: false,
            speed: GameManager.gameSpeed,
            isRecycle: true,
            recycleTime: recycleTime
          };
          EffectManager.instance.loadAndPlayEffect(options); //攻击的时候霸体状态

          if (!this._scriptMonsterModel.isAttacking) {
            this._scriptMonsterModel.playAni(Constant.MONSTER_ANI_TYPE.HIT);
          } //受到攻击的敌人会向身旁一定范围内的所有敌人发射闪电，减少生命上限5%的生命值


          if (GameManager.scriptPlayer.isArrowLightning && !isPassiveLightning) {
            var arrTargets = GameManager.getNearbyMonster(this.node, true);

            if (arrTargets) {
              arrTargets.forEach(function (ndChild) {
                EffectManager.instance.showLightningChain(_this3.node, ndChild);
                var scriptMonster = ndChild.getComponent(Monster);
                scriptMonster.playHit(false, true);
              });
            }
          } //怪物扣血


          if (Math.random() > this.baseInfo.dodgeRate) {
            //闪避失败
            var tipType = Constant.FIGHT_TIP.REDUCE_BLOOD;
            var damage = GameManager.scriptPlayer.curAttackPower * (1 - this.baseInfo.defensePower * GameManager.defenseAddition / (this.baseInfo.defensePower + 400));
            var isCriticalHit = Math.random() <= GameManager.scriptPlayer.curCriticalHitRate; //是否暴击
            //是否暴击

            if (isCriticalHit) {
              //不是被弹射的箭击中，且不是被动受到电击
              if (!isArrowLaunch && !isPassiveLightning) {
                damage = damage * GameManager.scriptPlayer.curCriticalHitDamage;
                tipType = Constant.FIGHT_TIP.CRITICAL_HIT;
              }
            }

            if (isPassiveLightning) {
              damage = this.baseInfo.hp * 0.05 * (1 - this.baseInfo.defensePower / (this.baseInfo.defensePower + 400));
            }

            this.refreshBlood(-damage, tipType);
          }
        }
        /**
         * 刷新血量
         *
         * @private
         * @param {number} bloodNum
         * @memberof Monster
         */
        ;

        _proto.refreshBlood = function refreshBlood(bloodNum, tipType) {
          var _this4 = this;

          var cb = function cb() {
            _this4.scriptBloodBar.refreshBlood(bloodNum);

            UIManager.instance.showBloodTips(_this4, tipType, bloodNum, _this4._bloodTipOffsetPos);
          };

          this._curAttackInterval = 0;

          if (!this._isInitBloodBar) {
            this._isInitBloodBar = true;
            console.log("###小怪生成新的血条", this.node.name);
            UIManager.instance.showMonsterBloodBar(this, this.baseInfo.hp, GameManager.hpAddition, function () {
              cb();
            });
          } else {
            if (this.scriptBloodBar) {
              this.scriptBloodBar.node.active = true;
              cb();
            }
          }
        }
        /**
         * 怪物行为
         *
         * @param {*} obj
         * @memberof Player
         */
        ;

        _proto.playAction = function playAction(obj) {
          this._action = obj.action;

          switch (obj.action) {
            case Constant.MONSTER_ACTION.MOVE:
              //向目标位置移动
              var angle = obj.value + 135;
              var radian = angle * macro.RAD;
              this._horizontal = Math.round(Math.cos(radian) * 1);
              this._vertical = Math.round(Math.sin(radian) * 1);
              this._curAngleY = obj.value;
              this._curAngleY = this._curAngleY < 0 ? this._curAngleY + 360 : this._curAngleY > 360 ? this._curAngleY - 360 : this._curAngleY;
              this.isMoving = true;
              break;

            case Constant.MONSTER_ACTION.STOP_MOVE:
              //停止移动，原地转向玩家，攻击玩家
              var angle_1 = obj.value + 135;
              var radian_1 = angle_1 * macro.RAD;
              this._horizontal = Math.round(Math.cos(radian_1) * 1);
              this._vertical = Math.round(Math.sin(radian_1) * 1);
              this._curAngleY = obj.value;
              this._curAngleY = this._curAngleY < 0 ? this._curAngleY + 360 : this._curAngleY > 360 ? this._curAngleY - 360 : this._curAngleY;
              this.isMoving = false;
              this.scriptCharacterRigid.stopMove();

              if (GameManager.ndPlayer) {
                this._attackPlayer();
              } else {
                this._scriptMonsterModel.playAni(Constant.MONSTER_ANI_TYPE.IDLE, true);
              }

              break;
          }
        }
        /**
         * 攻击玩家
        */
        ;

        _proto._attackPlayer = function _attackPlayer() {
          var _this5 = this;

          if (GameManager.scriptPlayer.isDie || this._scriptMonsterModel.isAttacking) {
            return;
          }

          Vec3.subtract(this._offsetPos_2, GameManager.ndPlayer.worldPosition, this.node.worldPosition);

          var length = this._offsetPos_2.length();

          this.attackForward = this._offsetPos_2.normalize().negative();
          this.attackForward.y = 0;
          this.attackPos.set(GameManager.ndPlayer.worldPosition); //预警

          if (this._allSkillInfo.length && this.skillInfo && this.skillInfo.warning) {
            var scale = 1;

            if (this.skillInfo.id === Constant.MONSTER_SKILL.FIRE_BALL) {
              scale = 0.1;
            } else if (this.skillInfo.id === Constant.MONSTER_SKILL.FIRE_BALL_BIG) {
              scale = 0.4;
            } else if (this.skillInfo.id === Constant.MONSTER_SKILL.LASER) {
              scale = 3;
            } else if (this.skillInfo.id === Constant.MONSTER_SKILL.ENERGY_BALL) {
              scale = length;
            } //回收预警节点


            this.recycleWarning();
            EffectManager.instance.showWarning(this.skillInfo.warning, scale, this).then(function () {
              _this5.playAttackAni();
            });
          } else {
            this.playAttackAni();
          }
        }
        /**
         * 播放攻击动画
         *
         * @protected
         * @memberof Monster
         */
        ;

        _proto.playAttackAni = function playAttackAni() {
          var _this6 = this;

          var attackAniName = Constant.MONSTER_ANI_TYPE.ATTACK;

          if (this.baseInfo.resName === "hellFire") {
            //hellFire的攻击动画有两个，其他小怪动画只有一个
            if (!this._allSkillInfo.length) {
              //近战
              attackAniName = Constant.MONSTER_ANI_TYPE.ATTACK_1;
            } else {
              //远程
              attackAniName = Constant.MONSTER_ANI_TYPE.ATTACK_2;
            }
          } //远程


          if (this._allSkillInfo.length) {
            this._scriptMonsterModel.playAni(attackAniName, false, function () {
              if (!_this6.isDie && !_this6._scriptMonsterModel.isHitting) {
                _this6._scriptMonsterModel.playAni(Constant.MONSTER_ANI_TYPE.IDLE, true);

                _this6.scheduleOnce(function () {
                  _this6._monsterMove();
                }, _this6.baseInfo.moveFrequency);
              }
            });
          } else {
            //近战
            var offsetLength = Util.getTwoNodeXZLength(this.node, GameManager.ndPlayer);

            if (offsetLength <= this._minLength * this._minLengthRatio) {
              this._scriptMonsterModel.playAni(attackAniName, false, function () {
                if (!_this6.isDie && !_this6._scriptMonsterModel.isHitting) {
                  _this6._scriptMonsterModel.playAni(Constant.MONSTER_ANI_TYPE.IDLE, true);

                  _this6.scheduleOnce(function () {
                    _this6._monsterMove();
                  }, _this6.baseInfo.moveFrequency);
                }
              });
            } else {
              if (!this.isDie && !this._scriptMonsterModel.isHitting) {
                this._scriptMonsterModel.playAni(Constant.MONSTER_ANI_TYPE.IDLE, true);

                this.scheduleOnce(function () {
                  _this6._monsterMove();
                }, this.baseInfo.moveFrequency);
              }
            }
          }
        }
        /**
         * 移动到随机位置
         *
         * @private
         * @memberof Monster
         */
        ;

        _proto._moveToRandomPos = function _moveToRandomPos() {
          this._randomMoveTryTimes -= 1; //随机移动：先以怪物圆环区间(1, minLength)随机移动,再朝向玩家,然后攻击

          var x = Util.getRandom(1, 3) * Util.getRandomDirector();
          var z = Util.getRandom(1, 3) * Util.getRandomDirector();

          this._targetWorPos.set(Util.toFixed(this.node.worldPosition.x + x), Util.toFixed(this.node.worldPosition.y), Util.toFixed(this.node.worldPosition.z + z));

          var offsetLength = Util.getTwoPosXZLength(this._targetWorPos.x, this._targetWorPos.z, GameManager.ndPlayer.worldPosition.x, GameManager.ndPlayer.worldPosition.z); //当目标位置和玩家大于最小距离，进行移动

          if (offsetLength > this._minLength) {
            Vec3.subtract(this._offsetPos, this._targetWorPos, this.node.worldPosition);
            this._offsetPos.y = 0;
            Vec3.normalize(this._moveUnit, this._offsetPos);

            this._moveToTargetWorPos(this._targetWorPos);

            this.isMoving = true;
            this._isArrived = false;
          } else {
            //否则尝试5次随机移动，都没合适的位置则进行进攻
            if (this._randomMoveTryTimes <= 0) {
              this._stayRotateAttack();
            } else {
              this._moveToRandomPos();
            }
          }
        }
        /**
         * 先移动
         *
         * @private
         * @memberof Monster
         */
        ;

        _proto._monsterMove = function _monsterMove() {
          if (this.isDie) {
            return;
          }

          if (!this._isAllowToAttack) {
            this._isAllowToAttack = true;
          }

          if (this._movePattern === Constant.MONSTER_MOVE_PATTERN.NO_MOVE) {
            //不移动，原地攻击玩家
            this._stayRotateAttack();
          } else if (this._movePattern === Constant.MONSTER_MOVE_PATTERN.RANDOM) {
            this._randomMoveTryTimes = 5;

            this._moveToRandomPos();
          } else if (this._movePattern === Constant.MONSTER_MOVE_PATTERN.FORWARD_PLAYER) {
            //面向玩家移动：先面向玩家，再移动，然后攻击
            this._moveToTargetWorPos(GameManager.ndPlayer.worldPosition);

            Vec3.subtract(this._offsetPos, GameManager.ndPlayer.worldPosition, this.node.worldPosition);
            this._offsetPos.y = 0;
            var offsetLength = Util.getTwoNodeXZLength(this.node, GameManager.ndPlayer); //当怪物和玩家小于2个最小距离之和或者大于一个最小距离且小于两个最小距离，进行移动

            if (offsetLength > this._minLength * 2 || offsetLength > this._minLength && offsetLength < this._minLength * 2) {
              //单位向量
              Vec3.normalize(this._moveUnit, this._offsetPos);
              Vec3.multiplyScalar(this._offsetPos, this._moveUnit, this._minLength);

              if (offsetLength > this._minLength * 2) {
                //向玩家移动2个单位向量
                Vec3.add(this._targetWorPos, this.node.worldPosition, this._offsetPos);
              } else {
                Vec3.subtract(this._targetWorPos, GameManager.ndPlayer.worldPosition, this._offsetPos);
              }

              this._targetWorPos.set(Util.toFixed(this._targetWorPos.x), Util.toFixed(this.node.worldPosition.y), Util.toFixed(this._targetWorPos.z));

              this._isArrived = false;
              this.isMoving = true;
            } else {
              //与玩家相距小于等于最小距离，怪物原地进行攻击
              this._stayRotateAttack();
            }
          }
        }
        /**
         * 怪物向目标位置移动
         *
         * @private
         * @memberof Monster
         */
        ;

        _proto._moveToTargetWorPos = function _moveToTargetWorPos(targetWorPos) {
          var angleY = this._getTwoPosAngleY(this.node.worldPosition, targetWorPos);

          this.playAction({
            action: Constant.MONSTER_ACTION.MOVE,
            value: angleY
          });
        };

        _proto._getTwoPosAngleY = function _getTwoPosAngleY(selfWorPos, targetWorPos) {
          var _GameManager$mainCame, _GameManager$mainCame2;

          var targetScreenPos = (_GameManager$mainCame = GameManager.mainCamera) == null ? void 0 : _GameManager$mainCame.worldToScreen(targetWorPos);
          var selfScreenPos = (_GameManager$mainCame2 = GameManager.mainCamera) == null ? void 0 : _GameManager$mainCame2.worldToScreen(selfWorPos);
          Vec3.subtract(this._playerMonsterOffset, targetScreenPos, selfScreenPos);
          var angleY = Math.round(Math.atan2(this._playerMonsterOffset.y, this._playerMonsterOffset.x) * 180 / Math.PI);
          return angleY;
        }
        /**
         * 怪物原地不动-旋转角度朝向玩家-攻击玩家
         *
         * @protected
         * @memberof Monster
         */
        ;

        _proto._stayRotateAttack = function _stayRotateAttack() {
          var angleY = this._getTwoPosAngleY(this.node.worldPosition, GameManager.ndPlayer.worldPosition);

          this.playAction({
            action: Constant.MONSTER_ACTION.STOP_MOVE,
            value: angleY
          });
        }
        /**
         * 向玩家释放技能
         *
         * @returns
         * @memberof Player
         */
        ;

        _proto.releaseSkillToPlayer = function releaseSkillToPlayer(isNormalAttack) {
          var _this7 = this; //没有技能则使用近战


          if (!this._allSkillInfo.length) {
            var offsetLength = Util.getTwoNodeXZLength(this.node, GameManager.ndPlayer);

            if (offsetLength <= this._minLength * this._minLengthRatio) {
              GameManager.scriptPlayer.reduceBlood(this.baseInfo);
            }

            return;
          } //加载对应技能


          ResourceUtil.loadEffectRes(this.skillInfo.resName + "/" + this.skillInfo.resName).then(function (prefab) {
            if (_this7.isMoving) {
              return;
            }

            _this7._ndMonsterSkill = PoolManager.instance.getNode(prefab, GameManager.ndGameManager);

            _this7._ndMonsterSkill.setWorldPosition(_this7.node.worldPosition.x, 2.5, _this7.node.worldPosition.z);

            _this7._ndMonsterSkill.forward = _this7.attackForward.negative();
            var scriptSkillCollider = null; //怪物技能初始化

            switch (_this7.skillInfo.id) {
              case Constant.MONSTER_SKILL.ENERGY_BALL:
                scriptSkillCollider = _this7._ndMonsterSkill.getComponent(EnergyBall);
                scriptSkillCollider.init(_this7.skillInfo, _this7.baseInfo, _this7);
                break;

              case Constant.MONSTER_SKILL.FIRE_BALL:
                scriptSkillCollider = _this7._ndMonsterSkill.getComponent(FireBall);
                scriptSkillCollider.init(_this7.skillInfo, _this7.baseInfo, _this7);
                break;

              case Constant.MONSTER_SKILL.DISPERSION:
                _this7._ndMonsterSkill.children.forEach(function (ndChild, idx) {
                  var scriptSkillCollider = ndChild.getComponent(Dispersion);
                  scriptSkillCollider.init(_this7.skillInfo, _this7.baseInfo);
                });

                break;

              case Constant.MONSTER_SKILL.TORNADO:
                scriptSkillCollider = _this7._ndMonsterSkill.getComponent(Tornado);
                scriptSkillCollider.init(_this7.skillInfo, _this7.baseInfo, _this7);
                break;

              case Constant.MONSTER_SKILL.FIRE_BALL_BIG:
                scriptSkillCollider = _this7._ndMonsterSkill.getComponent(FireBallBig);
                scriptSkillCollider.init(_this7.skillInfo, _this7.baseInfo, _this7);
                break;

              case Constant.MONSTER_SKILL.DISPERSION_SURROUND:
                _this7._ndMonsterSkill.children.forEach(function (ndChild) {
                  var scriptSkillCollider = ndChild.getComponent(DispersionSurround);
                  scriptSkillCollider.init(_this7.skillInfo, _this7.baseInfo);
                });

                break;

              case Constant.MONSTER_SKILL.LASER:
                scriptSkillCollider = _this7._ndMonsterSkill.getComponent(Laser);
                scriptSkillCollider.init(_this7.skillInfo, _this7.baseInfo, _this7);
                break;
            }

            _this7._refreshSkill();
          });
        };

        _proto.update = function update(deltaTime) {
          //刷新溶解材质
          if (this.isDie && this._dissolveData.uEdge > 0.1) {
            this.matDissolve.setProperty("uEdge", this._dissolveData.uEdge);
            return;
          }

          if (!GameManager.isGameStart || GameManager.isGameOver || GameManager.isGamePause || this.isDie || !this._isAllowToAttack || !GameManager.scriptPlayer || GameManager.scriptPlayer.isDie) {
            return;
          } //3秒未被攻击则会隐藏血条


          if (!this._isHitByPlayer && this.scriptBloodBar) {
            this._curAttackInterval += deltaTime;

            if (this._curAttackInterval >= this._hideBloodCountDown && this.scriptBloodBar.node.active) {
              this.scriptBloodBar.node.active = false;
            }
          } //是否进行移动


          if (this.isMoving) {
            if (this._movePattern === Constant.MONSTER_MOVE_PATTERN.RANDOM) {
              //如果移动到目标位置就停止移动
              var offsetLength = Util.getTwoPosXZLength(this.node.worldPosition.x, this.node.worldPosition.z, this._targetWorPos.x, this._targetWorPos.z);
              var offsetTarget = 0.05; //爆炸龙的位移是跳，不容易精准到达目标位置,把达到范围适当增大

              if (this.baseInfo.resName === 'boomDragon') {
                offsetTarget = 0.5;
              }

              if (offsetLength <= offsetTarget && !this._isArrived) {
                // console.log("###随机移动，到达目标位置");
                this._isArrived = true;

                this._stayRotateAttack();
              } // console.log("随机移动");

            } else if (this._movePattern === Constant.MONSTER_MOVE_PATTERN.FORWARD_PLAYER) {
              var _offsetLength = Util.getTwoPosXZLength(this.node.worldPosition.x, this.node.worldPosition.z, this._targetWorPos.x, this._targetWorPos.z);

              if (_offsetLength <= 0.05 && !this._isArrived) {
                // console.log("###面向玩家移动，到达目标位置");
                // 进行攻击
                this._isArrived = true;

                this._stayRotateAttack();
              } // console.log("朝向玩家移动");

            }
          } //怪物旋转


          if (this._isPlayRotate) {
            //当前怪物角度
            this._tempAngle.set(this.node.eulerAngles);

            this._tempAngle.y = this._tempAngle.y < 0 ? this._tempAngle.y + 360 : this._tempAngle.y;

            if (this._curAngle.length() === 0) {
              this._curAngle.set(this._tempAngle);
            }

            this.node.eulerAngles = this._tempAngle; //第二个参数越小朝向越精确

            var isEqual = this._curAngle.equals(this._targetAngle, 0.01);

            if (!isEqual) {
              Vec3.lerp(this._curAngle, this._curAngle, this._targetAngle, 0.167);
              this.node.eulerAngles = this._curAngle;
            } else {
              this._isPlayRotate = false;
              this.node.eulerAngles = this._targetAngle;

              this._curAngle.set(0, 0, 0);
            }
          }

          if (this._horizontal !== 0 || this._vertical !== 0) {
            //计算出旋转角度
            this._rotateDirection.set(this._horizontal, 0, -this._vertical);

            this._rotateDirection = this._rotateDirection.normalize();
            Quat.fromViewUp(qt_0, this._rotateDirection);
            Quat.toEuler(v3_0, qt_0);
            v3_0.y = v3_0.y < 0 ? v3_0.y + 360 : v3_0.y;
            this._isPlayRotate = true; //设置当前怪物角度为正数

            this._curAngle_2.set(this.node.eulerAngles);

            if (this._curAngle_2.y < 0) {
              this._curAngle_2.y += 360;
              this.node.eulerAngles = this._curAngle_2; // 转为0~360
            } else if (this._curAngle_2.y > 360) {
              this._curAngle_2.y -= 360;
              this.node.eulerAngles = this._curAngle_2; // 转为0~360
            } //设置目标旋转角度


            if (!v3_0.equals(this.node.eulerAngles, 0.01)) {
              this._targetAngle.y = this._curAngleY + 225;
              this._targetAngle.y = this._targetAngle.y < 0 ? this._targetAngle.y + 360 : this._targetAngle.y > 360 ? this._targetAngle.y - 360 : this._targetAngle.y;
              this._targetAngle.x = 0;
              this._targetAngle.z = 0;

              if (Math.abs(this._targetAngle.y - this._curAngle_2.y) > 180) {
                if (this._targetAngle.y > this._curAngle_2.y) {
                  this._targetAngle.y -= 360;
                } else {
                  this._targetAngle.y += 360;
                }
              } //每次有新的_targetAngle之后，先将_curAngle初始化


              this._curAngle.set(0, 0, 0);
            } else {
              this._isPlayRotate = false;
              this.node.eulerAngles = v3_0;
            }

            if (!this.isMoving) {
              return;
            } //怪物朝着目标位置移动：


            if (this._movePattern !== Constant.MONSTER_MOVE_PATTERN.NO_MOVE) {
              this.scriptCharacterRigid.move(-this._moveUnit.x * this.curMoveSpeed * GameManager.moveSpeedAddition * 0.5 * deltaTime, -this._moveUnit.z * this.curMoveSpeed * GameManager.moveSpeedAddition * 0.5 * deltaTime);
            }

            if (!this._scriptMonsterModel.isRunning && this._movePattern !== Constant.MONSTER_MOVE_PATTERN.NO_MOVE && this._action !== Constant.MONSTER_ACTION.STOP_MOVE) {
              this._scriptMonsterModel.playAni(Constant.MONSTER_ANI_TYPE.RUN, true);
            }
          } else {
            if (!this.isDie && !this._scriptMonsterModel.isIdle && !this._scriptMonsterModel.isAttacking && !this._scriptMonsterModel.isHitting) {
              this._scriptMonsterModel.playAni(Constant.MONSTER_ANI_TYPE.IDLE, true);

              this.scriptCharacterRigid.stopMove();
            }
          } //冰冻持续降低攻击力和伤害


          if (this._iceDamageCountDown > 0) {
            this._iceDamageCountDown -= deltaTime;
            this.curAttackSpeed = this.baseInfo.attackSpeed * (1 - 0.1);
            this.curMoveSpeed = this.baseInfo.moveSpeed * (1 - 0.5);

            if (this._iceDamageCountDown <= 0) {
              this.curAttackSpeed = this.baseInfo.attackSpeed;
              this.curMoveSpeed = this.baseInfo.moveSpeed;
            }
          } //灼烧持续扣血


          if (this._fireDamageCountDown > 0) {
            this._fireDamageCountDown -= deltaTime;
            var countDown = Number(this._fireDamageCountDown.toFixed(2));
            countDown = countDown * 100 % 50;

            if (countDown === 0) {
              var bloodNum = this.baseInfo.hp * 0.05;
              this.refreshBlood(-bloodNum, Constant.FIGHT_TIP.REDUCE_BLOOD);
            }
          } //检查当前是否碰到障碍或者其他物体导致无法达到目标位置


          if (this._movePattern !== Constant.MONSTER_MOVE_PATTERN.NO_MOVE && !this._isArrived) {
            this._checkMoveInterval += deltaTime;

            if (this._checkMoveInterval >= 0.2) {
              this._checkMoveInterval = 0;
              var length = Util.getTwoPosXZLength(this._prevMoveWorPos.x, this._prevMoveWorPos.z, this.node.worldPosition.x, this.node.worldPosition.z);

              if (this._scriptMonsterModel.isRunning && length <= 0.01) {
                this._stayRotateAttack(); // console.log("###碰到障碍, 停止移动");

              } else {
                this._prevMoveWorPos.set(this.node.worldPosition);
              }
            }
          }
        };

        _createClass(Monster, [{
          key: "curMoveSpeed",
          get: function get() {
            return this._curMoveSpeed;
          },
          set: //怪物蒙皮组件
          function set(v) {
            this._curMoveSpeed = v;
            this.scriptCharacterRigid.initSpeed(v, GameManager.moveSpeedAddition);
          }
        }, {
          key: "isDie",
          get: function get() {
            return this._isDie;
          },
          set: function set(v) {
            this._isDie = v;

            if (this._isDie) {
              this.showDie();
            }
          }
        }, {
          key: "isMoving",
          get: function get() {
            return this._isMoving;
          },
          set: function set(v) {
            this._isMoving = v;
          }
        }, {
          key: "scriptBloodBar",
          get: function get() {
            return this._scriptBloodBar;
          },
          set: function set(v) {
            this._scriptBloodBar = v;
          }
        }, {
          key: "bloodTipDirection",
          get: function get() {
            return this._bloodTipDirection;
          },
          set: function set(v) {
            this._bloodTipDirection = v;
          }
        }, {
          key: "skillInfo",
          get: function get() {
            return this._skillInfo;
          },
          set: function set(v) {
            this._skillInfo = v;
          }
        }, {
          key: "baseInfo",
          get: function get() {
            return this._baseInfo;
          },
          set: function set(v) {
            this._baseInfo = v;
          }
        }, {
          key: "layerInfo",
          get: function get() {
            return this._layerInfo;
          },
          set: function set(v) {
            this._layerInfo = v;
          }
        }, {
          key: "curAttackSpeed",
          get: function get() {
            return this._curAttackSpeed;
          },
          set: function set(v) {
            this._curAttackSpeed = v;
          }
        }, {
          key: "scriptWarning",
          get: function get() {
            return this._scriptWarning;
          },
          set: function set(v) {
            this._scriptWarning = v;
          }
        }, {
          key: "attackForward",
          get: function get() {
            return this._attackForward;
          },
          set: function set(v) {
            this._attackForward = v;
          }
        }, {
          key: "attackPos",
          get: function get() {
            return this._attackPos;
          },
          set: function set(v) {
            this._attackPos = v;
          }
        }, {
          key: "scriptCharacterRigid",
          get: function get() {
            return this._scriptCharacterRigid;
          },
          set: function set(v) {
            this._scriptCharacterRigid = v;
          }
        }]);

        return Monster;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "matNormal", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "matDissolve", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "skiMeshCom", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/monsterBloodBar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts', './poolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, UITransform, Vec3, clamp, tween, find, CameraComponent, Component, Constant, PoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      UITransform = module.UITransform;
      Vec3 = module.Vec3;
      clamp = module.clamp;
      tween = module.tween;
      find = module.find;
      CameraComponent = module.CameraComponent;
      Component = module.Component;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      PoolManager = module.PoolManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "7acee47OZ1Dz7VtFNxTYpoh", "monsterBloodBar", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property; //怪物血量脚本

      var MonsterBloodBar = exports('MonsterBloodBar', (_dec = ccclass('MonsterBloodBar'), _dec2 = menu("_game/module/fight/hud/monsterBloodBar"), _dec3 = property(UITransform), _dec4 = property(UITransform), _dec5 = property(UITransform), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MonsterBloodBar, _Component);

        function MonsterBloodBar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "UIComWhiteBar", _descriptor, _assertThisInitialized(_this)); //白色进度条的UI组件


          _initializerDefineProperty(_this, "UIComRedBar", _descriptor2, _assertThisInitialized(_this)); //血量进度条的UI组件


          _initializerDefineProperty(_this, "UIComBloodBar", _descriptor3, _assertThisInitialized(_this)); //血量容器的UI组件


          _this._whiteBarHeight = 19; //白色进度条高度

          _this._redBarHeight = 19; //血量进度条高度

          _this._totalBlood = 0; //总的血量

          _this._curBlood = 0; //当前血量值

          _this._scriptParent = null; //血条所在节点绑定的脚本

          _this._maxWhiteBarWidth = 104; //当前小怪血条中白色进度条长度

          _this._maxRedBarWidth = 104; //当前小怪血条中血量条长度

          _this._ndTarget = null; //跟随目标

          _this._offsetPos = null; //偏差

          _this._curPos = new Vec3(); //当前血条位置

          _this._isBloodEmpty = false; //血条是否为空

          _this._prevBloodPos = new Vec3();
          return _this;
        }

        var _proto = MonsterBloodBar.prototype;
        /**
         * 展示血条
         *
         * @param {*} scriptParent 
         * @param {number} totalBlood
         * @param {Vec3} offsetPos
         * @param {number} hpAddition
         * @param {(Function | null)} [callback]
         * @param {boolean} [isInit=true]
         * @memberof MonsterBloodBar
         */

        _proto.show = function show(scriptParent, totalBlood, offsetPos, hpAddition, callback, isInit) {
          if (isInit === void 0) {
            isInit = true;
          }

          this._scriptParent = scriptParent;
          this._totalBlood = totalBlood * hpAddition;
          this._offsetPos = offsetPos;
          this._ndTarget = scriptParent.node;
          this._isBloodEmpty = false;

          this._prevBloodPos.set(this._ndTarget.worldPosition);

          if (isInit) {
            this._curBlood = this._totalBlood;
          } //当前血量占全部的比例


          var ratio = this._curBlood / this._totalBlood;
          ratio = clamp(ratio, 0, 1); //进度条宽度设置

          this.UIComWhiteBar.setContentSize(ratio * this._maxWhiteBarWidth, this._whiteBarHeight);
          this.UIComRedBar.setContentSize(ratio * this._maxRedBarWidth, this._redBarHeight); // this.UIComBloodBar.priority = constant.PRIORITY.BLOOD;

          this.node.setSiblingIndex(Constant.PRIORITY.BLOOD);
          callback && callback();
        }
        /**
         * 刷新血量
         *
         * @param {number} num 血量值
         * @memberof MonsterBloodBar
         */
        ;

        _proto.refreshBlood = function refreshBlood(num) {
          var _this2 = this;

          this._curBlood += num;
          var ratio = this._curBlood / this._totalBlood;

          if (num < 0) {
            //减血
            ratio = ratio <= 0 ? 0 : ratio;
            this.UIComRedBar.setContentSize(this._maxRedBarWidth * ratio, this._redBarHeight);

            if (!this._isBloodEmpty) {
              this._isBloodEmpty = ratio <= 0;
              tween(this.UIComWhiteBar).to(0.7, {
                width: this._maxWhiteBarWidth * ratio
              }).call(function () {
                if (_this2._isBloodEmpty) {
                  PoolManager.instance.putNode(_this2.node);
                }
              }).start();

              if (this._isBloodEmpty) {
                this._scriptParent.isDie = true;
              }
            } else {
              PoolManager.instance.putNode(this.node);
              this._scriptParent.isDie = true;
            }
          }
        };

        _proto.update = function update() {
          if (this.node.parent && this.node.active && this._ndTarget && this._ndTarget.parent) {
            var _this$_mainCamera;

            var worPos = this._ndTarget.worldPosition;

            if (this._isBloodEmpty) {
              worPos = this._prevBloodPos;
            } else {
              this._prevBloodPos.set(worPos);
            }

            (_this$_mainCamera = this._mainCamera) == null ? void 0 : _this$_mainCamera.convertToUINode(worPos, find("Canvas"), this._curPos);

            this._curPos.add(this._offsetPos);

            this.node.setPosition(this._curPos);
          }
        };

        _createClass(MonsterBloodBar, [{
          key: "_mainCamera",
          get: //血量为空前的血条位置
          function get() {
            var _find;

            return (_find = find("Main Camera")) == null ? void 0 : _find.getComponent(CameraComponent);
          }
        }]);

        return MonsterBloodBar;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "UIComWhiteBar", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "UIComRedBar", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "UIComBloodBar", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/monsterModel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts', './gameManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, SkeletalAnimationComponent, AnimationClip, Component, Constant, GameManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SkeletalAnimationComponent = module.SkeletalAnimationComponent;
      AnimationClip = module.AnimationClip;
      Component = module.Component;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      GameManager = module.GameManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "15aa8oJcxdFKKBQnRjjhjLX", "monsterModel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //怪物动画脚本

      var MonsterModel = exports('MonsterModel', (_dec = ccclass('MonsterModel'), _dec2 = property(SkeletalAnimationComponent), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MonsterModel, _Component);

        function MonsterModel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "aniComPlayer", _descriptor, _assertThisInitialized(_this));

          _this._isAniPlaying = false; //当前动画是否正在播放

          _this._scriptMonster = null;
          _this._aniType = ""; //动画类型

          _this._aniState = null;
          return _this;
        }

        var _proto = MonsterModel.prototype;

        _proto.start = function start() {// [3]
        }
        /**
         * attack动画帧事件
         * @returns 
         */
        ;

        _proto.onFrameAttack = function onFrameAttack(isNormalAttack) {
          if (isNormalAttack === void 0) {
            isNormalAttack = true;
          }

          if (GameManager.isGameOver || GameManager.isGamePause) {
            return;
          }

          this.scriptMonster.releaseSkillToPlayer(isNormalAttack);
        }
        /**
         * 播放小怪动画
         *
         * @param {string} aniType 动画类型
         * @param {boolean} [isLoop=false] 是否循环
         * @param {Function} [callback] 回调函数
         * @param {number} [pos] 调用播放动画的位置，方便用于测试
         * @returns
         * @memberof Player
         */
        ;

        _proto.playAni = function playAni(aniType, isLoop, callback, pos) {
          var _this$aniComPlayer,
              _this$aniComPlayer2,
              _this2 = this;

          if (isLoop === void 0) {
            isLoop = false;
          } // console.log("monsterAniType", aniType, "curAni", this._aniType, "pos", pos);


          this._aniType = aniType;
          (_this$aniComPlayer = this.aniComPlayer) == null ? void 0 : _this$aniComPlayer.play(aniType);
          this.isAniPlaying = true;
          this._aniState = (_this$aniComPlayer2 = this.aniComPlayer) == null ? void 0 : _this$aniComPlayer2.getState(aniType);

          if (this._aniState) {
            if (isLoop) {
              this._aniState.wrapMode = AnimationClip.WrapMode.Loop;
            } else {
              this._aniState.wrapMode = AnimationClip.WrapMode.Normal;
            }

            switch (aniType) {
              case Constant.MONSTER_ANI_TYPE.ATTACK:
                this._aniState.speed = GameManager.gameSpeed * GameManager.attackSpeedAddition * this.scriptMonster.curAttackSpeed;
                break;

              case Constant.MONSTER_ANI_TYPE.ATTACK_1:
                this._aniState.speed = GameManager.gameSpeed * GameManager.attackSpeedAddition * this.scriptMonster.curAttackSpeed;
                break;

              case Constant.MONSTER_ANI_TYPE.ATTACK_2:
                this._aniState.speed = GameManager.gameSpeed * GameManager.attackSpeedAddition * this.scriptMonster.curAttackSpeed;
                break;

              case Constant.MONSTER_ANI_TYPE.RUN:
                this._aniState.speed = GameManager.gameSpeed * (this.scriptMonster.curMoveSpeed * GameManager.moveSpeedAddition / this.scriptMonster.baseInfo.moveSpeed);
                break;

              case Constant.MONSTER_ANI_TYPE.IDLE:
                this._aniState.speed = GameManager.gameSpeed;
                break;

              default:
                this._aniState.speed = GameManager.gameSpeed;
                break;
            }
          }

          if (!isLoop) {
            this.aniComPlayer.once(SkeletalAnimationComponent.EventType.FINISHED, function () {
              _this2.isAniPlaying = false;
              callback && callback();
            });
          }
        };

        _createClass(MonsterModel, [{
          key: "isAniPlaying",
          get: function get() {
            return this._isAniPlaying;
          },
          set: //动画播放组件
          function set(v) {
            this._isAniPlaying = v;
          }
        }, {
          key: "scriptMonster",
          get: function get() {
            return this._scriptMonster;
          },
          set: function set(v) {
            this._scriptMonster = v;
          }
        }, {
          key: "isRunning",
          get: //动画播放状态
          //是否正在跑
          function get() {
            return this._aniType === Constant.MONSTER_ANI_TYPE.RUN && this.isAniPlaying;
          } //是否站立

        }, {
          key: "isIdle",
          get: function get() {
            return this._aniType === Constant.MONSTER_ANI_TYPE.IDLE && this.isAniPlaying;
          } //是否正在攻击

        }, {
          key: "isAttacking",
          get: function get() {
            return this._aniType === Constant.MONSTER_ANI_TYPE.ATTACK && this.isAniPlaying || this._aniType === Constant.MONSTER_ANI_TYPE.ATTACK_1 && this.isAniPlaying || this._aniType === Constant.MONSTER_ANI_TYPE.ATTACK_2 && this.isAniPlaying;
          } //是否正在受到攻击

        }, {
          key: "isHitting",
          get: function get() {
            return this._aniType === Constant.MONSTER_ANI_TYPE.HIT && this.isAniPlaying;
          }
        }]);

        return MonsterModel;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "aniComPlayer", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/monsterSkillCollider.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameManager.ts', './constant.ts', './dispersionSurround.ts', './dispersion.ts', './energyBall.ts', './jetFires.ts', './fireBall.ts', './fireBallBig.ts', './laser.ts', './tornado.ts', './poolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Enum, BoxColliderComponent, CylinderColliderComponent, SphereCollider, CapsuleColliderComponent, MeshColliderComponent, Component, GameManager, Constant, DispersionSurround, Dispersion, EnergyBall, JetFires, FireBall, FireBallBig, Laser, Tornado, PoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Enum = module.Enum;
      BoxColliderComponent = module.BoxColliderComponent;
      CylinderColliderComponent = module.CylinderColliderComponent;
      SphereCollider = module.SphereCollider;
      CapsuleColliderComponent = module.CapsuleColliderComponent;
      MeshColliderComponent = module.MeshColliderComponent;
      Component = module.Component;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      DispersionSurround = module.DispersionSurround;
    }, function (module) {
      Dispersion = module.Dispersion;
    }, function (module) {
      EnergyBall = module.EnergyBall;
    }, function (module) {
      JetFires = module.JetFires;
    }, function (module) {
      FireBall = module.FireBall;
    }, function (module) {
      FireBallBig = module.FireBallBig;
    }, function (module) {
      Laser = module.Laser;
    }, function (module) {
      Tornado = module.Tornado;
    }, function (module) {
      PoolManager = module.PoolManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _class3;

      cclegacy._RF.push({}, "00815wthORNyqdwj+wC28bk", "monsterSkillCollider", undefined); //怪物武器碰撞器/触发器脚本


      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var COLLIDER_NAME = Enum({
        ENERGY_BALL: 1,
        //直线飞行能量球
        FIRE_BALL: 2,
        //线飞行的小火球
        JET_FIRES: 3,
        //直线范围型的火焰
        DISPERSION: 4,
        //180度散射
        TORNADO: 5,
        //旋转前进的龙卷风
        FIRE_BALL_BIG: 6,
        //直线下坠的大火团 
        DISPERSION_SURROUND: 7,
        //360度六角形散射
        LASER: 8 //直线激光

      });
      var MonsterSkillCollider = exports('MonsterSkillCollider', (_dec = ccclass('MonsterSkillCollider'), _dec2 = property({
        type: COLLIDER_NAME,
        displayOrder: 1
      }), _dec(_class = (_class2 = (_class3 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(MonsterSkillCollider, _Component);

        function MonsterSkillCollider() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "colliderName", _descriptor, _assertThisInitialized(_this));

          _this._isOnJetFires = false; //是否处在龙火焰中

          _this._checkInterval = 1; //大龙火焰检查间隔

          _this._colliderCom = null;
          return _this;
        }

        var _proto = MonsterSkillCollider.prototype;

        _proto.onLoad = function onLoad() {
          this._colliderCom = this.node.getComponent(BoxColliderComponent) || this.node.getComponent(CylinderColliderComponent) || this.node.getComponent(SphereCollider) || this.node.getComponent(CapsuleColliderComponent) || this.node.getComponent(MeshColliderComponent) || this.node.getComponent(CylinderColliderComponent);

          if (!this._colliderCom) {
            console.error("this node does not have collider component");
          }
        };

        _proto.onEnable = function onEnable() {
          if (this.colliderName === COLLIDER_NAME.JET_FIRES) {
            this._colliderCom.on("onTriggerStay", this._onTriggerStayCb, this);

            this._colliderCom.on("onTriggerExit", this._onTriggerExitCb, this);
          } else {
            if (this._colliderCom.isTrigger) {
              this._colliderCom.on('onTriggerEnter', this._onTriggerEnterCb, this);
            } else {
              this._colliderCom.on('onCollisionEnter', this._onCollisionEnterCb, this);
            }
          }
        };

        _proto.onDisable = function onDisable() {
          if (this.colliderName === COLLIDER_NAME.JET_FIRES) {
            this._colliderCom.off("onTriggerStay", this._onTriggerStayCb, this);

            this._colliderCom.off("onTriggerExit", this._onTriggerExitCb, this);
          } else {
            if (this._colliderCom.isTrigger) {
              this._colliderCom.off('onTriggerEnter', this._onTriggerEnterCb, this);
            } else {
              this._colliderCom.off('onCollisionEnter', this._onCollisionEnterCb, this);
            }
          }
        };

        _proto.start = function start() {
          this._isOnJetFires = false;
        }
        /**
         * 初始化
         */
        ;

        _proto.init = function init() {};

        _proto._onTriggerEnterCb = function _onTriggerEnterCb(event) {
          this._hitTarget(event.otherCollider);
        };

        _proto._onCollisionEnterCb = function _onCollisionEnterCb(event) {
          this._hitTarget(event.otherCollider);
        };

        _proto._hitTarget = function _hitTarget(otherCollider) {
          var _this$node$parent, _this$node$parent2, _this$node$parent3, _this$node$parent4, _this$node$parent5;

          if (GameManager.isGameOver || !GameManager.isGameStart) {
            return;
          }

          if (otherCollider.getGroup() === Constant.PHY_GROUP.OBSTACLE) {
            //技能碰到游戏中的障碍则回收
            var scriptSkillCollider = null;

            switch (this.colliderName) {
              case COLLIDER_NAME.ENERGY_BALL:
                scriptSkillCollider = this.node.getComponent(EnergyBall);

                if (!scriptSkillCollider.skillInfo.penetrate) {
                  PoolManager.instance.putNode(this.node);
                }

                break;

              case COLLIDER_NAME.DISPERSION:
                scriptSkillCollider = this.node.getComponent(Dispersion);

                if (!scriptSkillCollider.skillInfo.penetrate) {
                  scriptSkillCollider.hide();
                }

                break;

              case COLLIDER_NAME.TORNADO:
                scriptSkillCollider = (_this$node$parent = this.node.parent) == null ? void 0 : _this$node$parent.getComponent(Tornado);

                if (!scriptSkillCollider.skillInfo.penetrate) {
                  PoolManager.instance.putNode(this.node.parent);
                }

                break;

              case COLLIDER_NAME.DISPERSION_SURROUND:
                scriptSkillCollider = this.node.getComponent(DispersionSurround);

                if (!scriptSkillCollider.skillInfo.penetrate) {
                  scriptSkillCollider.hide();
                }

                break;
            }
          } else if (otherCollider.getGroup() == Constant.PHY_GROUP.PLAYER && GameManager.ndPlayer) {
            var _scriptSkillCollider = null;

            switch (this.colliderName) {
              case COLLIDER_NAME.ENERGY_BALL:
                PoolManager.instance.putNode(this.node);
                _scriptSkillCollider = this.node.getComponent(EnergyBall);

                this._hitPlayer(_scriptSkillCollider.baseInfo);

                break;

              case COLLIDER_NAME.FIRE_BALL:
                //不在这里回收节点.在fireBall里面会回收
                _scriptSkillCollider = (_this$node$parent2 = this.node.parent) == null ? void 0 : _this$node$parent2.getComponent(FireBall);

                this._hitPlayer(_scriptSkillCollider.baseInfo);

                break;

              case COLLIDER_NAME.DISPERSION:
                //注意这里不回收节点，只回收父节点
                _scriptSkillCollider = this.node.getComponent(Dispersion);

                _scriptSkillCollider.hide();

                this._hitPlayer(_scriptSkillCollider.baseInfo);

                break;

              case COLLIDER_NAME.TORNADO:
                _scriptSkillCollider = (_this$node$parent3 = this.node.parent) == null ? void 0 : _this$node$parent3.getComponent(Tornado);

                this._hitPlayer(_scriptSkillCollider.baseInfo);

                break;

              case COLLIDER_NAME.FIRE_BALL_BIG:
                _scriptSkillCollider = (_this$node$parent4 = this.node.parent) == null ? void 0 : _this$node$parent4.getComponent(FireBallBig);

                this._hitPlayer(_scriptSkillCollider.baseInfo);

                break;

              case COLLIDER_NAME.DISPERSION_SURROUND:
                //注意这里不回收，只回收父节点
                _scriptSkillCollider = this.node.getComponent(DispersionSurround);

                _scriptSkillCollider.hide();

                this._hitPlayer(_scriptSkillCollider.baseInfo);

                break;

              case COLLIDER_NAME.LASER:
                _scriptSkillCollider = (_this$node$parent5 = this.node.parent) == null ? void 0 : _this$node$parent5.getComponent(Laser);

                this._hitPlayer(_scriptSkillCollider.baseInfo);

                break;
            }
          }
        };

        _proto._hitPlayer = function _hitPlayer(baseInfo) {
          if (!baseInfo) {
            console.warn("###找不到技能来源敌人", this.colliderName);
            return;
          } // console.log("###技能碰到玩家了", this.colliderName);


          GameManager.scriptPlayer.reduceBlood(baseInfo);
        };

        _proto._onTriggerStayCb = function _onTriggerStayCb(event) {
          if (event.otherCollider.getGroup() == Constant.PHY_GROUP.PLAYER && GameManager.ndPlayer) {
            this._isOnJetFires = true;
          }
        };

        _proto._onTriggerExitCb = function _onTriggerExitCb(event) {
          if (event.otherCollider.getGroup() == Constant.PHY_GROUP.PLAYER && GameManager.ndPlayer) {
            this._isOnJetFires = false;
          }
        };

        _proto.update = function update(deltaTime) {
          if (GameManager.isGameOver || !GameManager.ndPlayer || !this.node.parent) {
            return;
          } //检测是否在龙焰（持续性技能里面），每隔0.5秒时间扣减一定伤害


          if (this.colliderName === COLLIDER_NAME.JET_FIRES && this._isOnJetFires) {
            this._checkInterval += deltaTime;

            if (this._checkInterval >= 0.5) {
              this._checkInterval = 0;
              var scriptSkillCollider = this.node.parent.getComponent(JetFires);

              this._hitPlayer(scriptSkillCollider.baseInfo);
            }
          }
        };

        return MonsterSkillCollider;
      }(Component), _class3.COLLIDER_NAME = COLLIDER_NAME, _class3), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "colliderName", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return COLLIDER_NAME.ENERGY_BALL;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/NewPLayerData.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './LocalData.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, LocalData;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      LocalData = module.LocalData;
    }],
    execute: function () {
      cclegacy._RF.push({}, "01172A3475Fz6HD6fIINisr", "NewPLayerData", undefined);

      var NewPLayerLocalData = exports('NewPLayerLocalData', /*#__PURE__*/function (_LocalData) {
        _inheritsLoose(NewPLayerLocalData, _LocalData);

        function NewPLayerLocalData(defaultVal) {
          return _LocalData.call(this, "NewPLayerLocalData", defaultVal) || this;
        }

        return NewPLayerLocalData;
      }(LocalData));
      var NewPLayerData = exports('NewPLayerData', /*#__PURE__*/function () {
        function NewPLayerData(local) {
          this._local = null;
          this.isNewBee = false;
          this.dataVersion = "";
          this.skillSellGold = 50;
          this._local = local;
        }

        var _proto = NewPLayerData.prototype;

        _proto.saveLocal = function saveLocal() {
          this._local.save();
        };

        _proto.debugClearLocal = function debugClearLocal() {// this._local.data.history = {};
          // this._local.data.settings = {};
          // this._local.data.playerInfo = {};
        };

        _createClass(NewPLayerData, [{
          key: "userId",
          get: function get() {
            return this._local.data.userId;
          },
          set: function set(v) {
            this._local.data.userId = v;

            this._local.save();
          }
        }, {
          key: "playerInfo",
          get: function get() {
            return this._local.data.playerInfo;
          },
          set: function set(v) {
            this._local.data.playerInfo = v;

            this._local.save();
          }
        }, {
          key: "history",
          get: function get() {
            return this._local.data.history;
          },
          set: function set(v) {
            this._local.data.history = v;

            this._local.save();
          }
        }, {
          key: "settings",
          get: function get() {
            return this._local.data.settings;
          },
          set: function set(v) {
            this._local.data.settings = v;

            this._local.save();
          }
        }]);

        return NewPLayerData;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Notification.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "ade9fothM9OvLTx1yRpdoRl", "Notification", undefined);
      /** @public */


      var Notification = exports('Notification', /*#__PURE__*/function () {
        function Notification(name, body, type) {
          this.name = void 0;
          this.body = void 0;
          this.type = void 0;
          this.name = name;
          this.body = body;
          this.type = type;
        }

        var _proto = Notification.prototype;

        _proto.getName = function getName() {
          return this.name;
        };

        _proto.setBody = function setBody(body) {
          this.body = body;
        };

        _proto.getBody = function getBody() {
          return this.body;
        };

        _proto.setType = function setType(type) {
          this.type = type;
        };

        _proto.getType = function getType() {
          return this.type;
        };

        _proto.toString = function toString() {
          var msg = "Notification Name: " + this.getName();
          msg += "\nBody:" + (this.getBody() == null ? "null" : this.getBody().toString());
          msg += "\nType:" + (this.getType() == null ? "null" : this.getType());
          return msg;
        };

        return Notification;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Notifier.ts", ['cc', './Facade.ts'], function (exports) {
  var cclegacy, Facade;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Facade = module.Facade;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c6dcaP28qdJXoAkZIDa0Chk", "Notifier", undefined);

      var Notifier = exports('Notifier', /*#__PURE__*/function () {
        function Notifier() {
          this.facade = void 0;
          this.facade = Facade.ins;
        }

        var _proto = Notifier.prototype;

        _proto.event = function event(name, body, type) {
          if (body === void 0) {
            body = null;
          }

          this.facade.event(name, body, type);
        };

        return Notifier;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Observer.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "32919MoHKtCMo3dR92/4pF5", "Observer", undefined);

      var Observer = exports('Observer', /*#__PURE__*/function () {
        function Observer(notifyMethod, notifyContext) {
          this.notify = void 0;
          this.context = null;
          this.setNotifyMethod(notifyMethod);
          this.setNotifyContext(notifyContext);
        }

        var _proto = Observer.prototype;

        _proto.setNotifyMethod = function setNotifyMethod(notifyMethod) {
          this.notify = notifyMethod;
        };

        _proto.setNotifyContext = function setNotifyContext(notifyContext) {
          this.context = notifyContext;
        };

        _proto.notifyObserve = function notifyObserve(notification) {
          var _this$notify;

          (_this$notify = this.notify) == null ? void 0 : _this$notify.call(this.context, notification);
        };

        _proto.compareNotifyContext = function compareNotifyContext(object) {
          return this.context === object;
        };

        return Observer;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PackerCrypto.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d134ejK4ddMcayIu4eyKE0X", "PackerCrypto", undefined);
      /**
       * File: PackerNone.ts
       * Description: todo 安全性能更高。代价是引入外部代码。
       * Created on: 2024-11-19 14:42:57
       */


      var PackerCrypto = exports('PackerCrypto', /*#__PURE__*/function () {
        function PackerCrypto() {}

        var _proto = PackerCrypto.prototype;

        _proto.encode = function encode(val) {
          return val;
        };

        _proto.decode = function decode(val) {
          return val;
        };

        _proto.hashKey = function hashKey(str) {
          return str;
        };

        return PackerCrypto;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PackerNone.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f2eb1NMxrhFx4uqJJuqEYsD", "PackerNone", undefined);
      /**
       * File: PackerNone.ts
       * Description: 不做加密 【供调试时使用】
       * Created on: 2024-11-19 14:42:57
       */


      var PackerNone = exports('PackerNone', /*#__PURE__*/function () {
        function PackerNone() {}

        var _proto = PackerNone.prototype;

        _proto.encode = function encode(val) {
          return val;
        };

        _proto.decode = function decode(val) {
          return val;
        };

        _proto.hashKey = function hashKey(str) {
          return str;
        };

        return PackerNone;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PackerNormal.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createForOfIteratorHelperLoose, cclegacy;

  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2d22c1/vthJDZYiBLHchodx", "PackerNormal", undefined);
      /**
       * File: PackerNormal.ts
       * Description: 简单进行加密，不依赖其他库。
       * Created on: 2024-11-19 14:13:52
       */


      var PackerNormal = exports('PackerNormal', /*#__PURE__*/function () {
        function PackerNormal() {}

        var _proto = PackerNormal.prototype;
        /**
         * 将字符串中的每个字符转换为 UTF-8 编码形式的字节数组
         * @param str
         * @returns
         */

        _proto.encode = function encode(str) {
          var byteArray = [];

          for (var _iterator = _createForOfIteratorHelperLoose(str), _step; !(_step = _iterator()).done;) {
            var c = _step.value;
            var codePoint = c.codePointAt(0);

            if (codePoint <= 0x7f) {
              // 0~127
              byteArray.push(codePoint);
            } else if (codePoint <= 0x7ff) {
              // 128~2047
              byteArray.push(0xc0 | codePoint >> 6, 0x80 | codePoint & 0x3f);
            } else if (codePoint <= 0xffff) {
              // 2048~65535
              byteArray.push(0xe0 | codePoint >> 12, 0x80 | (codePoint & 0xfc0) >> 6, 0x80 | codePoint & 0x3f);
            } else {
              // >65535
              byteArray.push(0xf0 | codePoint >> 18, 0x80 | (codePoint & 0x3f000) >> 12, 0x80 | (codePoint & 0xfc0) >> 6, 0x80 | codePoint & 0x3f);
            }
          }

          return byteArray.join(PackerNormal.separator);
        }
        /**
         * UTF-8 编码形式的字节数组转化为字符串
         * @param str
         * @returns
         */
        ;

        _proto.decode = function decode(str) {
          var offset = 0;
          var codePoint = 0;
          var array = [];
          var bytes = str.split(PackerNormal.separator).map(function (i) {
            return Number(i);
          });
          var end = bytes.length;

          while (offset < end) {
            if (bytes[offset] < 128) {
              codePoint = bytes[offset];
              offset += 1;
            } else if (bytes[offset] < 224) {
              codePoint = ((bytes[offset] & 0x3f) << 6) + (bytes[offset + 1] & 0x3f);
              offset += 2;
            } else if (bytes[offset] < 240) {
              codePoint = ((bytes[offset] & 0x0f) << 12) + ((bytes[offset + 1] & 0x3f) << 6) + (bytes[offset + 2] & 0x3f);
              offset += 3;
            } else {
              codePoint = ((bytes[offset] & 0x07) << 18) + ((bytes[offset + 1] & 0x3f) << 12) + ((bytes[offset + 2] & 0x3f) << 6) + (bytes[offset + 3] & 0x3f);
              offset += 4;
            }

            array.push(codePoint);
          }

          return String.fromCodePoint.apply(null, array);
        };

        _proto.hashKey = function hashKey(val) {
          return this.encode(val);
        };

        return PackerNormal;
      }());
      PackerNormal.separator = "|";

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PathUtils.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "31e73OkusRKM4YlqG49ZqSZ", "PathUtils", undefined);
      /**
       * 资源路径获取工具
       * 注意：
       * 使用"/" 使用\\的话在添加后缀版本号的后 会获取不到对应资源；
       * resources/icon/area/${baseName}.${extName};
       * resources\\icon\\area\\${baseName}.${extName};
       */


      var PathUtils = exports('PathUtils', /*#__PURE__*/function () {
        function PathUtils() {}

        PathUtils.config = function config(baseName) {
          return "datas/" + baseName;
        };

        PathUtils.areaIcon = function areaIcon(baseName, extName) {
          if (extName === void 0) {
            extName = PathUtils.EXT_NAME_PNG;
          }

          return "resources/icon/area/" + baseName + "." + extName;
        };

        PathUtils.fishIcon = function fishIcon(fishId) {
          return "resources/icon/fish/" + fishId + ".png";
        };

        return PathUtils;
      }());
      PathUtils.EXT_NAME_JPG = "jpg";
      PathUtils.EXT_NAME_PNG = "png";
      PathUtils.EXT_NAME_BYTE = "bin";
      PathUtils.EXT_NAME_JSON = "json";

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PauseMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './PausePanel.ts', './gameManager.ts', './audioManager.ts', './ViewMgr.ts', './ModuleType.ts', './Mediator.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Button, PausePanel, GameManager, AudioManager, ViewMgr, ModuleName, MediatorName, ProxyName, Mediator, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
    }, null, null, function (module) {
      PausePanel = module.PausePanel;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      ViewMgr = module.ViewMgr;
    }, function (module) {
      ModuleName = module.ModuleName;
      MediatorName = module.MediatorName;
      ProxyName = module.ProxyName;
    }, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "177efRCYxhFSLSrRKE4pSAf", "PauseMediator", undefined);
      /**
       * File: PauseMediator
       * Description: 
       * Created on: 2024-11-13 10:09:40
       */


      var PauseMediator = exports('PauseMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(PauseMediator, _Mediator);

        function PauseMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UIPopup;
          _this._skin = "pause/pausePanel";
          _this._gameProxy = null;
          _this._playerProxy = null;
          return _this;
        }

        var _proto = PauseMediator.prototype;

        _proto.updateSkill = function updateSkill() {
          var playerProxy = this._playerProxy;
          var arrSkill = playerProxy.playerInfo.arrSkill;
          this.getComponent(PausePanel).setSkillList(arrSkill);
        };

        _proto.updateAudio = function updateAudio() {
          var enabled = this._gameProxy.audioEnabled;
          AudioManager.instance.switchSound(enabled);
          AudioManager.instance.switchMusic(enabled);
          this.getComponent(PausePanel).enableAudio(enabled);
        };

        _proto.onClickBtnHome = function onClickBtnHome() {
          ViewMgr.ins.show(ModuleName.Fight, MediatorName.FightBack);
        };

        _proto.onClickBtnPlay = function onClickBtnPlay() {
          this.hide();
          GameManager.isGamePause = false;
        };

        _proto.onClickBtnSound = function onClickBtnSound() {
          this._gameProxy.enableAudio();

          this.updateAudio();
        };

        _proto.onInit = function onInit() {
          _Mediator.prototype.onInit.call(this);

          this._gameProxy = this.facade.retrieveProxy(ModuleName.Game, ProxyName.Game);
          this._playerProxy = this.facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
        };

        _proto.onShow = function onShow(param) {
          _Mediator.prototype.onShow.call(this);

          this.updateSkill();
          this.updateAudio();
        };

        _proto.addListeners = function addListeners() {
          _Mediator.prototype.addListeners.call(this);

          var view = this.getComponent(PausePanel);
          view.btnHome.node.on(Button.EventType.CLICK, this.onClickBtnHome, this);
          view.btnPlay.node.on(Button.EventType.CLICK, this.onClickBtnPlay, this);
          view.btnSound.node.on(Button.EventType.CLICK, this.onClickBtnSound, this);
        };

        _proto.removeListeners = function removeListeners() {
          _Mediator.prototype.removeListeners.call(this);

          var view = this.getComponent(PausePanel);
          view.btnHome.node.off(Button.EventType.CLICK, this.onClickBtnHome, this);
          view.btnPlay.node.off(Button.EventType.CLICK, this.onClickBtnPlay, this);
          view.btnSound.node.off(Button.EventType.CLICK, this.onClickBtnSound, this);
        };

        _proto.onHide = function onHide() {
          _Mediator.prototype.onHide.call(this);
        };

        return PauseMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PausePanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageData.ts', './resourceUtil.ts', './SkillList.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Sprite, Label, Node, SpriteFrame, Button, Component, _updateSceneRenderers, ResourceUtil, SkillList;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      _updateSceneRenderers = module.updateSceneRenderers;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, function (module) {
      SkillList = module.SkillList;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11;

      cclegacy._RF.push({}, "b8a8b/Em7hHbpXDdVUgBWXr", "PausePanel", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PausePanel = exports('PausePanel', (_dec = ccclass("PausePanel"), _dec2 = menu("_game/module/fight/PausePanel"), _dec3 = property(Sprite), _dec4 = property(Label), _dec5 = property(Label), _dec6 = property(Node), _dec7 = property(SpriteFrame), _dec8 = property(SpriteFrame), _dec9 = property(Sprite), _dec10 = property(Node), _dec11 = property(Button), _dec12 = property(Button), _dec13 = property(Button), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PausePanel, _Component);

        function PausePanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spSkillIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbSkillName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbSkillDesc", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ndSkillList", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfMusicOn", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfMusicOff", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spBtnSound", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ndSkillItem", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSound", _descriptor9, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnPlay", _descriptor10, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnHome", _descriptor11, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = PausePanel.prototype;

        _proto.enableAudio = function enableAudio(v) {
          this.spBtnSound.spriteFrame = v ? this.sfMusicOn : this.sfMusicOff;
        };

        _proto.setSkillList = function setSkillList(arrSkill) {
          var isExist = arrSkill.length > 0;
          this.ndSkillItem.active = isExist;
          this.ndSkillList.active = isExist;
          if (!isExist) return;
          var scriptSkillList = this.ndSkillList.getComponent(SkillList);
          scriptSkillList.init(arrSkill, this.updateSelectSkill.bind(this));
        };

        _proto.updateSelectSkill = function updateSelectSkill(itemInfo) {
          this.lbSkillName.string = itemInfo.name;
          this.lbSkillDesc.string = itemInfo.desc;
          ResourceUtil.setSpriteFrame("texture/skillIcon/" + itemInfo.icon, this.spSkillIcon);
        };

        _proto.onEnable = function onEnable() {
          _updateSceneRenderers();
        };

        return PausePanel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spSkillIcon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbSkillName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbSkillDesc", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "ndSkillList", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sfMusicOn", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "sfMusicOff", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "spBtnSound", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "ndSkillItem", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "btnSound", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "btnPlay", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "btnHome", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/player.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './mapManager.ts', './util.ts', './audioManager.ts', './effectManager.ts', './playerModel.ts', './clientEvent.ts', './constant.ts', './gameManager.ts', './resourceUtil.ts', './arrow.ts', './uiManager.ts', './characterRigid.ts', './poolManager.ts', './Utils.ts', './PureMVC.ts', './Constant2.ts', './ConfigUtils.ts', './ModuleType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, _asyncToGenerator, _regeneratorRuntime, cclegacy, Quat, Vec3, _decorator, RigidBodyComponent, CapsuleColliderComponent, macro, Component, MapManager, Util, AudioManager, EffectManager, PlayerModel, ClientEvent, Constant, GameManager, ResourceUtil, Arrow, UIManager, CharacterRigid, PoolManager, facade, ConfigUtils, ModuleName, ProxyName;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      Quat = module.Quat;
      Vec3 = module.Vec3;
      _decorator = module._decorator;
      RigidBodyComponent = module.RigidBodyComponent;
      CapsuleColliderComponent = module.CapsuleColliderComponent;
      macro = module.macro;
      Component = module.Component;
    }, function (module) {
      MapManager = module.MapManager;
    }, function (module) {
      Util = module.Util;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      PlayerModel = module.PlayerModel;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, function (module) {
      Arrow = module.Arrow;
    }, function (module) {
      UIManager = module.UIManager;
    }, function (module) {
      CharacterRigid = module.CharacterRigid;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, null, function (module) {
      facade = module.facade;
    }, null, function (module) {
      ConfigUtils = module.ConfigUtils;
    }, function (module) {
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "00abeCWTxpAwrraoA+2UT4q", "player", undefined); //玩家脚本


      var qt_0 = new Quat();
      var v3_0 = new Vec3();
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Player = exports('Player', (_dec = ccclass('Player'), _dec2 = property(PlayerModel), _dec3 = property(RigidBodyComponent), _dec4 = property(CapsuleColliderComponent), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Player, _Component);

        function Player() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "scriptPlayerModel", _descriptor, _assertThisInitialized(_this)); //玩家动画组件播放脚本


          _initializerDefineProperty(_this, "rigidComPlayer", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "colliderComPlayer", _descriptor3, _assertThisInitialized(_this)); //当前"数值技能"值


          _this._curAttackPower = 20; //当前攻击力

          _this._curDefensePower = 1; //当前防御力

          _this._curAttackSpeed = 1; //当前攻击速度

          _this._curDodgeRate = 0; //当前闪避率

          _this._curCriticalHitRate = 0; //当前暴击率，0为不暴击

          _this._curCriticalHitDamage = 0; //当前暴击伤害

          _this._curHpLimit = 0; //当前玩家生命值上限（这个是上限，是生命上限，不是当前生命值）
          //是否拥有触发技能

          _this._isBloodthirsty = false; //是否拥有技能：嗜血

          _this._isArrowLightning = false; //是否拥有技能： 闪电

          _this._isArrowLaunch = false; //是否拥有技能：弹射
          //是否拥有buff技能

          _this._isArrowIce = false; //是否拥有技能：冰冻

          _this._isArrowFire = false; //是否拥有技能：灼烧
          //是否拥有形态技能

          _this._isArrowDouble = false; //是否拥有技能：弓箭双重射击

          _this._isArrowPenetrate = false; //是否拥有技能：弓箭穿透射击

          _this._isArrowContinuous = false; //是否拥有技能：连续射击
          //技能数组

          _this._arrFormChangeSkill = []; //玩家当前拥有的形态变化技能10x

          _this._arrValueChangeSkill = []; //玩家数值变化技能20x

          _this._arrBuffSkill = []; //玩家buff技能30x

          _this._arrTriggerSkill = []; //玩家触发技能40x

          _this._scriptBloodBar = null; //血条绑定脚本

          _this._isMoving = false; //玩家是否正在移动

          _this._isPlayRotate = false; //是否旋转

          _this._scriptCharacterRigid = null;
          _this._playerBaseInfo = {}; //玩家在base.csv的基础数据

          _this._hp = 0; //玩家当前生命值

          _this._isDie = false; //主角是否阵亡

          _this._horizontal = 0; //水平移动距离

          _this._vertical = 0; //垂直移动距离

          _this._targetAngle = new Vec3(); //目标旋转角度

          _this._curAngleY = 0; //当前Y分量旋转角度

          _this._ndTarget = null; //目标小怪

          _this._throwArrowSpeed = 30; //弓箭速30

          _this._arrowPos = new Vec3(); //箭初始化位置

          _this._bloodTipOffsetPos = new Vec3(-10, 150, 0); //血量提示和玩家间距

          _this._playerMonsterOffset = new Vec3(); //小怪和玩家间距

          _this._oriPlayerPos = new Vec3(0, 1.7, 0); //玩家初始世界坐标

          _this._oriPlayerScale = new Vec3(4, 4, 4); //玩家初始缩放倍数

          _this._oriPlayerAngle = new Vec3(0, -90, 0); //玩家初始角度

          _this._curAngle_1 = new Vec3(); //当前玩家旋转的角度

          _this._curAngle_2 = new Vec3(); //玩家角度

          _this._rotateDirection = new Vec3(); //旋转方向

          _this._ndRunSmokeEffect = null; //烟雾特效

          _this._originAngle = new Vec3(0, -90, 0); //玩家开始角度

          _this._tempAngle = new Vec3(); //临时变量，玩家角度

          _this._forWard = new Vec3(); //朝向

          _this._range = 0.01; //

          _this._curMoveSpeed = 0; //当前玩家移动速度

          _this._curBlood = 0; //当前血量

          _this._rotateInterval = 0.3; //检查停止移动后是否还在旋转

          _this._arrArrowPreload = [];
          return _this;
        }

        var _proto = Player.prototype;

        _proto.onEnable = function onEnable() {
          ClientEvent.on(Constant.EVENT_TYPE.PARSE_PLAYER_SKILL, this._parsePlayerSkill, this);
          ClientEvent.on(Constant.EVENT_TYPE.ON_REVIVE, this._onRevive, this);
        };

        _proto.onDisable = function onDisable() {
          ClientEvent.off(Constant.EVENT_TYPE.PARSE_PLAYER_SKILL, this._parsePlayerSkill, this);
          ClientEvent.off(Constant.EVENT_TYPE.ON_REVIVE, this._onRevive, this);

          if (this.scriptBloodBar) {
            this._curBlood = this.scriptBloodBar.curBlood;
            this.scriptBloodBar.node.destroy();
            this.scriptBloodBar = null;
          }
        };

        _proto.start = function start() {};

        _proto.init = function init() {
          this.isMoving = false;
          this.isDie = false;
          this.isPlayRotate = false;
          this.isArrowDouble = false;
          this.isArrowPenetrate = false;
          this.isArrowContinuous = false;
          this.isArrowIce = false;
          this.isArrowFire = false;
          this.isBloodthirsty = false;
          this.isArrowLightning = false;
          this.isArrowLaunch = false;
          this._horizontal = 0;
          this._vertical = 0;
          this._curBlood = 0;
          this._ndTarget = null;
          this.scriptCharacterRigid = this.node.getComponent(CharacterRigid); //获取玩家基础数据

          this.playerBaseInfo = ConfigUtils.queryByID("base", Constant.BASE.PLAYER_01);

          if (this.playerBaseInfo) {
            //设置玩家大小
            var arrScale = Util.parseStringData(this.playerBaseInfo.scale, ",");

            this._oriPlayerScale.set(arrScale[0], arrScale[1], arrScale[2]);

            this.node.setScale(this._oriPlayerScale);
            this.resetPlayerWorPos(); //设置角度

            var arrAngle = Util.parseStringData(this.playerBaseInfo.angle, ",");

            this._oriPlayerAngle.set(arrAngle[0], arrAngle[1], arrAngle[2]);

            this.node.eulerAngles = this._oriPlayerAngle;
            this.curAttackPower = this.playerBaseInfo.attackPower;
            this.curDefensePower = this.playerBaseInfo.defensePower;
            this.curAttackSpeed = this.playerBaseInfo.attackSpeed;
            this.curMoveSpeed = this.playerBaseInfo.moveSpeed;
            this.curDodgeRate = this.playerBaseInfo.dodgeRate;
            this.curCriticalHitRate = this.playerBaseInfo.criticalHitRate;
            this.curCriticalHitDamage = this.playerBaseInfo.criticalHitDamage;
            this.curHpLimit = this.playerBaseInfo.hp;
            this._hp = this.playerBaseInfo.hp;
          }

          this._parsePlayerSkill(true);

          console.log("###加载血条1"); //展示血条

          UIManager.instance.showPlayerBloodBar(this, this._hp, this._hp, function () {// if (GameManager.isTesting) {
            //     this.addBlood(2000, true);
            // }
          }, this._bloodTipOffsetPos);
          this.scriptPlayerModel.playAni(Constant.PLAYER_ANI_TYPE.IDLE, true);
          this.scriptPlayerModel.init();
          this.rigidComPlayer.clearState();
        }
        /**
         * 每次成功进入新的一层则更新玩家状态
         *
         * @memberof Player
         */
        ;

        _proto.resetPlayerState = function resetPlayerState() {
          this.node.active = true;
          this.rigidComPlayer.clearState();
          this.resetPlayerWorPos();
          this.node.eulerAngles = this._originAngle;
          this.scriptPlayerModel.playAni(Constant.PLAYER_ANI_TYPE.IDLE, true); //将未播放结束的特效节点隐藏，避免到下一层还在展示特效

          this.node.children.forEach(function (ndChild) {
            if (ndChild.name !== "body") {
              ndChild.active = false;
            }
          });

          if (!this.scriptBloodBar) {
            UIManager.instance.showPlayerBloodBar(this, this.curHpLimit, this._curBlood, function () {}, this._bloodTipOffsetPos);
          }
        }
        /**
         * 根据an、anS两张图设置不同的玩家初始位置
         */
        ;

        _proto.resetPlayerWorPos = function resetPlayerWorPos() {
          var arrPosition = Util.parseStringData(this.playerBaseInfo.position, ",");

          if (MapManager.isMapAnS) {
            this._oriPlayerPos.set(-16.742, arrPosition[1], -0.719);
          } else {
            //设置坐标
            this._oriPlayerPos.set(arrPosition[0], arrPosition[1], arrPosition[2]);
          }

          this.node.setPosition(this._oriPlayerPos);
        }
        /**
         * 解析玩家当前技能
         * 
         * @param {boolean} isCoverSkill 是否重新覆盖技能，主角初始化的要，其他时候不需要
         * @memberof Player
         */
        ;

        _proto._parsePlayerSkill = function _parsePlayerSkill(isCoverSkill) {
          if (isCoverSkill === void 0) {
            isCoverSkill = false;
          }

          var playerProxy = facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
          var arrSkill = playerProxy.playerInfo.arrSkill;
          var arrFormChangeSkill = [];
          var arrValueChangeSkill = [];
          var arrBuffSkill = [];
          var arrTriggerSkill = [];

          if (arrSkill.length) {
            arrSkill.forEach(function (item) {
              if (item.startsWith(Constant.PLAYER_SKILL_USE.FORM_CHANGE)) {
                arrFormChangeSkill.push(item);
              } else if (item.startsWith(Constant.PLAYER_SKILL_USE.VALUE)) {
                arrValueChangeSkill.push(item);
              } else if (item.startsWith(Constant.PLAYER_SKILL_USE.BUFF)) {
                arrBuffSkill.push(item);
              } else if (item.startsWith(Constant.PLAYER_SKILL_USE.TRIGGER)) {
                arrTriggerSkill.push(item);
              }
            });
          }

          this._arrFormChangeSkill = arrFormChangeSkill;
          this._arrValueChangeSkill = arrValueChangeSkill;
          this._arrBuffSkill = arrBuffSkill;
          this._arrTriggerSkill = arrTriggerSkill; // console.log("###_arrFormChangeSkill", this._arrFormChangeSkill);
          // console.log("###_arrValueChangeSkill", this._arrValueChangeSkill);
          // console.log("###_arrBuffSkill", this._arrBuffSkill);
          // console.log("###_arrTriggerSkill", this._arrTriggerSkill);

          if (this._arrFormChangeSkill.length) {
            this.isArrowDouble = this._arrFormChangeSkill.indexOf(Constant.PLAYER_SKILL.ARROW_DOUBLE) !== -1;
            this.isArrowPenetrate = this._arrFormChangeSkill.indexOf(Constant.PLAYER_SKILL.ARROW_PENETRATE) !== -1;
            this.isArrowContinuous = this._arrFormChangeSkill.indexOf(Constant.PLAYER_SKILL.ARROW_CONTINUOUS) !== -1;
          } else {
            this.isArrowDouble = false;
            this.isArrowPenetrate = false;
            this.isArrowContinuous = false;
          } //数值技能只使用一次, 注意：每次获得到需用乘法都是用当前值去乘，而不是乘以最开始的值


          if (this._arrValueChangeSkill.length) {
            //攻击力提升百分比
            var oriAttackPower = this.playerBaseInfo.attackPower;
            var curAttackPower = oriAttackPower; //攻击力1

            var raiseAttackPowerRate_1 = this.getValueSkillRate(Constant.PLAYER_SKILL.RAISE_ATTACK_01);
            curAttackPower = oriAttackPower * (1 + raiseAttackPowerRate_1); //攻击力2

            var raiseAttackPowerRate_2 = this.getValueSkillRate(Constant.PLAYER_SKILL.RAISE_ATTACK_02);
            this.curAttackPower = curAttackPower * (1 + raiseAttackPowerRate_2); //闪避率提升百分比

            var oriDodgeRate = this.playerBaseInfo.dodgeRate;
            var raiseDodgeRate = this.getValueSkillRate(Constant.PLAYER_SKILL.RAISE_DODGE);
            this.curDodgeRate = oriDodgeRate + raiseDodgeRate; //注：以加法形式增加
            //攻速提升百分比

            var oriAttackSpeed = this.playerBaseInfo.attackSpeed;
            var curAttackSpeed = oriAttackSpeed; //攻速1

            var raiseAttackSpeedRate_1 = this.getValueSkillRate(Constant.PLAYER_SKILL.RAISE_ATTACK_SPEED_01);
            curAttackSpeed = oriAttackSpeed * (1 + raiseAttackSpeedRate_1); //攻速2

            var raiseAttackSpeedRate_2 = this.getValueSkillRate(Constant.PLAYER_SKILL.RAISE_ATTACK_SPEED_02);
            this.curAttackSpeed = curAttackSpeed * (1 + raiseAttackSpeedRate_2);

            if (!isCoverSkill) {
              var oriHpLimit = this.playerBaseInfo.hp;
              var raiseHpLimitRate = this.getValueSkillRate(Constant.PLAYER_SKILL.RAISE_HP_LIMIT);
              var offsetHp = oriHpLimit * raiseHpLimitRate;
              var curHpLimit = oriHpLimit + offsetHp;

              if (curHpLimit > this.curHpLimit) {
                this.addBlood(offsetHp, true);
                this.curHpLimit = curHpLimit;
                this._hp += offsetHp;
              }
            } //移速提升百分比


            var oriMoveSpeed = this.playerBaseInfo.moveSpeed;
            var raiseMoveSpeedRate = this.getValueSkillRate(Constant.PLAYER_SKILL.MOVE_SPEED);
            this.curMoveSpeed = oriMoveSpeed * (1 + raiseMoveSpeedRate); //暴击+爆伤提升百分比

            var oriCriticalHitRate = this.playerBaseInfo.criticalHitRate;
            var oriCriticalHitDamage = this.playerBaseInfo.criticalHitDamage;
            var arrCritical_1 = [0, 0]; //暴击率,暴击伤害比

            var arrCritical_2 = [0, 0]; //暴击率,暴击伤害比

            arrCritical_1 = this.getValueSkillRateArr(Constant.PLAYER_SKILL.RAISE_CRITICAL_HIT_DAMAGE_01);
            arrCritical_2 = this.getValueSkillRateArr(Constant.PLAYER_SKILL.RAISE_CRITICAL_HIT_DAMAGE_02);
            var raiseCriticalHitRate = arrCritical_1[0] + arrCritical_2[0];
            var raiseCriticalHitDamage = arrCritical_1[1] + arrCritical_2[1];

            if (raiseCriticalHitRate) {
              this.curCriticalHitRate = oriCriticalHitRate + raiseCriticalHitRate; //注：以加法形式增加
            }

            if (raiseCriticalHitDamage) {
              this.curCriticalHitDamage = oriCriticalHitDamage + raiseCriticalHitDamage; //注：以加法形式增加
            }
          } else {
            this.curAttackPower = this.playerBaseInfo.attackPower;
            this.curAttackSpeed = this.playerBaseInfo.attackSpeed;
            this.curMoveSpeed = this.playerBaseInfo.moveSpeed;
            this.curDodgeRate = this.playerBaseInfo.dodgeRate;
            this.curCriticalHitRate = this.playerBaseInfo.criticalHitRate;
            this.curCriticalHitDamage = this.playerBaseInfo.criticalHitDamage;
            this.curHpLimit = this.playerBaseInfo.hp;
          }

          if (this._arrBuffSkill.length) {
            this.isArrowIce = this._arrBuffSkill.indexOf(Constant.PLAYER_SKILL.ARROW_ICE) !== -1;
            this.isArrowFire = this._arrBuffSkill.indexOf(Constant.PLAYER_SKILL.ARROW_FIRE) !== -1;
          } else {
            this.isArrowIce = false;
            this.isArrowFire = false;
          }

          if (this._arrTriggerSkill.length) {
            this.isArrowLightning = this._arrTriggerSkill.indexOf(Constant.PLAYER_SKILL.ARROW_LIGHTNING) !== -1;
            this.isArrowLaunch = this._arrTriggerSkill.indexOf(Constant.PLAYER_SKILL.ARROW_LAUNCH) !== -1;
            this.isBloodthirsty = this._arrTriggerSkill.indexOf(Constant.PLAYER_SKILL.BLOODTHIRSTY) !== -1;
          } else {
            this.isArrowLightning = false;
            this.isArrowLaunch = false;
            this.isBloodthirsty = false;
          }
        }
        /**
         * 返回当前数值技能提升比例
         */
        ;

        _proto.getValueSkillRate = function getValueSkillRate(key) {
          var _rate;

          var rate = 0; //百分比

          if (this._arrValueChangeSkill.indexOf(key) !== -1) {
            var skillInfo = ConfigUtils.queryByID(Constant.playerSkillName(), key);
            rate = Number(skillInfo.value);
          }

          return (_rate = rate) != null ? _rate : 0;
        }
        /**
         * 返回当前数值技能提升比例数组
         */
        ;

        _proto.getValueSkillRateArr = function getValueSkillRateArr(key) {
          var arrRate = [];

          if (this._arrValueChangeSkill.indexOf(key) !== -1) {
            var skillInfo = ConfigUtils.queryByID(Constant.playerSkillName(), key);
            arrRate = skillInfo.value.split("#");
          }

          arrRate = arrRate.map(function (item) {
            return item ? Number(item) : 0;
          });

          if (arrRate.length === 0) {
            arrRate = [0, 0];
          }

          return arrRate;
        }
        /**
         * 玩家行为
         *
         * @param {*} obj
         * @memberof Player
         */
        ;

        _proto.playAction = function playAction(obj) {
          if (this.isDie) {
            return;
          }

          switch (obj.action) {
            case Constant.PLAYER_ACTION.MOVE:
              var angle = obj.value + 135;
              var radian = angle * macro.RAD;
              this._horizontal = Math.round(Math.cos(radian) * 1);
              this._vertical = Math.round(Math.sin(radian) * 1);
              this.isMoving = true;
              this._curAngleY = obj.value;
              this._curAngleY = this._curAngleY < 0 ? this._curAngleY + 360 : this._curAngleY > 360 ? this._curAngleY - 360 : this._curAngleY;
              break;

            case Constant.PLAYER_ACTION.STOP_MOVE:
              this._horizontal = 0;
              this._vertical = 0;

              this._onPlayerStopMove();

              this.isMoving = false;
              this.rigidComPlayer.clearState();
              this.scriptCharacterRigid.stopMove();
              this._rotateInterval = 0.2;
              break;
          }
        }
        /**
         * 玩家不移动时：a) 地图上没有怪物：在原地待机。b) 地图上有怪物：向怪物方向攻击。
         *
         * @private
         * @memberof Player
         */
        ;

        _proto._onPlayerStopMove = function _onPlayerStopMove() {
          if (!GameManager.isGameOver && GameManager.isGameStart) {
            if (GameManager.arrMonster.length) {
              var isMonsterSurvive = GameManager.arrMonster.some(function (item) {
                return item.parent !== null;
              });

              if (isMonsterSurvive) {
                this._attackMonster();
              }
            } else {
              this.scriptPlayerModel.playAni(Constant.PLAYER_ANI_TYPE.IDLE, true);
            }
          }
        }
        /**
         * 向目标位置移动
         *
         * @private
         * @memberof Monster
         */
        ;

        _proto._moveToTargetWorPos = function _moveToTargetWorPos(targetWorPos) {
          var angleY = this._getTwoPosAngleY(this.node.worldPosition, targetWorPos);

          this.playAction({
            action: Constant.MONSTER_ACTION.MOVE,
            value: angleY
          });
        };

        _proto._getTwoPosAngleY = function _getTwoPosAngleY(selfWorPos, targetWorPos) {
          var _GameManager$mainCame, _GameManager$mainCame2;

          var targetScreenPos = (_GameManager$mainCame = GameManager.mainCamera) == null ? void 0 : _GameManager$mainCame.worldToScreen(targetWorPos);
          var selfScreenPos = (_GameManager$mainCame2 = GameManager.mainCamera) == null ? void 0 : _GameManager$mainCame2.worldToScreen(selfWorPos);
          Vec3.subtract(this._playerMonsterOffset, targetScreenPos, selfScreenPos);
          var angleY = Math.round(Math.atan2(this._playerMonsterOffset.y, this._playerMonsterOffset.x) * 180 / Math.PI);
          return angleY;
        }
        /**
         * 向怪物方向攻击
         */
        ;

        _proto._attackMonster = function _attackMonster() {
          var _this2 = this;

          this._ndTarget = GameManager.getNearestMonster();

          if (!this._ndTarget || this.isDie) {
            return;
          }

          this._moveToTargetWorPos(this._ndTarget.worldPosition);

          this.isMoving = false; //播放攻击动画

          this.scriptPlayerModel.playAni(Constant.PLAYER_ANI_TYPE.ATTACK, false, function () {
            if (!_this2.scriptPlayerModel.isRunning) {
              _this2._attackMonster();
            }
          });
        }
        /**
         * 向敌人射箭
         *
         * @returns
         * @memberof Player
         */
        ;

        _proto.throwArrowToEnemy = function throwArrowToEnemy() {
          var _this3 = this; //射击摇摆


          this.node.forward = Vec3.subtract(this._forWard, this.node.worldPosition, this._ndTarget.worldPosition).normalize().negative(); //使用形态变换技能

          if (this._arrFormChangeSkill.length) {
            //使用技能
            if (this.isArrowDouble) {
              if (this.isArrowContinuous) {
                this._initArrow("arrowDoubleContinuous");
              } else {
                this._initArrow("arrowDouble");
              }
            } else {
              if (this.isArrowContinuous) {
                this._initArrow("arrowSingleContinuous");
              } else {
                this._initArrow("arrowSingle");
              }
            }

            this._arrFormChangeSkill.forEach(function (item) {
              var skillInfo = ConfigUtils.queryByID(Constant.playerSkillName(), String(item));

              if (item === Constant.PLAYER_SKILL.ARROW_REVERSE || item === Constant.PLAYER_SKILL.ARROW_SIDE || item === Constant.PLAYER_SKILL.ARROW_UMBRELLA) {
                _this3._initArrow(skillInfo.resName);
              }
            });
          } else {
            //没有技能则默认连续射单只箭
            this._initArrow("arrowSingle");
          }
        }
        /**
         * 初始化箭
         *
         * @private
         * @param {string} arrowName
         * @memberof Player
         */
        ;

        _proto._initArrow = function _initArrow(arrowName) {
          var _this4 = this;

          ResourceUtil.loadModelRes("weapon/arrow/" + arrowName).then(function (prefab) {
            if (_this4.isMoving) {
              return;
            }

            var ndArrow = PoolManager.instance.getNode(prefab, GameManager.ndGameManager);
            var playerWorPos = _this4.node.worldPosition;

            _this4._arrowPos.set(playerWorPos.x, 3, playerWorPos.z); // if (GameManager.isTesting) {
            //     this._arrowPos.set(playerWorPos.x, -3, playerWorPos.z);
            // }


            ndArrow.setWorldPosition(_this4._arrowPos);
            ndArrow.eulerAngles = _this4.node.eulerAngles;
            ndArrow.children.forEach(function (ndArrowItem) {
              var scriptArrowItem = ndArrowItem.getComponent(Arrow);
              scriptArrowItem.init(_this4._throwArrowSpeed, _this4.node.worldPosition);
            }); //播放箭的音效

            var isHasIce = GameManager.scriptPlayer.isArrowIce;
            var isHasFire = GameManager.scriptPlayer.isArrowFire;
            var isHasLightning = GameManager.scriptPlayer.isArrowLightning;

            if (isHasIce || isHasFire || isHasLightning) {
              if (isHasIce) {
                AudioManager.instance.playSound(Constant.SOUND.ICE);
              }

              if (isHasFire) {
                AudioManager.instance.playSound(Constant.SOUND.FIRE);
              }

              if (isHasLightning) {
                AudioManager.instance.playSound(Constant.SOUND.LIGHTNING);
              }
            } else {
              AudioManager.instance.playSound(Constant.SOUND.LOOSE);
            }
          });
        }
        /**
         * 玩家加血、增加血量上限
         *
         * @param {number} bloodNum
         * @param {boolean} [isIncreaseLimit]
         * @memberof Player
         */
        ;

        _proto.addBlood = function addBlood(bloodNum, isIncreaseLimit) {
          var options = {
            effectPath: "recovery/recovery",
            ndTarget: this.node,
            isPlayAnimation: false,
            speed: GameManager.gameSpeed,
            isRecycle: true
          };
          EffectManager.instance.loadAndPlayEffect(options);
          UIManager.instance.showBloodTips(this, Constant.FIGHT_TIP.ADD_BLOOD, bloodNum, this._bloodTipOffsetPos);
          this.scriptBloodBar.refreshBlood(bloodNum, isIncreaseLimit);
          AudioManager.instance.playSound(Constant.SOUND.RECOVERY);
        } // /**
        //  * 展示复活效果
        //  *
        //  * @private
        //  * @param {number} bloodNum
        //  * @memberof Player
        //  */
        // private _showRevival (bloodNum: number) {
        // }

        /**
         * 玩家扣血
         *
         * @param {*} baseInfo 敌人基础信息
         * @return {*} 
         * @memberof Player
         */
        ;

        _proto.reduceBlood = function reduceBlood(baseInfo) {
          if (this.isDie) {
            return;
          }

          AudioManager.instance.playSound(Constant.SOUND.HIT_PLAYER);

          if (Math.random() > this.playerBaseInfo.dodgeRate) {
            //扣血
            var tipType = Constant.FIGHT_TIP.REDUCE_BLOOD; //敌人伤害

            var damage = baseInfo.attackPower * GameManager.attackAddition * (1 - this.playerBaseInfo.defensePower / (this.playerBaseInfo.defensePower + 400));
            var isCriticalHit = Math.random() <= baseInfo.criticalHitRate; //是否暴击

            if (isCriticalHit) {
              damage = damage * baseInfo.criticalHitDamage;
              tipType = Constant.FIGHT_TIP.CRITICAL_HIT;
            }

            UIManager.instance.showBloodTips(this, tipType, -damage, this._bloodTipOffsetPos);
            this.scriptBloodBar.refreshBlood(-damage);
          }
        }
        /**
         * 奔跑的时候加个烟雾
         *
         * @memberof Player
         */
        ;

        _proto.playRunSmoke = /*#__PURE__*/function () {
          var _playRunSmoke = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var pf, options;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  if (this._ndRunSmokeEffect) {
                    _context.next = 5;
                    break;
                  }

                  _context.next = 3;
                  return ResourceUtil.loadEffectRes("runSmoke/runSmoke");

                case 3:
                  pf = _context.sent;
                  this._ndRunSmokeEffect = PoolManager.instance.getNode(pf, this.node);

                case 5:
                  options = {
                    ndEffect: this._ndRunSmokeEffect
                  };
                  EffectManager.instance.playParticle(options);

                case 7:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function playRunSmoke() {
            return _playRunSmoke.apply(this, arguments);
          }

          return playRunSmoke;
        }()
        /**
         * 攻击的时候隐藏烟雾
         *
         * @memberof Player
         */
        ;

        _proto.hideRunSmoke = function hideRunSmoke() {
          if (this._ndRunSmokeEffect && this._ndRunSmokeEffect.active) {
            this._ndRunSmokeEffect.active = false; // console.log("隐藏烟雾");
          }
        }
        /**
         * 预加载箭和特效
         *
         * @param {Function} callback
         * @memberof Player
         */
        ;

        _proto.preloadArrow = function preloadArrow(callback) {
          var _this5 = this;

          var arrPromise = [];

          var loadArrow = function loadArrow(arrowName, arrowItemNum) {
            return new Promise(function (resolve, reject) {
              if (_this5._arrArrowPreload.indexOf(arrowName) == -1) {
                console.log("是否首次加载箭", arrowName);

                _this5._arrArrowPreload.push(arrowName);

                var groupNum = 2; //加载两三组

                var p1 = GameManager.preloadArrowEffects(arrowItemNum * groupNum);
                var p2 = GameManager.preloadArrow(arrowName, groupNum);
                Promise.all([p1, p2]).then(function () {
                  resolve(null);
                });
              } else {
                resolve(null);
              }
            });
          }; //没有技能,默认单只箭


          if (this._arrFormChangeSkill.length) {
            //使用技能
            this._arrFormChangeSkill.forEach(function (item) {
              var skillInfo = ConfigUtils.queryByID(Constant.playerSkillName(), String(item));

              if (item === Constant.PLAYER_SKILL.ARROW_REVERSE || item === Constant.PLAYER_SKILL.ARROW_SIDE || item === Constant.PLAYER_SKILL.ARROW_UMBRELLA) {
                var p = loadArrow(skillInfo.resName, 2);
                arrPromise.push(p);
              }
            });

            if (this.isArrowDouble) {
              if (this.isArrowContinuous) {
                var p = loadArrow("arrowDoubleContinuous", 4);
                arrPromise.push(p);
              } else {
                var _p = loadArrow("arrowDouble", 2);

                arrPromise.push(_p);
              }
            } else {
              if (this.isArrowContinuous) {
                var _p2 = loadArrow("arrowSingleContinuous", 2);

                arrPromise.push(_p2);
              } else {
                var _p3 = loadArrow("arrowSingle", 1);

                arrPromise.push(_p3);
              }
            }
          } else {
            //默认连续射单只箭
            var _p4 = loadArrow("arrowSingle", 1);

            arrPromise.push(_p4);
          }

          Promise.all(arrPromise).then(function () {
            callback && callback();
          });
        };

        _proto._showDie = function _showDie() {
          this.scriptCharacterRigid.stopMove();
          AudioManager.instance.playSound(Constant.SOUND.PLAYER_01_DIE);
          this.scriptPlayerModel.playAni(Constant.PLAYER_ANI_TYPE.DIE, false, function () {
            GameManager.isWin = false;
          });
        }
        /**
         * 玩家复活
         */
        ;

        _proto._onRevive = function _onRevive() {
          var _this6 = this;

          var options = {
            effectPath: "revival/revival",
            ndTarget: this.node,
            speed: GameManager.gameSpeed,
            isRecycle: true
          };
          EffectManager.instance.loadAndPlayEffect(options);
          this.scheduleOnce(function () {
            var bloodNum = _this6.curHpLimit * 0.5;

            if (GameManager.isGamePause && !GameManager.isGameOver) {
              UIManager.instance.showBloodTips(_this6, Constant.FIGHT_TIP.ADD_BLOOD, bloodNum, _this6._bloodTipOffsetPos);

              _this6.scriptBloodBar.refreshBlood(bloodNum, false);

              AudioManager.instance.playSound(Constant.SOUND.RECOVERY);
              GameManager.isGamePause = false;
              _this6.scriptBloodBar.node.active = true;

              _this6.scriptPlayerModel.playAni(Constant.PLAYER_ANI_TYPE.REVIVE, false, function () {
                _this6.isDie = false;

                _this6.playAction({
                  action: Constant.PLAYER_ACTION.STOP_MOVE
                });

                ClientEvent.dispatchEvent(Constant.EVENT_TYPE.MONSTER_MOVE);
              });

              AudioManager.instance.playSound(Constant.SOUND.REVIVE);
            }
          }, 2);
        };

        _proto.update = function update(deltaTime) {
          if (!GameManager.isGameStart || GameManager.isGameOver || GameManager.isGamePause || this.isDie) {
            return;
          } //玩家旋转


          if (this.isPlayRotate) {
            //当前玩家角度
            this._tempAngle.set(this.node.eulerAngles);

            this._tempAngle.y = this._tempAngle.y < 0 ? this._tempAngle.y + 360 : this._tempAngle.y;
            this.node.eulerAngles = this._tempAngle;

            this._curAngle_1.set(0, this._tempAngle.y, 0);

            if (this._horizontal === 0 && this._vertical === 0) {
              this._range = 0.1;
            } else {
              this._range = 0.01;
            } //第二个参数越小朝向敌人越精确


            var isEqual = this._curAngle_1.equals(this._targetAngle, this._range);

            if (!isEqual) {
              Vec3.lerp(this._curAngle_1, this._curAngle_1, this._targetAngle, 0.167);
              this.node.eulerAngles = this._curAngle_1;
            } else {
              this.isPlayRotate = false;
              this.node.eulerAngles = this._targetAngle;
            }
          }

          if (this._horizontal !== 0 || this._vertical !== 0) {
            //计算出旋转角度
            this._rotateDirection.set(this._horizontal, 0, -this._vertical);

            this._rotateDirection.normalize();

            Quat.fromViewUp(qt_0, this._rotateDirection);
            Quat.toEuler(v3_0, qt_0);
            v3_0.y = v3_0.y < 0 ? v3_0.y + 360 : v3_0.y; // console.log("v3_0", v3_0.y);

            this.isPlayRotate = true; //设置当前玩家角度为正数

            this._curAngle_2.set(this.node.eulerAngles);

            if (this._curAngle_2.y < 0) {
              this._curAngle_2.y += 360;
              this.node.eulerAngles = this._curAngle_2; // 转为0~360
            } else if (this._curAngle_2.y > 360) {
              this._curAngle_2.y -= 360;
              this.node.eulerAngles = this._curAngle_2; // 转为0~360
            } //设置目标旋转角度


            if (!v3_0.equals(this.node.eulerAngles, 0.01)) {
              this._targetAngle.y = this._curAngleY + 225;
              this._targetAngle.y = this._targetAngle.y < 0 ? this._targetAngle.y + 360 : this._targetAngle.y > 360 ? this._targetAngle.y - 360 : this._targetAngle.y;

              this._targetAngle.set(0, this._targetAngle.y, 0);

              if (Math.abs(this._targetAngle.y - this._curAngle_2.y) > 180) {
                if (this._targetAngle.y > this._curAngle_2.y) {
                  this._targetAngle.y -= 360;
                } else {
                  this._targetAngle.y += 360;
                }
              } // console.log("this._targetAngle.y", this._targetAngle.y);

            } else {
              this.isPlayRotate = false;
              this.node.eulerAngles = v3_0;
            }

            if (!this.isMoving) {
              return;
            }

            this.scriptCharacterRigid.move(this._rotateDirection.x * this.curMoveSpeed * 0.5 * deltaTime, this._rotateDirection.z * this.curMoveSpeed * 0.5 * deltaTime);

            if (!this.scriptPlayerModel.isRunning && !this.isDie) {
              this.scriptPlayerModel.playAni(Constant.PLAYER_ANI_TYPE.RUN, true);
            }
          } else {
            if (!this.isDie && !this.scriptPlayerModel.isIdle && !this.scriptPlayerModel.isAttacking) {
              this.scriptPlayerModel.playAni(Constant.PLAYER_ANI_TYPE.IDLE, true);
              this.scriptCharacterRigid.stopMove();
            }

            if (this._rotateInterval > 0) {
              this._rotateInterval -= deltaTime;

              if (this._rotateInterval <= 0 && this.isPlayRotate) {
                this.isPlayRotate = false;
              }
            }
          }
        };

        _createClass(Player, [{
          key: "isDie",
          get: function get() {
            return this._isDie;
          },
          set: function set(v) {
            this._isDie = v;

            if (this._isDie) {
              this._showDie();
            }
          }
        }, {
          key: "scriptBloodBar",
          get: function get() {
            return this._scriptBloodBar;
          },
          set: function set(v) {
            this._scriptBloodBar = v;
          }
        }, {
          key: "isMoving",
          get: function get() {
            return this._isMoving;
          },
          set: function set(v) {
            this._isMoving = v;
          }
        }, {
          key: "isPlayRotate",
          get: function get() {
            return this._isPlayRotate;
          },
          set: function set(v) {
            this._isPlayRotate = v;
          }
        }, {
          key: "scriptCharacterRigid",
          get: function get() {
            return this._scriptCharacterRigid;
          },
          set: function set(v) {
            this._scriptCharacterRigid = v;
          }
        }, {
          key: "playerBaseInfo",
          get: function get() {
            return this._playerBaseInfo;
          },
          set: function set(v) {
            this._playerBaseInfo = v;
          }
        }, {
          key: "curMoveSpeed",
          get: function get() {
            return this._curMoveSpeed;
          },
          set: function set(v) {
            this._curMoveSpeed = v;
            this.scriptCharacterRigid.initSpeed(v);
          }
        }, {
          key: "isArrowDouble",
          get: function get() {
            return this._isArrowDouble;
          },
          set: function set(v) {
            this._isArrowDouble = v;
          }
        }, {
          key: "isArrowPenetrate",
          get: function get() {
            return this._isArrowPenetrate;
          },
          set: function set(v) {
            this._isArrowPenetrate = v;
          }
        }, {
          key: "isArrowContinuous",
          get: function get() {
            return this._isArrowContinuous;
          },
          set: function set(v) {
            this._isArrowContinuous = v;
          }
        }, {
          key: "isArrowIce",
          get: function get() {
            return this._isArrowIce;
          },
          set: function set(v) {
            this._isArrowIce = v;
          }
        }, {
          key: "isArrowFire",
          get: function get() {
            return this._isArrowFire;
          },
          set: function set(v) {
            this._isArrowFire = v;
          }
        }, {
          key: "isBloodthirsty",
          get: function get() {
            return this._isBloodthirsty;
          },
          set: function set(v) {
            this._isBloodthirsty = v;
          }
        }, {
          key: "isArrowLightning",
          get: function get() {
            return this._isArrowLightning;
          },
          set: function set(v) {
            this._isArrowLightning = v;
          }
        }, {
          key: "isArrowLaunch",
          get: function get() {
            return this._isArrowLaunch;
          },
          set: function set(v) {
            this._isArrowLaunch = v;
          }
        }, {
          key: "curAttackPower",
          get: function get() {
            return this._curAttackPower;
          },
          set: function set(v) {
            this._curAttackPower = v;
          }
        }, {
          key: "curDefensePower",
          get: function get() {
            return this._curDefensePower;
          },
          set: function set(v) {
            this._curDefensePower = v;
          }
        }, {
          key: "curAttackSpeed",
          get: function get() {
            return this._curAttackSpeed;
          },
          set: function set(v) {
            this._curAttackSpeed = v;
          }
        }, {
          key: "curDodgeRate",
          get: function get() {
            return this._curDodgeRate;
          },
          set: function set(v) {
            this._curDodgeRate = v;
          }
        }, {
          key: "curCriticalHitRate",
          get: function get() {
            return this._curCriticalHitRate;
          },
          set: function set(v) {
            this._curCriticalHitRate = v;
          }
        }, {
          key: "curCriticalHitDamage",
          get: function get() {
            return this._curCriticalHitDamage;
          },
          set: function set(v) {
            this._curCriticalHitDamage = v;
          }
        }, {
          key: "curHpLimit",
          get: function get() {
            return this._curHpLimit;
          },
          set: function set(v) {
            this._curHpLimit = v;
          }
        }]);

        return Player;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "scriptPlayerModel", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "rigidComPlayer", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "colliderComPlayer", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/playerBloodBar.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts', './poolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Prefab, Node, Layout, UITransform, SpriteComponent, SpriteFrame, Vec3, clamp, tween, find, CameraComponent, Component, Constant, PoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Node = module.Node;
      Layout = module.Layout;
      UITransform = module.UITransform;
      SpriteComponent = module.SpriteComponent;
      SpriteFrame = module.SpriteFrame;
      Vec3 = module.Vec3;
      clamp = module.clamp;
      tween = module.tween;
      find = module.find;
      CameraComponent = module.CameraComponent;
      Component = module.Component;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      PoolManager = module.PoolManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12;

      cclegacy._RF.push({}, "489442rXjRLbrR8Na95Juqg", "playerBloodBar", undefined); //玩家血条脚本


      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PlayerBloodBar = exports('PlayerBloodBar', (_dec = ccclass('PlayerBloodBar'), _dec2 = menu("_game/module/fight/hud/playerBloodBar"), _dec3 = property(Prefab), _dec4 = property(Node), _dec5 = property(Layout), _dec6 = property(UITransform), _dec7 = property(Node), _dec8 = property(UITransform), _dec9 = property(Node), _dec10 = property(SpriteComponent), _dec11 = property(SpriteFrame), _dec12 = property(SpriteFrame), _dec13 = property(UITransform), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayerBloodBar, _Component);

        function PlayerBloodBar() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lineWidth", _descriptor, _assertThisInitialized(_this)); //中间线的宽度


          _initializerDefineProperty(_this, "pbLine", _descriptor2, _assertThisInitialized(_this)); //中间线预制体


          _initializerDefineProperty(_this, "ndContainer", _descriptor3, _assertThisInitialized(_this)); //血块容器


          _initializerDefineProperty(_this, "layoutContainer", _descriptor4, _assertThisInitialized(_this)); //container节点的layout组件


          _initializerDefineProperty(_this, "UIComWhiteBar", _descriptor5, _assertThisInitialized(_this)); //白色进度条的UI组件


          _initializerDefineProperty(_this, "ndWhiteBar", _descriptor6, _assertThisInitialized(_this)); //白色进度条节点


          _initializerDefineProperty(_this, "UIComCurBloodBar", _descriptor7, _assertThisInitialized(_this)); //血量进度条的UI组件


          _initializerDefineProperty(_this, "ndCurBloodBar", _descriptor8, _assertThisInitialized(_this)); //血量进度条节点


          _initializerDefineProperty(_this, "spComBloodBar", _descriptor9, _assertThisInitialized(_this)); //血条背景色


          _initializerDefineProperty(_this, "sfRed", _descriptor10, _assertThisInitialized(_this)); //小怪和bos是红色背景


          _initializerDefineProperty(_this, "sfGreen", _descriptor11, _assertThisInitialized(_this)); //玩家是绿色背景


          _initializerDefineProperty(_this, "UIComBloodBar", _descriptor12, _assertThisInitialized(_this));

          _this._curBlood = 0; //当前血量值

          _this._minBloodBarWidth = 100; //最小整体血条宽度

          _this._bloodBarWidth = 0; //当前整体血条宽度

          _this._minBloodBarItemWidth = 10; //最小单个血块宽度

          _this._maxItemBlood = 200; //每隔血条

          _this._totalBlood = 0; //总的血量

          _this._ndTarget = null; //跟随目标

          _this._offsetPos = null; //偏差

          _this._curPos = new Vec3(); //当前血条位置

          _this._scriptParent = null; //血条所在节点绑定的脚本

          _this._scale = new Vec3(); //血条缩放倍数

          _this._bloodBarHeight = 15; //血条高度

          _this._oriContainerPos = new Vec3(); //初始线条容器节点位置

          _this._curContainerPos = new Vec3(); //当前线条容器节点位置

          _this._bloodBarPos = new Vec3(); //血条位置

          _this._whiteBarPos = new Vec3();
          return _this;
        }

        var _proto = PlayerBloodBar.prototype;
        /**
         * 展示血条
         *
         * @param {*} scriptParent 血条使用者绑定的节点，如玩家或者小怪
         * @param {number} totalBlood 总血量
         * @param {number} bloodBarType 血条类型
         * @param {Vec3} offsetPos 血条位置偏差
         * @param {Vec3} scale 血条缩放大小
         * @param {(Function | null)} [callback] 
         * @memberof BloodBar
         */

        _proto.show = function show(scriptParent, totalBlood, curBlood, offsetPos, scale, callback) {
          var _this2 = this;

          this._scriptParent = scriptParent;
          this._totalBlood = totalBlood;
          this._offsetPos = offsetPos;
          this._scale = scale;
          this._ndTarget = scriptParent.node;
          this.node.setScale(scale); // if (isInit) {
          // this._curBlood = this._totalBlood;
          // }

          this.curBlood = curBlood; //血块数量

          var bloodItemNum = Math.ceil(totalBlood / this._maxItemBlood); //当前血量条最小长度

          this._bloodBarWidth = this._minBloodBarItemWidth * bloodItemNum; //所需血条总宽度大于最小整体血条宽度，需增大血条大小，反之使用最小血条宽度

          var isOutOfRange = this._bloodBarWidth > this._minBloodBarWidth;

          this._oriContainerPos.set(this.ndContainer.position);

          if (isOutOfRange) {
            this._curContainerPos.set(-this._bloodBarWidth * 0.5, this._oriContainerPos.y, 0);

            this.ndContainer.setPosition(this._curContainerPos);
          } else {
            this._bloodBarWidth = this._minBloodBarWidth;
          } //每个间隔线之间的距离，1为它本身的宽度，默认前后不显示


          this.layoutContainer.spacingX = this._bloodBarWidth / bloodItemNum - 1;
          this.ndContainer.children.forEach(function (item) {
            item.active = false;
          }); //当前血量占全部的比例

          var ratio = this.curBlood / this._totalBlood;
          ratio = clamp(ratio, 0, 1); //设置整体大小

          this.UIComBloodBar.setContentSize(this._bloodBarWidth + 2, this._bloodBarHeight); // this.UIComBloodBar.priority = constant.PRIORITY.BLOOD;

          this.node.setSiblingIndex(Constant.PRIORITY.ZERO); //根据当前血量刷新中间连接线

          for (var i = 0; i < bloodItemNum + 1; i++) {
            var ndLineItem = void 0;

            if (i >= this.ndContainer.children.length) {
              ndLineItem = PoolManager.instance.getNode(this.pbLine, this.ndContainer);
            } else {
              ndLineItem = this.ndContainer.children[i];
            }

            ndLineItem.active = true;
            var UICom = ndLineItem.getComponent(UITransform);

            if (i % 5 === 0) {
              UICom.setContentSize(1.5, 7);
            } else {
              UICom.setContentSize(1, 5);
            }
          }

          var layCom = this.ndContainer.getComponent(Layout); //立即执行更新布局

          layCom.updateLayout(); //头尾不展示中间线

          this.ndContainer.children.forEach(function (ndLineItem, i) {
            var spComLine = ndLineItem.getComponent(SpriteComponent);

            if (i === 0 || i === bloodItemNum || ndLineItem.position.x > _this2._bloodBarWidth * ratio) {
              spComLine.enabled = false;
            } else {
              spComLine.enabled = true;
            }
          }); //设置白色进度条长度和位置

          this.UIComWhiteBar.setContentSize(ratio * this._bloodBarWidth, this._bloodBarHeight * 0.8);

          this._whiteBarPos.set(this.ndContainer.position.x, 0.5, this.ndContainer.position.z);

          this.ndWhiteBar.setPosition(this._whiteBarPos); //设置血量进度条长度和位置

          this.UIComCurBloodBar.setContentSize(ratio * this._bloodBarWidth, this._bloodBarHeight * 0.8);

          this._bloodBarPos.set(this.ndContainer.position.x, 0, this.ndContainer.position.z);

          this.ndCurBloodBar.setPosition(this._bloodBarPos);
          callback && callback();
        }
        /**
         * 刷新血量
         *
         * @param {number} num 血量值
         * @param {boolean} [isIncreaseLimit=false] //是否增加上限
         * @memberof PlayerBloodBar
         */
        ;

        _proto.refreshBlood = function refreshBlood(num, isIncreaseLimit) {
          var _this3 = this;

          if (isIncreaseLimit === void 0) {
            isIncreaseLimit = false;
          }

          this.curBlood += num;
          this.curBlood = clamp(this.curBlood, 0, this._totalBlood);
          var ratio = this.curBlood / this._totalBlood;

          if (num < 0) {
            //减血
            ratio = ratio <= 0 ? 0 : ratio;
            this.UIComCurBloodBar.setContentSize(this._bloodBarWidth * ratio, this._bloodBarHeight * 0.8);

            if (ratio > 0) {
              this.ndContainer.children.forEach(function (ndChild) {
                var spComLine = ndChild.getComponent(SpriteComponent);

                if (spComLine.enabled && ndChild.position.x > _this3._bloodBarWidth * ratio) {
                  spComLine.enabled = false;
                }
              });
              tween(this.UIComWhiteBar).to(0.7, {
                width: this._bloodBarWidth * ratio
              }).call(function () {}).start();
            } else {
              // PoolManager.instance.putNode(this.node);
              this.node.active = false;
              this._scriptParent.isDie = true;
              this.curBlood = 0;
            }
          } else {
            //加血
            if (isIncreaseLimit) {
              //增加上限,并增加多出来的血量，最多不超过上限
              this.curBlood += num;
              this._totalBlood += num;
              this.curBlood = this.curBlood >= this._totalBlood ? this._totalBlood : this.curBlood;
              ratio = this.curBlood / this._totalBlood;
            } else {
              //普通加血，最多不超过上限                
              ratio = ratio >= 1 ? 1 : ratio;
            }

            tween(this.UIComCurBloodBar).to(1, {
              width: this._bloodBarWidth * ratio
            }).call(function () {
              _this3.show(_this3._scriptParent, _this3._totalBlood, _this3.curBlood, _this3._offsetPos, _this3._scale, null);
            }).start();
          }
        };

        _proto.update = function update(deltaTime) {
          //血条跟随人物移动
          if (this.node.parent && this.node.active && this._ndTarget && this._ndTarget.parent) {
            var _this$_mainCamera;

            (_this$_mainCamera = this._mainCamera) == null ? void 0 : _this$_mainCamera.convertToUINode(this._ndTarget.worldPosition, find("Canvas"), this._curPos);

            this._curPos.add(this._offsetPos);

            this.node.setPosition(this._curPos);
          }
        };

        _createClass(PlayerBloodBar, [{
          key: "curBlood",
          get: function get() {
            return this._curBlood;
          },
          set: //血条容器节点
          function set(v) {
            this._curBlood = v;
          }
        }, {
          key: "_mainCamera",
          get: //白条位置
          function get() {
            var _find;

            return (_find = find("Main Camera")) == null ? void 0 : _find.getComponent(CameraComponent);
          }
        }]);

        return PlayerBloodBar;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lineWidth", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 1;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "pbLine", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "ndContainer", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "layoutContainer", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "UIComWhiteBar", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "ndWhiteBar", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "UIComCurBloodBar", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "ndCurBloodBar", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "spComBloodBar", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, "sfRed", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, "sfGreen", [_dec12], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, "UIComBloodBar", [_dec13], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerEvent.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b97c0ZPEGJP+qdKPm4czT35", "PlayerEvent", undefined);

      var PlayerEvent = exports('PlayerEvent', /*#__PURE__*/function (PlayerEvent) {
        PlayerEvent["CoinChanged"] = "CoinChanged";
        PlayerEvent["EnergyChanged"] = "EnergyChanged";
        return PlayerEvent;
      }({}));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/playerModel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameManager.ts', './constant.ts', './audioManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Node, SkeletalAnimationComponent, Vec3, AnimationClip, Component, GameManager, Constant, AudioManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SkeletalAnimationComponent = module.SkeletalAnimationComponent;
      Vec3 = module.Vec3;
      AnimationClip = module.AnimationClip;
      Component = module.Component;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      AudioManager = module.AudioManager;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "6d341OU0KFKnp6rW79mlG0J", "playerModel", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //玩家角色模型脚本

      var PlayerModel = exports('PlayerModel', (_dec = ccclass('PlayerModel'), _dec2 = property(Node), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(SkeletalAnimationComponent), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(PlayerModel, _Component);

        function PlayerModel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ndSocketLoose", _descriptor, _assertThisInitialized(_this)); //弓箭发射的节点


          _initializerDefineProperty(_this, "ndSocketHand", _descriptor2, _assertThisInitialized(_this)); //手节点


          _initializerDefineProperty(_this, "ndArrow", _descriptor3, _assertThisInitialized(_this)); //攻击时候展示的弓箭


          _initializerDefineProperty(_this, "aniComPlayer", _descriptor4, _assertThisInitialized(_this));

          _this._aniType = ""; //动画类型

          _this._aniState = null; //动画播放状态

          _this._stepIndex = 0; //脚步

          _this._looseEulerAngles = new Vec3(); //射箭时的角度

          _this._isAniPlaying = false;
          return _this;
        }

        var _proto = PlayerModel.prototype; //当前动画是否正在播放

        _proto.start = function start() {// [3]
        };

        _proto.init = function init() {
          this.hideArrow();
        }
        /**
         * attack帧事件:箭射出去的时候触发
         * @returns 
         */
        ;

        _proto.onFrameAttackLoose = function onFrameAttackLoose() {
          var _this$node$parent;

          if (GameManager.isGameOver || GameManager.isGamePause) {
            return;
          }

          this.looseEulerAngles = (_this$node$parent = this.node.parent) == null ? void 0 : _this$node$parent.eulerAngles;
          GameManager.scriptPlayer.throwArrowToEnemy();
          this.ndArrow.active = false; // console.log("looseEulerAngles", this.looseEulerAngles);
        }
        /**
         * run帧事件：脚落地的时候播放音效
         *
         * @memberof PlayerModel
         */
        ;

        _proto.onFrameRun = function onFrameRun() {
          this._stepIndex = this._stepIndex === 0 ? 1 : 0;
          AudioManager.instance.playSound(Constant.SOUND.FOOT_STEP[this._stepIndex]);
        }
        /**
         * attack帧事件: 拉弓的时候触发
         */
        ;

        _proto.onFrameAttackDraw = function onFrameAttackDraw() {
          this.ndArrow.active = true;
        }
        /**
         * 隐藏模型手中默认的箭
         */
        ;

        _proto.hideArrow = function hideArrow() {
          this.ndArrow.active = false;
        }
        /**
        * 播放玩家动画
        *
        * @param {string} aniType 动画类型
        * @param {boolean} [isLoop=false] 是否循环
        * @param {Function} [callback] 回调函数
        * @param {number} [callback] 调用播放动画的位置，方便用于测试
        * @returns
        * @memberof Player
        */
        ;

        _proto.playAni = function playAni(aniType, isLoop, callback, pos) {
          var _this$aniComPlayer,
              _this$aniComPlayer2,
              _this2 = this;

          if (isLoop === void 0) {
            isLoop = false;
          } // console.log("playerAniType", aniType, "curAniType", this.aniType, "pos", pos);


          this._aniState = (_this$aniComPlayer = this.aniComPlayer) == null ? void 0 : _this$aniComPlayer.getState(aniType);

          if (this._aniState && this._aniState.isPlaying) {
            return;
          }

          this._aniType = aniType;

          if (this._aniType !== Constant.PLAYER_ANI_TYPE.ATTACK) {
            this.hideArrow();
          }

          (_this$aniComPlayer2 = this.aniComPlayer) == null ? void 0 : _this$aniComPlayer2.play(aniType);
          this.isAniPlaying = true;

          if (this._aniState) {
            if (isLoop) {
              this._aniState.wrapMode = AnimationClip.WrapMode.Loop;
            } else {
              this._aniState.wrapMode = AnimationClip.WrapMode.Normal;
            }

            switch (aniType) {
              case Constant.PLAYER_ANI_TYPE.ATTACK:
                this._aniState.speed = GameManager.gameSpeed * GameManager.scriptPlayer.curAttackSpeed;
                GameManager.scriptPlayer.hideRunSmoke();
                break;

              case Constant.PLAYER_ANI_TYPE.RUN:
                this._aniState.speed = GameManager.gameSpeed * (GameManager.scriptPlayer.curMoveSpeed / GameManager.scriptPlayer.playerBaseInfo.moveSpeed);
                GameManager.scriptPlayer.playRunSmoke();
                break;

              case Constant.PLAYER_ANI_TYPE.IDLE:
                this._aniState.speed = GameManager.gameSpeed;
                break;

              default:
                this._aniState.speed = GameManager.gameSpeed;
                break;
            }
          }

          if (!isLoop) {
            this.aniComPlayer.once(SkeletalAnimationComponent.EventType.FINISHED, function () {
              _this2.isAniPlaying = false;
              callback && callback();
            });
          }
        } // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        _createClass(PlayerModel, [{
          key: "looseEulerAngles",
          get: function get() {
            return this._looseEulerAngles;
          },
          set: //动画播放组件
          function set(v) {
            this._looseEulerAngles = v;
          }
        }, {
          key: "isAniPlaying",
          get: function get() {
            return this._isAniPlaying;
          } //是否正在跑
          ,
          set: function set(v) {
            this._isAniPlaying = v;
          }
        }, {
          key: "isRunning",
          get: function get() {
            return this._aniType === Constant.PLAYER_ANI_TYPE.RUN && this.isAniPlaying === true;
          } //是否待机

        }, {
          key: "isIdle",
          get: function get() {
            return this._aniType === Constant.PLAYER_ANI_TYPE.IDLE && this.isAniPlaying === true;
          } //是否正在攻击

        }, {
          key: "isAttacking",
          get: function get() {
            return this._aniType === Constant.PLAYER_ANI_TYPE.ATTACK && this.isAniPlaying === true;
          }
        }]);

        return PlayerModel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ndSocketLoose", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "ndSocketHand", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "ndArrow", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "aniComPlayer", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerModule.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './PlayerProxy.ts', './ModuleType.ts', './Module.ts'], function (exports) {
  var _inheritsLoose, cclegacy, PlayerProxy, ProxyName, ModuleName, Module;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      PlayerProxy = module.PlayerProxy;
    }, function (module) {
      ProxyName = module.ProxyName;
      ModuleName = module.ModuleName;
    }, function (module) {
      Module = module.Module;
    }],
    execute: function () {
      cclegacy._RF.push({}, "aec24j/utpLs7IxgFPp4ePT", "PlayerModule", undefined);

      var PlayerModule = exports('PlayerModule', /*#__PURE__*/function (_Module) {
        _inheritsLoose(PlayerModule, _Module);

        function PlayerModule() {
          return _Module.call(this, ModuleName.Player) || this;
        }

        var _proto = PlayerModule.prototype;

        _proto.initializeCommands = function initializeCommands() {// this.registerCommand(CommandEvent., );
        };

        _proto.initializeProxys = function initializeProxys() {
          this.registerProxy(ProxyName.Player, PlayerProxy);
        };

        _proto.initializeMediators = function initializeMediators() {// this.registerMediator(MediatorName., );
        };

        return PlayerModule;
      }(Module));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PlayerProxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Proxy.ts', './Utils.ts', './clientEvent.ts', './constant.ts', './util.ts', './Constant2.ts', './NewPLayerData.ts', './ConfigUtils.ts', './ModuleType.ts'], function (exports) {
  var _inheritsLoose, _createClass, cclegacy, Proxy, ClientEvent, Constant, Util, NewPLayerData, NewPLayerLocalData, ConfigUtils, ProxyName;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Proxy = module.Proxy;
    }, null, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      Util = module.Util;
    }, null, function (module) {
      NewPLayerData = module.NewPLayerData;
      NewPLayerLocalData = module.NewPLayerLocalData;
    }, function (module) {
      ConfigUtils = module.ConfigUtils;
    }, function (module) {
      ProxyName = module.ProxyName;
    }],
    execute: function () {
      cclegacy._RF.push({}, "3af26V+lgpHlJFpJT0s8Soa", "PlayerProxy", undefined);

      var PlayerProxy = exports('PlayerProxy', /*#__PURE__*/function (_Proxy) {
        _inheritsLoose(PlayerProxy, _Proxy);

        function PlayerProxy() {
          var data = new NewPLayerData(new NewPLayerLocalData({
            userId: "",
            history: {},
            settings: {
              hideTime: 0,
              fightTimes: 0
            },
            playerInfo: {
              diamond: 0,
              //钻石总数
              gold: 0,
              //金币数量
              key: 0,
              //钥匙数量
              levelId: 1001001,
              //当前层级
              highestLevel: 1001001,
              //已经解锁的最高层级
              arrSkill: [],
              //已经解锁的玩家技能ID
              createDate: "" //记录创建时间

            }
          }));
          return _Proxy.call(this, ProxyName.Player, data) || this;
        }

        PlayerProxy.idTolevel = function idTolevel(id) {
          return id % 1000;
        };

        PlayerProxy.idToChapter = function idToChapter(id) {
          return Math.floor(id / 1000) % 1000;
        };

        PlayerProxy.idToString = function idToString(id) {
          var lv = this.idTolevel(id);
          var chapter = this.idToChapter(id);
          return chapter + "-" + lv + "\u5173";
        }
        /**
         * 是否已经解锁完成所有技能
         */
        ;

        var _proto = PlayerProxy.prototype;

        _proto.checkToCreatePlayerInfo = function checkToCreatePlayerInfo() {
          if (this.userId === "") {
            var userId = "" + Date.now() + Util.getRandomInt(0, 1000);
            this._data.userId = userId;
            this._data.isNewBee = true; //区分新老玩家

            this.playerInfo.createDate = new Date().toString();

            this._data.saveLocal();
          }
        };

        _proto.recordHideTime = function recordHideTime() {
          this._data.settings.hideTime = Date.now();

          this._data.saveLocal();
        };

        _proto.addGold = function addGold(value) {
          this.playerInfo.gold += value;

          this._data.saveLocal();
        }
        /**
         * 增加战斗次数
         * @param times
         */
        ;

        _proto.addFightTimes = function addFightTimes(times) {
          this.settings.fightTimes++;

          this._data.saveLocal();
        }
        /**
         * 获取战斗次数
         * @returns
         */
        ;

        _proto.getFightTimes = function getFightTimes() {
          return this.settings.fightTimes;
        };

        _proto.nextLevel = function nextLevel() {
          var nextLevel = this.playerInfo.levelId + 1;
          this.playerInfo.levelId = nextLevel; //更新已解锁最高层级

          if (nextLevel > this.playerInfo.highestLevel) {
            this.playerInfo.highestLevel = nextLevel;
          }

          this._data.saveLocal();
        }
        /**
         * 获取未解锁的玩家技能
         */
        ;

        _proto.getLockPlyerSkill = function getLockPlyerSkill() {
          var allSkills = ConfigUtils.getList("TbPlayerSkill");
          var ownSkillIds = this.playerInfo.arrSkill;
          return allSkills.filter(function (item) {
            return !ownSkillIds.includes(item.id) && item.id !== Constant.PLAYER_SKILL.RECOVERY;
          });
        }
        /**
         * 获取未解锁的玩家技能 (洗牌)
         */
        ;

        _proto.getLockPlyerSkillShuffle = function getLockPlyerSkillShuffle() {
          return Util.shuffle(this.getLockPlyerSkill());
        }
        /**
         * 添加玩家某项技能
         *
         * @param {*} info
         */
        ;

        _proto.addPlayerSkill = function addPlayerSkill(info) {
          if (!this.playerInfo.arrSkill.includes(info.id)) {
            this.playerInfo.arrSkill.push(info.id);

            this._data.saveLocal();

            ClientEvent.dispatchEvent(Constant.EVENT_TYPE.PARSE_PLAYER_SKILL); // this.event
          }
        }
        /**
         * 删除玩家某项技能
         *
         * @param {*} info
         */
        ;

        _proto.reducePlayerSkill = function reducePlayerSkill(info) {
          if (this.playerInfo.arrSkill.includes(info.id)) {
            var idx = this.playerInfo.arrSkill.findIndex(function (item) {
              return item === info.id;
            });
            this.playerInfo.arrSkill.splice(idx, 1);

            this._data.saveLocal(); // this.event


            ClientEvent.dispatchEvent(Constant.EVENT_TYPE.PARSE_PLAYER_SKILL);
          }
        }
        /**
         * 失败的时候清空技能和层级
         */
        ;

        _proto.clearLevelAndSkill = function clearLevelAndSkill() {
          this.playerInfo.arrSkill = [];
          this.playerInfo.levelId = 1001001;

          this._data.saveLocal();
        };

        _proto.debugClearSkill = function debugClearSkill() {
          this.playerInfo.arrSkill = [];

          this._data.saveLocal();
        };

        _proto.debugSelectLevel = function debugSelectLevel(id) {
          this.playerInfo.levelId = id;

          this._data.saveLocal();
        };

        _proto.debugOpenSkill = function debugOpenSkill(ids) {
          this.playerInfo.arrSkill = ids;

          this._data.saveLocal();
        };

        _proto.debugClearAll = function debugClearAll() {
          this._data.debugClearLocal();
        };

        _createClass(PlayerProxy, [{
          key: "userId",
          get: function get() {
            return this._data.userId;
          }
        }, {
          key: "playerInfo",
          get: function get() {
            return this._data.playerInfo;
          }
        }, {
          key: "history",
          get: function get() {
            return this._data.history;
          }
        }, {
          key: "skillSellGold",
          get: function get() {
            return this._data.skillSellGold;
          }
        }, {
          key: "settings",
          get: function get() {
            return this._data.settings;
          }
        }, {
          key: "isNewBee",
          get: function get() {
            return this._data.isNewBee;
          }
        }, {
          key: "level",
          get: function get() {
            return PlayerProxy.idTolevel(this._data.playerInfo.levelId);
          }
        }, {
          key: "isPlayerSkillAllUnlock",
          get: function get() {
            var arrSkill = ConfigUtils.getTableArr(Constant.playerSkillName()); //生命回复技能不在技能列表里面出现，而是在游戏内多次出现，所以减去1

            return this.playerInfo.arrSkill.length === arrSkill.length - 1;
          }
        }]);

        return PlayerProxy;
      }(Proxy));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/poolManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, _decorator, instantiate, NodePool;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      instantiate = module.instantiate;
      NodePool = module.NodePool;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "e4ab6T5/1VCqK/Vn+UcADNM", "poolManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var PoolManager = exports('PoolManager', (_dec = ccclass("PoolManager"), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function PoolManager() {
          this._dictPool = {}; //对象池字典

          this._dictPrefab = {};
        }

        var _proto = PoolManager.prototype;
        /**
         * 根据预设从对象池中获取对应节点
         */

        _proto.getNode = function getNode(prefab, parent) {
          var name = prefab.name; //@ts-ignore

          if (!prefab.position) {
            //@ts-ignore
            name = prefab.data.name;
          }

          this._dictPrefab[name] = prefab;
          var node = null;

          if (this._dictPool.hasOwnProperty(name)) {
            //已有对应的对象池
            var pool = this._dictPool[name];

            if (pool.size() > 0) {
              node = pool.get();
            } else {
              node = instantiate(prefab);
            }
          } else {
            //没有对应对象池，创建他！
            var _pool = new NodePool();

            this._dictPool[name] = _pool;
            node = instantiate(prefab);
          }

          node.parent = parent;
          node.active = true;
          return node;
        }
        /**
         * 将对应节点放回对象池中
         */
        ;

        _proto.putNode = function putNode(node) {
          if (!node) {
            return;
          }

          var name = node.name;
          var pool = null;

          if (this._dictPool.hasOwnProperty(name)) {
            //已有对应的对象池
            pool = this._dictPool[name];
          } else {
            //没有对应对象池，创建他！
            pool = new NodePool();
            this._dictPool[name] = pool;
          }

          pool.put(node);
        }
        /**
         * 根据名称，清除对应对象池
         */
        ;

        _proto.clearPool = function clearPool(name) {
          if (this._dictPool.hasOwnProperty(name)) {
            var pool = this._dictPool[name];
            pool.clear();
          }
        }
        /**
         * 预生成对象池
         *
         * @param {Prefab} prefab 预制体
         * @param {number} num 需要预加载的数量
         * @returns
         * @memberof PoolManager
         */
        ;

        _proto.preloadPool = function preloadPool(prefab, num) {
          var name = prefab.name; // @ts-ignore

          if (!prefab.position) {
            // @ts-ignore
            name = prefab.data.name;
          }

          var pool = null;

          if (this._dictPool.hasOwnProperty(name)) {
            // 已有对应的对象池
            pool = this._dictPool[name];
          } else {
            // 没有对应对象池，创建他！
            pool = new NodePool();
            this._dictPool[name] = pool;
          }

          for (var i = 0; i < num; i++) {
            var node = instantiate(prefab);
            pool.put(node);
          }
        };

        _createClass(PoolManager, null, [{
          key: "instance",
          get: function get() {
            if (this._instance) {
              return this._instance;
            }

            this._instance = new PoolManager();
            return this._instance;
          }
        }]);

        return PoolManager;
      }(), _class2._instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PromiseEx.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "23b26RYdIZOuIi+0+1XeVxY", "PromiseEx", undefined);
      /**
       * time: 2023/12/07 16:33:11
       * desc: 扩展Promise
       */


      var PromiseEx = exports('PromiseEx', /*#__PURE__*/function () {
        function PromiseEx() {}

        PromiseEx.delay = function delay(ms) {
          return new Promise(function (resolve) {
            return setTimeout(resolve, ms);
          });
        };

        return PromiseEx;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/proto_bundle.js", ['./cjs-loader.mjs', './minimal.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      exports('default', void 0);

      var _cjsExports;

      var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        var $protobuf = require("protobufjs/minimal"); // Common aliases


        var $Reader = $protobuf.Reader,
            $Writer = $protobuf.Writer,
            $util = $protobuf.util; // Exported root namespace

        var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

        $root.com = function () {
          /**
           * Namespace com.
           * @exports com
           * @namespace
           */
          var com = {};

          com.proto = function () {
            /**
             * Namespace proto.
             * @memberof com
             * @namespace
             */
            var proto = {};

            proto.MActivity = function () {
              /**
               * Properties of a MActivity.
               * @memberof com.proto
               * @interface IMActivity
               * @property {number|null} [id] MActivity id
               * @property {number|Long|null} [startTime] MActivity startTime
               * @property {number|Long|null} [previewTime] MActivity previewTime
               * @property {number|Long|null} [awardTime] MActivity awardTime
               * @property {number|Long|null} [endTime] MActivity endTime
               */

              /**
               * Constructs a new MActivity.
               * @memberof com.proto
               * @classdesc Represents a MActivity.
               * @implements IMActivity
               * @constructor
               * @param {com.proto.IMActivity=} [p] Properties to set
               */
              function MActivity(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MActivity id.
               * @member {number} id
               * @memberof com.proto.MActivity
               * @instance
               */


              MActivity.prototype.id = 0;
              /**
               * MActivity startTime.
               * @member {number|Long} startTime
               * @memberof com.proto.MActivity
               * @instance
               */

              MActivity.prototype.startTime = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MActivity previewTime.
               * @member {number|Long} previewTime
               * @memberof com.proto.MActivity
               * @instance
               */

              MActivity.prototype.previewTime = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MActivity awardTime.
               * @member {number|Long} awardTime
               * @memberof com.proto.MActivity
               * @instance
               */

              MActivity.prototype.awardTime = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MActivity endTime.
               * @member {number|Long} endTime
               * @memberof com.proto.MActivity
               * @instance
               */

              MActivity.prototype.endTime = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * Creates a new MActivity instance using the specified properties.
               * @function create
               * @memberof com.proto.MActivity
               * @static
               * @param {com.proto.IMActivity=} [properties] Properties to set
               * @returns {com.proto.MActivity} MActivity instance
               */

              MActivity.create = function create(properties) {
                return new MActivity(properties);
              };
              /**
               * Encodes the specified MActivity message. Does not implicitly {@link com.proto.MActivity.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MActivity
               * @static
               * @param {com.proto.IMActivity} m MActivity message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MActivity.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);
                if (m.startTime != null && Object.hasOwnProperty.call(m, "startTime")) w.uint32(16).int64(m.startTime);
                if (m.previewTime != null && Object.hasOwnProperty.call(m, "previewTime")) w.uint32(24).int64(m.previewTime);
                if (m.awardTime != null && Object.hasOwnProperty.call(m, "awardTime")) w.uint32(32).int64(m.awardTime);
                if (m.endTime != null && Object.hasOwnProperty.call(m, "endTime")) w.uint32(40).int64(m.endTime);
                return w;
              };
              /**
               * Decodes a MActivity message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MActivity
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MActivity} MActivity
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MActivity.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MActivity();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.startTime = r.int64();
                        break;
                      }

                    case 3:
                      {
                        m.previewTime = r.int64();
                        break;
                      }

                    case 4:
                      {
                        m.awardTime = r.int64();
                        break;
                      }

                    case 5:
                      {
                        m.endTime = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MActivity;
            }();

            proto.Msg_8000_ = function () {
              /**
               * Properties of a Msg_8000_.
               * @memberof com.proto
               * @interface IMsg_8000_
               * @property {com.proto.IMActivity|null} [activity] Msg_8000_ activity
               */

              /**
               * Constructs a new Msg_8000_.
               * @memberof com.proto
               * @classdesc Represents a Msg_8000_.
               * @implements IMsg_8000_
               * @constructor
               * @param {com.proto.IMsg_8000_=} [p] Properties to set
               */
              function Msg_8000_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_8000_ activity.
               * @member {com.proto.IMActivity|null|undefined} activity
               * @memberof com.proto.Msg_8000_
               * @instance
               */


              Msg_8000_.prototype.activity = null;
              /**
               * Creates a new Msg_8000_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_8000_
               * @static
               * @param {com.proto.IMsg_8000_=} [properties] Properties to set
               * @returns {com.proto.Msg_8000_} Msg_8000_ instance
               */

              Msg_8000_.create = function create(properties) {
                return new Msg_8000_(properties);
              };
              /**
               * Encodes the specified Msg_8000_ message. Does not implicitly {@link com.proto.Msg_8000_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_8000_
               * @static
               * @param {com.proto.IMsg_8000_} m Msg_8000_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_8000_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.activity != null && Object.hasOwnProperty.call(m, "activity")) $root.com.proto.MActivity.encode(m.activity, w.uint32(10).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_8000_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_8000_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_8000_} Msg_8000_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_8000_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_8000_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.activity = $root.com.proto.MActivity.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_8000_;
            }();

            proto.CMsg = function () {
              /**
               * Properties of a CMsg.
               * @memberof com.proto
               * @interface ICMsg
               * @property {number|null} [cmd] CMsg cmd
               * @property {Uint8Array|null} [body] CMsg body
               * @property {number|Long|null} [serverTime] CMsg serverTime
               */

              /**
               * Constructs a new CMsg.
               * @memberof com.proto
               * @classdesc Represents a CMsg.
               * @implements ICMsg
               * @constructor
               * @param {com.proto.ICMsg=} [p] Properties to set
               */
              function CMsg(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * CMsg cmd.
               * @member {number} cmd
               * @memberof com.proto.CMsg
               * @instance
               */


              CMsg.prototype.cmd = 0;
              /**
               * CMsg body.
               * @member {Uint8Array} body
               * @memberof com.proto.CMsg
               * @instance
               */

              CMsg.prototype.body = $util.newBuffer([]);
              /**
               * CMsg serverTime.
               * @member {number|Long} serverTime
               * @memberof com.proto.CMsg
               * @instance
               */

              CMsg.prototype.serverTime = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * Creates a new CMsg instance using the specified properties.
               * @function create
               * @memberof com.proto.CMsg
               * @static
               * @param {com.proto.ICMsg=} [properties] Properties to set
               * @returns {com.proto.CMsg} CMsg instance
               */

              CMsg.create = function create(properties) {
                return new CMsg(properties);
              };
              /**
               * Encodes the specified CMsg message. Does not implicitly {@link com.proto.CMsg.verify|verify} messages.
               * @function encode
               * @memberof com.proto.CMsg
               * @static
               * @param {com.proto.ICMsg} m CMsg message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              CMsg.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.cmd != null && Object.hasOwnProperty.call(m, "cmd")) w.uint32(8).int32(m.cmd);
                if (m.body != null && Object.hasOwnProperty.call(m, "body")) w.uint32(18).bytes(m.body);
                if (m.serverTime != null && Object.hasOwnProperty.call(m, "serverTime")) w.uint32(24).int64(m.serverTime);
                return w;
              };
              /**
               * Decodes a CMsg message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.CMsg
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.CMsg} CMsg
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              CMsg.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.CMsg();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.cmd = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.body = r.bytes();
                        break;
                      }

                    case 3:
                      {
                        m.serverTime = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return CMsg;
            }();

            proto.Msg_1001_ = function () {
              /**
               * Properties of a Msg_1001_.
               * @memberof com.proto
               * @interface IMsg_1001_
               * @property {string|null} [tipKey] Msg_1001_ tipKey
               * @property {Array.<string>|null} [paramValue] Msg_1001_ paramValue
               */

              /**
               * Constructs a new Msg_1001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_1001_.
               * @implements IMsg_1001_
               * @constructor
               * @param {com.proto.IMsg_1001_=} [p] Properties to set
               */
              function Msg_1001_(p) {
                this.paramValue = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_1001_ tipKey.
               * @member {string} tipKey
               * @memberof com.proto.Msg_1001_
               * @instance
               */


              Msg_1001_.prototype.tipKey = "";
              /**
               * Msg_1001_ paramValue.
               * @member {Array.<string>} paramValue
               * @memberof com.proto.Msg_1001_
               * @instance
               */

              Msg_1001_.prototype.paramValue = $util.emptyArray;
              /**
               * Creates a new Msg_1001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_1001_
               * @static
               * @param {com.proto.IMsg_1001_=} [properties] Properties to set
               * @returns {com.proto.Msg_1001_} Msg_1001_ instance
               */

              Msg_1001_.create = function create(properties) {
                return new Msg_1001_(properties);
              };
              /**
               * Encodes the specified Msg_1001_ message. Does not implicitly {@link com.proto.Msg_1001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_1001_
               * @static
               * @param {com.proto.IMsg_1001_} m Msg_1001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_1001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.tipKey != null && Object.hasOwnProperty.call(m, "tipKey")) w.uint32(10).string(m.tipKey);

                if (m.paramValue != null && m.paramValue.length) {
                  for (var i = 0; i < m.paramValue.length; ++i) w.uint32(18).string(m.paramValue[i]);
                }

                return w;
              };
              /**
               * Decodes a Msg_1001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_1001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_1001_} Msg_1001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_1001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_1001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.tipKey = r.string();
                        break;
                      }

                    case 2:
                      {
                        if (!(m.paramValue && m.paramValue.length)) m.paramValue = [];
                        m.paramValue.push(r.string());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_1001_;
            }();

            proto.Msg_1002 = function () {
              /**
               * Properties of a Msg_1002.
               * @memberof com.proto
               * @interface IMsg_1002
               */

              /**
               * Constructs a new Msg_1002.
               * @memberof com.proto
               * @classdesc Represents a Msg_1002.
               * @implements IMsg_1002
               * @constructor
               * @param {com.proto.IMsg_1002=} [p] Properties to set
               */
              function Msg_1002(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_1002 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_1002
               * @static
               * @param {com.proto.IMsg_1002=} [properties] Properties to set
               * @returns {com.proto.Msg_1002} Msg_1002 instance
               */


              Msg_1002.create = function create(properties) {
                return new Msg_1002(properties);
              };
              /**
               * Encodes the specified Msg_1002 message. Does not implicitly {@link com.proto.Msg_1002.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_1002
               * @static
               * @param {com.proto.IMsg_1002} m Msg_1002 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_1002.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_1002 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_1002
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_1002} Msg_1002
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_1002.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_1002();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_1002;
            }();

            proto.Msg_1004 = function () {
              /**
               * Properties of a Msg_1004.
               * @memberof com.proto
               * @interface IMsg_1004
               * @property {string|null} [values] Msg_1004 values
               */

              /**
               * Constructs a new Msg_1004.
               * @memberof com.proto
               * @classdesc Represents a Msg_1004.
               * @implements IMsg_1004
               * @constructor
               * @param {com.proto.IMsg_1004=} [p] Properties to set
               */
              function Msg_1004(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_1004 values.
               * @member {string} values
               * @memberof com.proto.Msg_1004
               * @instance
               */


              Msg_1004.prototype.values = "";
              /**
               * Creates a new Msg_1004 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_1004
               * @static
               * @param {com.proto.IMsg_1004=} [properties] Properties to set
               * @returns {com.proto.Msg_1004} Msg_1004 instance
               */

              Msg_1004.create = function create(properties) {
                return new Msg_1004(properties);
              };
              /**
               * Encodes the specified Msg_1004 message. Does not implicitly {@link com.proto.Msg_1004.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_1004
               * @static
               * @param {com.proto.IMsg_1004} m Msg_1004 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_1004.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.values != null && Object.hasOwnProperty.call(m, "values")) w.uint32(10).string(m.values);
                return w;
              };
              /**
               * Decodes a Msg_1004 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_1004
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_1004} Msg_1004
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_1004.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_1004();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.values = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_1004;
            }();

            proto.MAdvertising = function () {
              /**
               * Properties of a MAdvertising.
               * @memberof com.proto
               * @interface IMAdvertising
               * @property {number|null} [id] MAdvertising id
               * @property {number|null} [useCount] MAdvertising useCount
               * @property {number|Long|null} [useTime] MAdvertising useTime
               */

              /**
               * Constructs a new MAdvertising.
               * @memberof com.proto
               * @classdesc Represents a MAdvertising.
               * @implements IMAdvertising
               * @constructor
               * @param {com.proto.IMAdvertising=} [p] Properties to set
               */
              function MAdvertising(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MAdvertising id.
               * @member {number} id
               * @memberof com.proto.MAdvertising
               * @instance
               */


              MAdvertising.prototype.id = 0;
              /**
               * MAdvertising useCount.
               * @member {number} useCount
               * @memberof com.proto.MAdvertising
               * @instance
               */

              MAdvertising.prototype.useCount = 0;
              /**
               * MAdvertising useTime.
               * @member {number|Long} useTime
               * @memberof com.proto.MAdvertising
               * @instance
               */

              MAdvertising.prototype.useTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new MAdvertising instance using the specified properties.
               * @function create
               * @memberof com.proto.MAdvertising
               * @static
               * @param {com.proto.IMAdvertising=} [properties] Properties to set
               * @returns {com.proto.MAdvertising} MAdvertising instance
               */

              MAdvertising.create = function create(properties) {
                return new MAdvertising(properties);
              };
              /**
               * Encodes the specified MAdvertising message. Does not implicitly {@link com.proto.MAdvertising.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MAdvertising
               * @static
               * @param {com.proto.IMAdvertising} m MAdvertising message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MAdvertising.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);
                if (m.useCount != null && Object.hasOwnProperty.call(m, "useCount")) w.uint32(16).int32(m.useCount);
                if (m.useTime != null && Object.hasOwnProperty.call(m, "useTime")) w.uint32(24).int64(m.useTime);
                return w;
              };
              /**
               * Decodes a MAdvertising message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MAdvertising
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MAdvertising} MAdvertising
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MAdvertising.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MAdvertising();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.useCount = r.int32();
                        break;
                      }

                    case 3:
                      {
                        m.useTime = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MAdvertising;
            }();

            proto.Msg_83000_ = function () {
              /**
               * Properties of a Msg_83000_.
               * @memberof com.proto
               * @interface IMsg_83000_
               * @property {com.proto.IMAdvertising|null} [advertising] Msg_83000_ advertising
               */

              /**
               * Constructs a new Msg_83000_.
               * @memberof com.proto
               * @classdesc Represents a Msg_83000_.
               * @implements IMsg_83000_
               * @constructor
               * @param {com.proto.IMsg_83000_=} [p] Properties to set
               */
              function Msg_83000_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_83000_ advertising.
               * @member {com.proto.IMAdvertising|null|undefined} advertising
               * @memberof com.proto.Msg_83000_
               * @instance
               */


              Msg_83000_.prototype.advertising = null;
              /**
               * Creates a new Msg_83000_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_83000_
               * @static
               * @param {com.proto.IMsg_83000_=} [properties] Properties to set
               * @returns {com.proto.Msg_83000_} Msg_83000_ instance
               */

              Msg_83000_.create = function create(properties) {
                return new Msg_83000_(properties);
              };
              /**
               * Encodes the specified Msg_83000_ message. Does not implicitly {@link com.proto.Msg_83000_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_83000_
               * @static
               * @param {com.proto.IMsg_83000_} m Msg_83000_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_83000_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.advertising != null && Object.hasOwnProperty.call(m, "advertising")) $root.com.proto.MAdvertising.encode(m.advertising, w.uint32(10).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_83000_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_83000_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_83000_} Msg_83000_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_83000_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_83000_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.advertising = $root.com.proto.MAdvertising.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_83000_;
            }();

            proto.Msg_83001_ = function () {
              /**
               * Properties of a Msg_83001_.
               * @memberof com.proto
               * @interface IMsg_83001_
               * @property {Array.<number>|null} [id] Msg_83001_ id
               */

              /**
               * Constructs a new Msg_83001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_83001_.
               * @implements IMsg_83001_
               * @constructor
               * @param {com.proto.IMsg_83001_=} [p] Properties to set
               */
              function Msg_83001_(p) {
                this.id = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_83001_ id.
               * @member {Array.<number>} id
               * @memberof com.proto.Msg_83001_
               * @instance
               */


              Msg_83001_.prototype.id = $util.emptyArray;
              /**
               * Creates a new Msg_83001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_83001_
               * @static
               * @param {com.proto.IMsg_83001_=} [properties] Properties to set
               * @returns {com.proto.Msg_83001_} Msg_83001_ instance
               */

              Msg_83001_.create = function create(properties) {
                return new Msg_83001_(properties);
              };
              /**
               * Encodes the specified Msg_83001_ message. Does not implicitly {@link com.proto.Msg_83001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_83001_
               * @static
               * @param {com.proto.IMsg_83001_} m Msg_83001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_83001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.id != null && m.id.length) {
                  for (var i = 0; i < m.id.length; ++i) w.uint32(8).int32(m.id[i]);
                }

                return w;
              };
              /**
               * Decodes a Msg_83001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_83001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_83001_} Msg_83001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_83001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_83001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.id && m.id.length)) m.id = [];

                        if ((t & 7) === 2) {
                          var c2 = r.uint32() + r.pos;

                          while (r.pos < c2) m.id.push(r.int32());
                        } else m.id.push(r.int32());

                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_83001_;
            }();

            proto.Msg_83002 = function () {
              /**
               * Properties of a Msg_83002.
               * @memberof com.proto
               * @interface IMsg_83002
               * @property {number|null} [id] Msg_83002 id
               */

              /**
               * Constructs a new Msg_83002.
               * @memberof com.proto
               * @classdesc Represents a Msg_83002.
               * @implements IMsg_83002
               * @constructor
               * @param {com.proto.IMsg_83002=} [p] Properties to set
               */
              function Msg_83002(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_83002 id.
               * @member {number} id
               * @memberof com.proto.Msg_83002
               * @instance
               */


              Msg_83002.prototype.id = 0;
              /**
               * Creates a new Msg_83002 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_83002
               * @static
               * @param {com.proto.IMsg_83002=} [properties] Properties to set
               * @returns {com.proto.Msg_83002} Msg_83002 instance
               */

              Msg_83002.create = function create(properties) {
                return new Msg_83002(properties);
              };
              /**
               * Encodes the specified Msg_83002 message. Does not implicitly {@link com.proto.Msg_83002.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_83002
               * @static
               * @param {com.proto.IMsg_83002} m Msg_83002 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_83002.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);
                return w;
              };
              /**
               * Decodes a Msg_83002 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_83002
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_83002} Msg_83002
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_83002.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_83002();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_83002;
            }();

            proto.Msg_83002_ = function () {
              /**
               * Properties of a Msg_83002_.
               * @memberof com.proto
               * @interface IMsg_83002_
               */

              /**
               * Constructs a new Msg_83002_.
               * @memberof com.proto
               * @classdesc Represents a Msg_83002_.
               * @implements IMsg_83002_
               * @constructor
               * @param {com.proto.IMsg_83002_=} [p] Properties to set
               */
              function Msg_83002_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_83002_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_83002_
               * @static
               * @param {com.proto.IMsg_83002_=} [properties] Properties to set
               * @returns {com.proto.Msg_83002_} Msg_83002_ instance
               */


              Msg_83002_.create = function create(properties) {
                return new Msg_83002_(properties);
              };
              /**
               * Encodes the specified Msg_83002_ message. Does not implicitly {@link com.proto.Msg_83002_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_83002_
               * @static
               * @param {com.proto.IMsg_83002_} m Msg_83002_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_83002_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_83002_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_83002_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_83002_} Msg_83002_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_83002_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_83002_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_83002_;
            }();

            proto.MGrid = function () {
              /**
               * Properties of a MGrid.
               * @memberof com.proto
               * @interface IMGrid
               * @property {number|null} [index] MGrid index
               * @property {number|null} [type] MGrid type
               * @property {number|null} [sysId] MGrid sysId
               * @property {number|null} [number] MGrid number
               * @property {number|Long|null} [startTime] MGrid startTime
               * @property {number|null} [soruce] MGrid soruce
               */

              /**
               * Constructs a new MGrid.
               * @memberof com.proto
               * @classdesc Represents a MGrid.
               * @implements IMGrid
               * @constructor
               * @param {com.proto.IMGrid=} [p] Properties to set
               */
              function MGrid(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MGrid index.
               * @member {number} index
               * @memberof com.proto.MGrid
               * @instance
               */


              MGrid.prototype.index = 0;
              /**
               * MGrid type.
               * @member {number} type
               * @memberof com.proto.MGrid
               * @instance
               */

              MGrid.prototype.type = 0;
              /**
               * MGrid sysId.
               * @member {number} sysId
               * @memberof com.proto.MGrid
               * @instance
               */

              MGrid.prototype.sysId = 0;
              /**
               * MGrid number.
               * @member {number} number
               * @memberof com.proto.MGrid
               * @instance
               */

              MGrid.prototype.number = 0;
              /**
               * MGrid startTime.
               * @member {number|Long} startTime
               * @memberof com.proto.MGrid
               * @instance
               */

              MGrid.prototype.startTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MGrid soruce.
               * @member {number} soruce
               * @memberof com.proto.MGrid
               * @instance
               */

              MGrid.prototype.soruce = 0;
              /**
               * Creates a new MGrid instance using the specified properties.
               * @function create
               * @memberof com.proto.MGrid
               * @static
               * @param {com.proto.IMGrid=} [properties] Properties to set
               * @returns {com.proto.MGrid} MGrid instance
               */

              MGrid.create = function create(properties) {
                return new MGrid(properties);
              };
              /**
               * Encodes the specified MGrid message. Does not implicitly {@link com.proto.MGrid.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MGrid
               * @static
               * @param {com.proto.IMGrid} m MGrid message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MGrid.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.index != null && Object.hasOwnProperty.call(m, "index")) w.uint32(8).int32(m.index);
                if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(16).int32(m.type);
                if (m.sysId != null && Object.hasOwnProperty.call(m, "sysId")) w.uint32(24).int32(m.sysId);
                if (m.number != null && Object.hasOwnProperty.call(m, "number")) w.uint32(32).int32(m.number);
                if (m.startTime != null && Object.hasOwnProperty.call(m, "startTime")) w.uint32(40).int64(m.startTime);
                if (m.soruce != null && Object.hasOwnProperty.call(m, "soruce")) w.uint32(48).int32(m.soruce);
                return w;
              };
              /**
               * Decodes a MGrid message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MGrid
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MGrid} MGrid
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MGrid.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MGrid();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.index = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.type = r.int32();
                        break;
                      }

                    case 3:
                      {
                        m.sysId = r.int32();
                        break;
                      }

                    case 4:
                      {
                        m.number = r.int32();
                        break;
                      }

                    case 5:
                      {
                        m.startTime = r.int64();
                        break;
                      }

                    case 6:
                      {
                        m.soruce = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MGrid;
            }();

            proto.Msg_6001_ = function () {
              /**
               * Properties of a Msg_6001_.
               * @memberof com.proto
               * @interface IMsg_6001_
               * @property {Array.<com.proto.IMGrid>|null} [updateList] Msg_6001_ updateList
               */

              /**
               * Constructs a new Msg_6001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_6001_.
               * @implements IMsg_6001_
               * @constructor
               * @param {com.proto.IMsg_6001_=} [p] Properties to set
               */
              function Msg_6001_(p) {
                this.updateList = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_6001_ updateList.
               * @member {Array.<com.proto.IMGrid>} updateList
               * @memberof com.proto.Msg_6001_
               * @instance
               */


              Msg_6001_.prototype.updateList = $util.emptyArray;
              /**
               * Creates a new Msg_6001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_6001_
               * @static
               * @param {com.proto.IMsg_6001_=} [properties] Properties to set
               * @returns {com.proto.Msg_6001_} Msg_6001_ instance
               */

              Msg_6001_.create = function create(properties) {
                return new Msg_6001_(properties);
              };
              /**
               * Encodes the specified Msg_6001_ message. Does not implicitly {@link com.proto.Msg_6001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_6001_
               * @static
               * @param {com.proto.IMsg_6001_} m Msg_6001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_6001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.updateList != null && m.updateList.length) {
                  for (var i = 0; i < m.updateList.length; ++i) $root.com.proto.MGrid.encode(m.updateList[i], w.uint32(10).fork()).ldelim();
                }

                return w;
              };
              /**
               * Decodes a Msg_6001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_6001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_6001_} Msg_6001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_6001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_6001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.updateList && m.updateList.length)) m.updateList = [];
                        m.updateList.push($root.com.proto.MGrid.decode(r, r.uint32()));
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_6001_;
            }();

            proto.Msg_6002 = function () {
              /**
               * Properties of a Msg_6002.
               * @memberof com.proto
               * @interface IMsg_6002
               * @property {Array.<number>|null} [index] Msg_6002 index
               */

              /**
               * Constructs a new Msg_6002.
               * @memberof com.proto
               * @classdesc Represents a Msg_6002.
               * @implements IMsg_6002
               * @constructor
               * @param {com.proto.IMsg_6002=} [p] Properties to set
               */
              function Msg_6002(p) {
                this.index = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_6002 index.
               * @member {Array.<number>} index
               * @memberof com.proto.Msg_6002
               * @instance
               */


              Msg_6002.prototype.index = $util.emptyArray;
              /**
               * Creates a new Msg_6002 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_6002
               * @static
               * @param {com.proto.IMsg_6002=} [properties] Properties to set
               * @returns {com.proto.Msg_6002} Msg_6002 instance
               */

              Msg_6002.create = function create(properties) {
                return new Msg_6002(properties);
              };
              /**
               * Encodes the specified Msg_6002 message. Does not implicitly {@link com.proto.Msg_6002.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_6002
               * @static
               * @param {com.proto.IMsg_6002} m Msg_6002 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_6002.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.index != null && m.index.length) {
                  for (var i = 0; i < m.index.length; ++i) w.uint32(8).int32(m.index[i]);
                }

                return w;
              };
              /**
               * Decodes a Msg_6002 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_6002
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_6002} Msg_6002
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_6002.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_6002();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.index && m.index.length)) m.index = [];

                        if ((t & 7) === 2) {
                          var c2 = r.uint32() + r.pos;

                          while (r.pos < c2) m.index.push(r.int32());
                        } else m.index.push(r.int32());

                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_6002;
            }();

            proto.MPlayerChat = function () {
              /**
               * Properties of a MPlayerChat.
               * @memberof com.proto
               * @interface IMPlayerChat
               * @property {number|Long|null} [id] MPlayerChat id
               * @property {string|null} [name] MPlayerChat name
               * @property {number|null} [level] MPlayerChat level
               * @property {number|null} [imageId] MPlayerChat imageId
               */

              /**
               * Constructs a new MPlayerChat.
               * @memberof com.proto
               * @classdesc Represents a MPlayerChat.
               * @implements IMPlayerChat
               * @constructor
               * @param {com.proto.IMPlayerChat=} [p] Properties to set
               */
              function MPlayerChat(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MPlayerChat id.
               * @member {number|Long} id
               * @memberof com.proto.MPlayerChat
               * @instance
               */


              MPlayerChat.prototype.id = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayerChat name.
               * @member {string} name
               * @memberof com.proto.MPlayerChat
               * @instance
               */

              MPlayerChat.prototype.name = "";
              /**
               * MPlayerChat level.
               * @member {number} level
               * @memberof com.proto.MPlayerChat
               * @instance
               */

              MPlayerChat.prototype.level = -1;
              /**
               * MPlayerChat imageId.
               * @member {number} imageId
               * @memberof com.proto.MPlayerChat
               * @instance
               */

              MPlayerChat.prototype.imageId = -1;
              /**
               * Creates a new MPlayerChat instance using the specified properties.
               * @function create
               * @memberof com.proto.MPlayerChat
               * @static
               * @param {com.proto.IMPlayerChat=} [properties] Properties to set
               * @returns {com.proto.MPlayerChat} MPlayerChat instance
               */

              MPlayerChat.create = function create(properties) {
                return new MPlayerChat(properties);
              };
              /**
               * Encodes the specified MPlayerChat message. Does not implicitly {@link com.proto.MPlayerChat.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MPlayerChat
               * @static
               * @param {com.proto.IMPlayerChat} m MPlayerChat message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MPlayerChat.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
                if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(18).string(m.name);
                if (m.level != null && Object.hasOwnProperty.call(m, "level")) w.uint32(24).int32(m.level);
                if (m.imageId != null && Object.hasOwnProperty.call(m, "imageId")) w.uint32(32).int32(m.imageId);
                return w;
              };
              /**
               * Decodes a MPlayerChat message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MPlayerChat
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MPlayerChat} MPlayerChat
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MPlayerChat.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MPlayerChat();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int64();
                        break;
                      }

                    case 2:
                      {
                        m.name = r.string();
                        break;
                      }

                    case 3:
                      {
                        m.level = r.int32();
                        break;
                      }

                    case 4:
                      {
                        m.imageId = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MPlayerChat;
            }();

            proto.MChatData = function () {
              /**
               * Properties of a MChatData.
               * @memberof com.proto
               * @interface IMChatData
               * @property {number|null} [type] MChatData type
               * @property {string|null} [chatData] MChatData chatData
               * @property {com.proto.IMPlayerChat|null} [player] MChatData player
               * @property {number|Long|null} [sendTime] MChatData sendTime
               */

              /**
               * Constructs a new MChatData.
               * @memberof com.proto
               * @classdesc Represents a MChatData.
               * @implements IMChatData
               * @constructor
               * @param {com.proto.IMChatData=} [p] Properties to set
               */
              function MChatData(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MChatData type.
               * @member {number} type
               * @memberof com.proto.MChatData
               * @instance
               */


              MChatData.prototype.type = 0;
              /**
               * MChatData chatData.
               * @member {string} chatData
               * @memberof com.proto.MChatData
               * @instance
               */

              MChatData.prototype.chatData = "";
              /**
               * MChatData player.
               * @member {com.proto.IMPlayerChat|null|undefined} player
               * @memberof com.proto.MChatData
               * @instance
               */

              MChatData.prototype.player = null;
              /**
               * MChatData sendTime.
               * @member {number|Long} sendTime
               * @memberof com.proto.MChatData
               * @instance
               */

              MChatData.prototype.sendTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new MChatData instance using the specified properties.
               * @function create
               * @memberof com.proto.MChatData
               * @static
               * @param {com.proto.IMChatData=} [properties] Properties to set
               * @returns {com.proto.MChatData} MChatData instance
               */

              MChatData.create = function create(properties) {
                return new MChatData(properties);
              };
              /**
               * Encodes the specified MChatData message. Does not implicitly {@link com.proto.MChatData.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MChatData
               * @static
               * @param {com.proto.IMChatData} m MChatData message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MChatData.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(8).int32(m.type);
                if (m.chatData != null && Object.hasOwnProperty.call(m, "chatData")) w.uint32(18).string(m.chatData);
                if (m.player != null && Object.hasOwnProperty.call(m, "player")) $root.com.proto.MPlayerChat.encode(m.player, w.uint32(26).fork()).ldelim();
                if (m.sendTime != null && Object.hasOwnProperty.call(m, "sendTime")) w.uint32(32).int64(m.sendTime);
                return w;
              };
              /**
               * Decodes a MChatData message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MChatData
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MChatData} MChatData
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MChatData.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MChatData();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.type = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.chatData = r.string();
                        break;
                      }

                    case 3:
                      {
                        m.player = $root.com.proto.MPlayerChat.decode(r, r.uint32());
                        break;
                      }

                    case 4:
                      {
                        m.sendTime = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MChatData;
            }();

            proto.MNoticeData = function () {
              /**
               * Properties of a MNoticeData.
               * @memberof com.proto
               * @interface IMNoticeData
               * @property {number|Long|null} [id] MNoticeData id
               * @property {number|null} [sysId] MNoticeData sysId
               * @property {number|Long|null} [startTime] MNoticeData startTime
               * @property {number|Long|null} [endTime] MNoticeData endTime
               * @property {number|null} [intervalTime] MNoticeData intervalTime
               * @property {string|null} [content] MNoticeData content
               */

              /**
               * Constructs a new MNoticeData.
               * @memberof com.proto
               * @classdesc Represents a MNoticeData.
               * @implements IMNoticeData
               * @constructor
               * @param {com.proto.IMNoticeData=} [p] Properties to set
               */
              function MNoticeData(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MNoticeData id.
               * @member {number|Long} id
               * @memberof com.proto.MNoticeData
               * @instance
               */


              MNoticeData.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MNoticeData sysId.
               * @member {number} sysId
               * @memberof com.proto.MNoticeData
               * @instance
               */

              MNoticeData.prototype.sysId = 0;
              /**
               * MNoticeData startTime.
               * @member {number|Long} startTime
               * @memberof com.proto.MNoticeData
               * @instance
               */

              MNoticeData.prototype.startTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MNoticeData endTime.
               * @member {number|Long} endTime
               * @memberof com.proto.MNoticeData
               * @instance
               */

              MNoticeData.prototype.endTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MNoticeData intervalTime.
               * @member {number} intervalTime
               * @memberof com.proto.MNoticeData
               * @instance
               */

              MNoticeData.prototype.intervalTime = 0;
              /**
               * MNoticeData content.
               * @member {string} content
               * @memberof com.proto.MNoticeData
               * @instance
               */

              MNoticeData.prototype.content = "";
              /**
               * Creates a new MNoticeData instance using the specified properties.
               * @function create
               * @memberof com.proto.MNoticeData
               * @static
               * @param {com.proto.IMNoticeData=} [properties] Properties to set
               * @returns {com.proto.MNoticeData} MNoticeData instance
               */

              MNoticeData.create = function create(properties) {
                return new MNoticeData(properties);
              };
              /**
               * Encodes the specified MNoticeData message. Does not implicitly {@link com.proto.MNoticeData.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MNoticeData
               * @static
               * @param {com.proto.IMNoticeData} m MNoticeData message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MNoticeData.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
                if (m.sysId != null && Object.hasOwnProperty.call(m, "sysId")) w.uint32(16).int32(m.sysId);
                if (m.startTime != null && Object.hasOwnProperty.call(m, "startTime")) w.uint32(24).int64(m.startTime);
                if (m.endTime != null && Object.hasOwnProperty.call(m, "endTime")) w.uint32(32).int64(m.endTime);
                if (m.intervalTime != null && Object.hasOwnProperty.call(m, "intervalTime")) w.uint32(40).int32(m.intervalTime);
                if (m.content != null && Object.hasOwnProperty.call(m, "content")) w.uint32(50).string(m.content);
                return w;
              };
              /**
               * Decodes a MNoticeData message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MNoticeData
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MNoticeData} MNoticeData
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MNoticeData.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MNoticeData();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int64();
                        break;
                      }

                    case 2:
                      {
                        m.sysId = r.int32();
                        break;
                      }

                    case 3:
                      {
                        m.startTime = r.int64();
                        break;
                      }

                    case 4:
                      {
                        m.endTime = r.int64();
                        break;
                      }

                    case 5:
                      {
                        m.intervalTime = r.int32();
                        break;
                      }

                    case 6:
                      {
                        m.content = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MNoticeData;
            }();

            proto.Msg_7000 = function () {
              /**
               * Properties of a Msg_7000.
               * @memberof com.proto
               * @interface IMsg_7000
               */

              /**
               * Constructs a new Msg_7000.
               * @memberof com.proto
               * @classdesc Represents a Msg_7000.
               * @implements IMsg_7000
               * @constructor
               * @param {com.proto.IMsg_7000=} [p] Properties to set
               */
              function Msg_7000(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_7000 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7000
               * @static
               * @param {com.proto.IMsg_7000=} [properties] Properties to set
               * @returns {com.proto.Msg_7000} Msg_7000 instance
               */


              Msg_7000.create = function create(properties) {
                return new Msg_7000(properties);
              };
              /**
               * Encodes the specified Msg_7000 message. Does not implicitly {@link com.proto.Msg_7000.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7000
               * @static
               * @param {com.proto.IMsg_7000} m Msg_7000 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7000.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_7000 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7000
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7000} Msg_7000
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7000.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7000();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7000;
            }();

            proto.Msg_7000_ = function () {
              /**
               * Properties of a Msg_7000_.
               * @memberof com.proto
               * @interface IMsg_7000_
               * @property {Array.<com.proto.IMChatData>|null} [chatData] Msg_7000_ chatData
               * @property {Array.<com.proto.IMsg_7002_>|null} [privateChat] Msg_7000_ privateChat
               */

              /**
               * Constructs a new Msg_7000_.
               * @memberof com.proto
               * @classdesc Represents a Msg_7000_.
               * @implements IMsg_7000_
               * @constructor
               * @param {com.proto.IMsg_7000_=} [p] Properties to set
               */
              function Msg_7000_(p) {
                this.chatData = [];
                this.privateChat = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7000_ chatData.
               * @member {Array.<com.proto.IMChatData>} chatData
               * @memberof com.proto.Msg_7000_
               * @instance
               */


              Msg_7000_.prototype.chatData = $util.emptyArray;
              /**
               * Msg_7000_ privateChat.
               * @member {Array.<com.proto.IMsg_7002_>} privateChat
               * @memberof com.proto.Msg_7000_
               * @instance
               */

              Msg_7000_.prototype.privateChat = $util.emptyArray;
              /**
               * Creates a new Msg_7000_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7000_
               * @static
               * @param {com.proto.IMsg_7000_=} [properties] Properties to set
               * @returns {com.proto.Msg_7000_} Msg_7000_ instance
               */

              Msg_7000_.create = function create(properties) {
                return new Msg_7000_(properties);
              };
              /**
               * Encodes the specified Msg_7000_ message. Does not implicitly {@link com.proto.Msg_7000_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7000_
               * @static
               * @param {com.proto.IMsg_7000_} m Msg_7000_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7000_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.chatData != null && m.chatData.length) {
                  for (var i = 0; i < m.chatData.length; ++i) $root.com.proto.MChatData.encode(m.chatData[i], w.uint32(10).fork()).ldelim();
                }

                if (m.privateChat != null && m.privateChat.length) {
                  for (var i = 0; i < m.privateChat.length; ++i) $root.com.proto.Msg_7002_.encode(m.privateChat[i], w.uint32(18).fork()).ldelim();
                }

                return w;
              };
              /**
               * Decodes a Msg_7000_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7000_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7000_} Msg_7000_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7000_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7000_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.chatData && m.chatData.length)) m.chatData = [];
                        m.chatData.push($root.com.proto.MChatData.decode(r, r.uint32()));
                        break;
                      }

                    case 2:
                      {
                        if (!(m.privateChat && m.privateChat.length)) m.privateChat = [];
                        m.privateChat.push($root.com.proto.Msg_7002_.decode(r, r.uint32()));
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7000_;
            }();

            proto.Msg_7001 = function () {
              /**
               * Properties of a Msg_7001.
               * @memberof com.proto
               * @interface IMsg_7001
               * @property {number|null} [type] Msg_7001 type
               * @property {number|Long} targetId Msg_7001 targetId
               * @property {string|null} [chatData] Msg_7001 chatData
               */

              /**
               * Constructs a new Msg_7001.
               * @memberof com.proto
               * @classdesc Represents a Msg_7001.
               * @implements IMsg_7001
               * @constructor
               * @param {com.proto.IMsg_7001=} [p] Properties to set
               */
              function Msg_7001(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7001 type.
               * @member {number} type
               * @memberof com.proto.Msg_7001
               * @instance
               */


              Msg_7001.prototype.type = 0;
              /**
               * Msg_7001 targetId.
               * @member {number|Long} targetId
               * @memberof com.proto.Msg_7001
               * @instance
               */

              Msg_7001.prototype.targetId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Msg_7001 chatData.
               * @member {string} chatData
               * @memberof com.proto.Msg_7001
               * @instance
               */

              Msg_7001.prototype.chatData = "";
              /**
               * Creates a new Msg_7001 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7001
               * @static
               * @param {com.proto.IMsg_7001=} [properties] Properties to set
               * @returns {com.proto.Msg_7001} Msg_7001 instance
               */

              Msg_7001.create = function create(properties) {
                return new Msg_7001(properties);
              };
              /**
               * Encodes the specified Msg_7001 message. Does not implicitly {@link com.proto.Msg_7001.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7001
               * @static
               * @param {com.proto.IMsg_7001} m Msg_7001 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7001.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(8).int32(m.type);
                w.uint32(16).int64(m.targetId);
                if (m.chatData != null && Object.hasOwnProperty.call(m, "chatData")) w.uint32(26).string(m.chatData);
                return w;
              };
              /**
               * Decodes a Msg_7001 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7001
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7001} Msg_7001
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7001.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7001();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.type = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.targetId = r.int64();
                        break;
                      }

                    case 3:
                      {
                        m.chatData = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                if (!m.hasOwnProperty("targetId")) throw $util.ProtocolError("missing required 'targetId'", {
                  instance: m
                });
                return m;
              };

              return Msg_7001;
            }();

            proto.Msg_7001_ = function () {
              /**
               * Properties of a Msg_7001_.
               * @memberof com.proto
               * @interface IMsg_7001_
               * @property {Array.<com.proto.IMChatData>|null} [chatData] Msg_7001_ chatData
               */

              /**
               * Constructs a new Msg_7001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_7001_.
               * @implements IMsg_7001_
               * @constructor
               * @param {com.proto.IMsg_7001_=} [p] Properties to set
               */
              function Msg_7001_(p) {
                this.chatData = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7001_ chatData.
               * @member {Array.<com.proto.IMChatData>} chatData
               * @memberof com.proto.Msg_7001_
               * @instance
               */


              Msg_7001_.prototype.chatData = $util.emptyArray;
              /**
               * Creates a new Msg_7001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7001_
               * @static
               * @param {com.proto.IMsg_7001_=} [properties] Properties to set
               * @returns {com.proto.Msg_7001_} Msg_7001_ instance
               */

              Msg_7001_.create = function create(properties) {
                return new Msg_7001_(properties);
              };
              /**
               * Encodes the specified Msg_7001_ message. Does not implicitly {@link com.proto.Msg_7001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7001_
               * @static
               * @param {com.proto.IMsg_7001_} m Msg_7001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.chatData != null && m.chatData.length) {
                  for (var i = 0; i < m.chatData.length; ++i) $root.com.proto.MChatData.encode(m.chatData[i], w.uint32(10).fork()).ldelim();
                }

                return w;
              };
              /**
               * Decodes a Msg_7001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7001_} Msg_7001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.chatData && m.chatData.length)) m.chatData = [];
                        m.chatData.push($root.com.proto.MChatData.decode(r, r.uint32()));
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7001_;
            }();

            proto.Msg_7002_ = function () {
              /**
               * Properties of a Msg_7002_.
               * @memberof com.proto
               * @interface IMsg_7002_
               * @property {number|null} [type] Msg_7002_ type
               * @property {string|null} [chatData] Msg_7002_ chatData
               * @property {com.proto.IMPlayerChat|null} [player] Msg_7002_ player
               * @property {number|Long|null} [sendTime] Msg_7002_ sendTime
               * @property {com.proto.IMPlayerChat|null} [target] Msg_7002_ target
               */

              /**
               * Constructs a new Msg_7002_.
               * @memberof com.proto
               * @classdesc Represents a Msg_7002_.
               * @implements IMsg_7002_
               * @constructor
               * @param {com.proto.IMsg_7002_=} [p] Properties to set
               */
              function Msg_7002_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7002_ type.
               * @member {number} type
               * @memberof com.proto.Msg_7002_
               * @instance
               */


              Msg_7002_.prototype.type = 0;
              /**
               * Msg_7002_ chatData.
               * @member {string} chatData
               * @memberof com.proto.Msg_7002_
               * @instance
               */

              Msg_7002_.prototype.chatData = "";
              /**
               * Msg_7002_ player.
               * @member {com.proto.IMPlayerChat|null|undefined} player
               * @memberof com.proto.Msg_7002_
               * @instance
               */

              Msg_7002_.prototype.player = null;
              /**
               * Msg_7002_ sendTime.
               * @member {number|Long} sendTime
               * @memberof com.proto.Msg_7002_
               * @instance
               */

              Msg_7002_.prototype.sendTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Msg_7002_ target.
               * @member {com.proto.IMPlayerChat|null|undefined} target
               * @memberof com.proto.Msg_7002_
               * @instance
               */

              Msg_7002_.prototype.target = null;
              /**
               * Creates a new Msg_7002_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7002_
               * @static
               * @param {com.proto.IMsg_7002_=} [properties] Properties to set
               * @returns {com.proto.Msg_7002_} Msg_7002_ instance
               */

              Msg_7002_.create = function create(properties) {
                return new Msg_7002_(properties);
              };
              /**
               * Encodes the specified Msg_7002_ message. Does not implicitly {@link com.proto.Msg_7002_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7002_
               * @static
               * @param {com.proto.IMsg_7002_} m Msg_7002_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7002_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(8).int32(m.type);
                if (m.chatData != null && Object.hasOwnProperty.call(m, "chatData")) w.uint32(18).string(m.chatData);
                if (m.player != null && Object.hasOwnProperty.call(m, "player")) $root.com.proto.MPlayerChat.encode(m.player, w.uint32(26).fork()).ldelim();
                if (m.sendTime != null && Object.hasOwnProperty.call(m, "sendTime")) w.uint32(32).int64(m.sendTime);
                if (m.target != null && Object.hasOwnProperty.call(m, "target")) $root.com.proto.MPlayerChat.encode(m.target, w.uint32(42).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_7002_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7002_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7002_} Msg_7002_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7002_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7002_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.type = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.chatData = r.string();
                        break;
                      }

                    case 3:
                      {
                        m.player = $root.com.proto.MPlayerChat.decode(r, r.uint32());
                        break;
                      }

                    case 4:
                      {
                        m.sendTime = r.int64();
                        break;
                      }

                    case 5:
                      {
                        m.target = $root.com.proto.MPlayerChat.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7002_;
            }();

            proto.Msg_7003_ = function () {
              /**
               * Properties of a Msg_7003_.
               * @memberof com.proto
               * @interface IMsg_7003_
               * @property {number|null} [id] Msg_7003_ id
               * @property {Array.<string>|null} [paramValue] Msg_7003_ paramValue
               */

              /**
               * Constructs a new Msg_7003_.
               * @memberof com.proto
               * @classdesc Represents a Msg_7003_.
               * @implements IMsg_7003_
               * @constructor
               * @param {com.proto.IMsg_7003_=} [p] Properties to set
               */
              function Msg_7003_(p) {
                this.paramValue = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7003_ id.
               * @member {number} id
               * @memberof com.proto.Msg_7003_
               * @instance
               */


              Msg_7003_.prototype.id = 0;
              /**
               * Msg_7003_ paramValue.
               * @member {Array.<string>} paramValue
               * @memberof com.proto.Msg_7003_
               * @instance
               */

              Msg_7003_.prototype.paramValue = $util.emptyArray;
              /**
               * Creates a new Msg_7003_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7003_
               * @static
               * @param {com.proto.IMsg_7003_=} [properties] Properties to set
               * @returns {com.proto.Msg_7003_} Msg_7003_ instance
               */

              Msg_7003_.create = function create(properties) {
                return new Msg_7003_(properties);
              };
              /**
               * Encodes the specified Msg_7003_ message. Does not implicitly {@link com.proto.Msg_7003_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7003_
               * @static
               * @param {com.proto.IMsg_7003_} m Msg_7003_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7003_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);

                if (m.paramValue != null && m.paramValue.length) {
                  for (var i = 0; i < m.paramValue.length; ++i) w.uint32(18).string(m.paramValue[i]);
                }

                return w;
              };
              /**
               * Decodes a Msg_7003_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7003_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7003_} Msg_7003_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7003_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7003_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int32();
                        break;
                      }

                    case 2:
                      {
                        if (!(m.paramValue && m.paramValue.length)) m.paramValue = [];
                        m.paramValue.push(r.string());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7003_;
            }();

            proto.Msg_7004_ = function () {
              /**
               * Properties of a Msg_7004_.
               * @memberof com.proto
               * @interface IMsg_7004_
               * @property {Array.<com.proto.IMNoticeData>|null} [noticeData] Msg_7004_ noticeData
               */

              /**
               * Constructs a new Msg_7004_.
               * @memberof com.proto
               * @classdesc Represents a Msg_7004_.
               * @implements IMsg_7004_
               * @constructor
               * @param {com.proto.IMsg_7004_=} [p] Properties to set
               */
              function Msg_7004_(p) {
                this.noticeData = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7004_ noticeData.
               * @member {Array.<com.proto.IMNoticeData>} noticeData
               * @memberof com.proto.Msg_7004_
               * @instance
               */


              Msg_7004_.prototype.noticeData = $util.emptyArray;
              /**
               * Creates a new Msg_7004_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7004_
               * @static
               * @param {com.proto.IMsg_7004_=} [properties] Properties to set
               * @returns {com.proto.Msg_7004_} Msg_7004_ instance
               */

              Msg_7004_.create = function create(properties) {
                return new Msg_7004_(properties);
              };
              /**
               * Encodes the specified Msg_7004_ message. Does not implicitly {@link com.proto.Msg_7004_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7004_
               * @static
               * @param {com.proto.IMsg_7004_} m Msg_7004_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7004_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.noticeData != null && m.noticeData.length) {
                  for (var i = 0; i < m.noticeData.length; ++i) $root.com.proto.MNoticeData.encode(m.noticeData[i], w.uint32(10).fork()).ldelim();
                }

                return w;
              };
              /**
               * Decodes a Msg_7004_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7004_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7004_} Msg_7004_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7004_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7004_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.noticeData && m.noticeData.length)) m.noticeData = [];
                        m.noticeData.push($root.com.proto.MNoticeData.decode(r, r.uint32()));
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7004_;
            }();

            proto.Msg_7005_ = function () {
              /**
               * Properties of a Msg_7005_.
               * @memberof com.proto
               * @interface IMsg_7005_
               * @property {number|Long|null} [id] Msg_7005_ id
               */

              /**
               * Constructs a new Msg_7005_.
               * @memberof com.proto
               * @classdesc Represents a Msg_7005_.
               * @implements IMsg_7005_
               * @constructor
               * @param {com.proto.IMsg_7005_=} [p] Properties to set
               */
              function Msg_7005_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7005_ id.
               * @member {number|Long} id
               * @memberof com.proto.Msg_7005_
               * @instance
               */


              Msg_7005_.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new Msg_7005_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7005_
               * @static
               * @param {com.proto.IMsg_7005_=} [properties] Properties to set
               * @returns {com.proto.Msg_7005_} Msg_7005_ instance
               */

              Msg_7005_.create = function create(properties) {
                return new Msg_7005_(properties);
              };
              /**
               * Encodes the specified Msg_7005_ message. Does not implicitly {@link com.proto.Msg_7005_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7005_
               * @static
               * @param {com.proto.IMsg_7005_} m Msg_7005_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7005_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
                return w;
              };
              /**
               * Decodes a Msg_7005_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7005_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7005_} Msg_7005_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7005_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7005_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7005_;
            }();

            proto.MClient = function () {
              /**
               * Properties of a MClient.
               * @memberof com.proto
               * @interface IMClient
               * @property {number|null} [reLogin] MClient reLogin
               * @property {number|null} [channel] MClient channel
               * @property {number|null} [currChannel] MClient currChannel
               * @property {string|null} [version] MClient version
               * @property {string|null} [terminal] MClient terminal
               * @property {string|null} [terminalType] MClient terminalType
               */

              /**
               * Constructs a new MClient.
               * @memberof com.proto
               * @classdesc Represents a MClient.
               * @implements IMClient
               * @constructor
               * @param {com.proto.IMClient=} [p] Properties to set
               */
              function MClient(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MClient reLogin.
               * @member {number} reLogin
               * @memberof com.proto.MClient
               * @instance
               */


              MClient.prototype.reLogin = 0;
              /**
               * MClient channel.
               * @member {number} channel
               * @memberof com.proto.MClient
               * @instance
               */

              MClient.prototype.channel = 0;
              /**
               * MClient currChannel.
               * @member {number} currChannel
               * @memberof com.proto.MClient
               * @instance
               */

              MClient.prototype.currChannel = 0;
              /**
               * MClient version.
               * @member {string} version
               * @memberof com.proto.MClient
               * @instance
               */

              MClient.prototype.version = "";
              /**
               * MClient terminal.
               * @member {string} terminal
               * @memberof com.proto.MClient
               * @instance
               */

              MClient.prototype.terminal = "";
              /**
               * MClient terminalType.
               * @member {string} terminalType
               * @memberof com.proto.MClient
               * @instance
               */

              MClient.prototype.terminalType = "";
              /**
               * Creates a new MClient instance using the specified properties.
               * @function create
               * @memberof com.proto.MClient
               * @static
               * @param {com.proto.IMClient=} [properties] Properties to set
               * @returns {com.proto.MClient} MClient instance
               */

              MClient.create = function create(properties) {
                return new MClient(properties);
              };
              /**
               * Encodes the specified MClient message. Does not implicitly {@link com.proto.MClient.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MClient
               * @static
               * @param {com.proto.IMClient} m MClient message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MClient.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.reLogin != null && Object.hasOwnProperty.call(m, "reLogin")) w.uint32(8).int32(m.reLogin);
                if (m.channel != null && Object.hasOwnProperty.call(m, "channel")) w.uint32(16).int32(m.channel);
                if (m.currChannel != null && Object.hasOwnProperty.call(m, "currChannel")) w.uint32(24).int32(m.currChannel);
                if (m.version != null && Object.hasOwnProperty.call(m, "version")) w.uint32(34).string(m.version);
                if (m.terminal != null && Object.hasOwnProperty.call(m, "terminal")) w.uint32(42).string(m.terminal);
                if (m.terminalType != null && Object.hasOwnProperty.call(m, "terminalType")) w.uint32(50).string(m.terminalType);
                return w;
              };
              /**
               * Decodes a MClient message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MClient
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MClient} MClient
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MClient.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MClient();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.reLogin = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.channel = r.int32();
                        break;
                      }

                    case 3:
                      {
                        m.currChannel = r.int32();
                        break;
                      }

                    case 4:
                      {
                        m.version = r.string();
                        break;
                      }

                    case 5:
                      {
                        m.terminal = r.string();
                        break;
                      }

                    case 6:
                      {
                        m.terminalType = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MClient;
            }();

            proto.Msg_2001 = function () {
              /**
               * Properties of a Msg_2001.
               * @memberof com.proto
               * @interface IMsg_2001
               * @property {number|Long|null} [accountId] Msg_2001 accountId
               * @property {number|null} [areaId] Msg_2001 areaId
               * @property {com.proto.IMClient|null} [client] Msg_2001 client
               * @property {string|null} [operatorId] Msg_2001 operatorId
               * @property {string|null} [loginIp] Msg_2001 loginIp
               * @property {string|null} [loginSign] Msg_2001 loginSign
               * @property {string|null} [gateToken] Msg_2001 gateToken
               */

              /**
               * Constructs a new Msg_2001.
               * @memberof com.proto
               * @classdesc Represents a Msg_2001.
               * @implements IMsg_2001
               * @constructor
               * @param {com.proto.IMsg_2001=} [p] Properties to set
               */
              function Msg_2001(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_2001 accountId.
               * @member {number|Long} accountId
               * @memberof com.proto.Msg_2001
               * @instance
               */


              Msg_2001.prototype.accountId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Msg_2001 areaId.
               * @member {number} areaId
               * @memberof com.proto.Msg_2001
               * @instance
               */

              Msg_2001.prototype.areaId = 0;
              /**
               * Msg_2001 client.
               * @member {com.proto.IMClient|null|undefined} client
               * @memberof com.proto.Msg_2001
               * @instance
               */

              Msg_2001.prototype.client = null;
              /**
               * Msg_2001 operatorId.
               * @member {string} operatorId
               * @memberof com.proto.Msg_2001
               * @instance
               */

              Msg_2001.prototype.operatorId = "";
              /**
               * Msg_2001 loginIp.
               * @member {string} loginIp
               * @memberof com.proto.Msg_2001
               * @instance
               */

              Msg_2001.prototype.loginIp = "";
              /**
               * Msg_2001 loginSign.
               * @member {string} loginSign
               * @memberof com.proto.Msg_2001
               * @instance
               */

              Msg_2001.prototype.loginSign = "";
              /**
               * Msg_2001 gateToken.
               * @member {string} gateToken
               * @memberof com.proto.Msg_2001
               * @instance
               */

              Msg_2001.prototype.gateToken = "";
              /**
               * Creates a new Msg_2001 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_2001
               * @static
               * @param {com.proto.IMsg_2001=} [properties] Properties to set
               * @returns {com.proto.Msg_2001} Msg_2001 instance
               */

              Msg_2001.create = function create(properties) {
                return new Msg_2001(properties);
              };
              /**
               * Encodes the specified Msg_2001 message. Does not implicitly {@link com.proto.Msg_2001.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_2001
               * @static
               * @param {com.proto.IMsg_2001} m Msg_2001 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_2001.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.accountId != null && Object.hasOwnProperty.call(m, "accountId")) w.uint32(8).int64(m.accountId);
                if (m.areaId != null && Object.hasOwnProperty.call(m, "areaId")) w.uint32(16).int32(m.areaId);
                if (m.client != null && Object.hasOwnProperty.call(m, "client")) $root.com.proto.MClient.encode(m.client, w.uint32(26).fork()).ldelim();
                if (m.operatorId != null && Object.hasOwnProperty.call(m, "operatorId")) w.uint32(34).string(m.operatorId);
                if (m.loginIp != null && Object.hasOwnProperty.call(m, "loginIp")) w.uint32(42).string(m.loginIp);
                if (m.loginSign != null && Object.hasOwnProperty.call(m, "loginSign")) w.uint32(50).string(m.loginSign);
                if (m.gateToken != null && Object.hasOwnProperty.call(m, "gateToken")) w.uint32(58).string(m.gateToken);
                return w;
              };
              /**
               * Decodes a Msg_2001 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_2001
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_2001} Msg_2001
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_2001.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_2001();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.accountId = r.int64();
                        break;
                      }

                    case 2:
                      {
                        m.areaId = r.int32();
                        break;
                      }

                    case 3:
                      {
                        m.client = $root.com.proto.MClient.decode(r, r.uint32());
                        break;
                      }

                    case 4:
                      {
                        m.operatorId = r.string();
                        break;
                      }

                    case 5:
                      {
                        m.loginIp = r.string();
                        break;
                      }

                    case 6:
                      {
                        m.loginSign = r.string();
                        break;
                      }

                    case 7:
                      {
                        m.gateToken = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_2001;
            }();

            proto.Msg_2001_ = function () {
              /**
               * Properties of a Msg_2001_.
               * @memberof com.proto
               * @interface IMsg_2001_
               * @property {number|null} [status] Msg_2001_ status
               * @property {string|null} [loginNotice] Msg_2001_ loginNotice
               * @property {number|Long|null} [illegalTime] Msg_2001_ illegalTime
               * @property {number|null} [timeZone] Msg_2001_ timeZone
               */

              /**
               * Constructs a new Msg_2001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_2001_.
               * @implements IMsg_2001_
               * @constructor
               * @param {com.proto.IMsg_2001_=} [p] Properties to set
               */
              function Msg_2001_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_2001_ status.
               * @member {number} status
               * @memberof com.proto.Msg_2001_
               * @instance
               */


              Msg_2001_.prototype.status = 0;
              /**
               * Msg_2001_ loginNotice.
               * @member {string} loginNotice
               * @memberof com.proto.Msg_2001_
               * @instance
               */

              Msg_2001_.prototype.loginNotice = "";
              /**
               * Msg_2001_ illegalTime.
               * @member {number|Long} illegalTime
               * @memberof com.proto.Msg_2001_
               * @instance
               */

              Msg_2001_.prototype.illegalTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Msg_2001_ timeZone.
               * @member {number} timeZone
               * @memberof com.proto.Msg_2001_
               * @instance
               */

              Msg_2001_.prototype.timeZone = 0;
              /**
               * Creates a new Msg_2001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_2001_
               * @static
               * @param {com.proto.IMsg_2001_=} [properties] Properties to set
               * @returns {com.proto.Msg_2001_} Msg_2001_ instance
               */

              Msg_2001_.create = function create(properties) {
                return new Msg_2001_(properties);
              };
              /**
               * Encodes the specified Msg_2001_ message. Does not implicitly {@link com.proto.Msg_2001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_2001_
               * @static
               * @param {com.proto.IMsg_2001_} m Msg_2001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_2001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.status != null && Object.hasOwnProperty.call(m, "status")) w.uint32(8).int32(m.status);
                if (m.loginNotice != null && Object.hasOwnProperty.call(m, "loginNotice")) w.uint32(18).string(m.loginNotice);
                if (m.illegalTime != null && Object.hasOwnProperty.call(m, "illegalTime")) w.uint32(24).int64(m.illegalTime);
                if (m.timeZone != null && Object.hasOwnProperty.call(m, "timeZone")) w.uint32(32).int32(m.timeZone);
                return w;
              };
              /**
               * Decodes a Msg_2001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_2001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_2001_} Msg_2001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_2001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_2001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.status = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.loginNotice = r.string();
                        break;
                      }

                    case 3:
                      {
                        m.illegalTime = r.int64();
                        break;
                      }

                    case 4:
                      {
                        m.timeZone = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_2001_;
            }();

            proto.Msg_2003_ = function () {
              /**
               * Properties of a Msg_2003_.
               * @memberof com.proto
               * @interface IMsg_2003_
               * @property {com.proto.IMLoginData|null} [loginData] Msg_2003_ loginData
               */

              /**
               * Constructs a new Msg_2003_.
               * @memberof com.proto
               * @classdesc Represents a Msg_2003_.
               * @implements IMsg_2003_
               * @constructor
               * @param {com.proto.IMsg_2003_=} [p] Properties to set
               */
              function Msg_2003_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_2003_ loginData.
               * @member {com.proto.IMLoginData|null|undefined} loginData
               * @memberof com.proto.Msg_2003_
               * @instance
               */


              Msg_2003_.prototype.loginData = null;
              /**
               * Creates a new Msg_2003_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_2003_
               * @static
               * @param {com.proto.IMsg_2003_=} [properties] Properties to set
               * @returns {com.proto.Msg_2003_} Msg_2003_ instance
               */

              Msg_2003_.create = function create(properties) {
                return new Msg_2003_(properties);
              };
              /**
               * Encodes the specified Msg_2003_ message. Does not implicitly {@link com.proto.Msg_2003_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_2003_
               * @static
               * @param {com.proto.IMsg_2003_} m Msg_2003_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_2003_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.loginData != null && Object.hasOwnProperty.call(m, "loginData")) $root.com.proto.MLoginData.encode(m.loginData, w.uint32(10).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_2003_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_2003_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_2003_} Msg_2003_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_2003_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_2003_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.loginData = $root.com.proto.MLoginData.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_2003_;
            }();

            proto.Msg_2004_ = function () {
              /**
               * Properties of a Msg_2004_.
               * @memberof com.proto
               * @interface IMsg_2004_
               */

              /**
               * Constructs a new Msg_2004_.
               * @memberof com.proto
               * @classdesc Represents a Msg_2004_.
               * @implements IMsg_2004_
               * @constructor
               * @param {com.proto.IMsg_2004_=} [p] Properties to set
               */
              function Msg_2004_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_2004_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_2004_
               * @static
               * @param {com.proto.IMsg_2004_=} [properties] Properties to set
               * @returns {com.proto.Msg_2004_} Msg_2004_ instance
               */


              Msg_2004_.create = function create(properties) {
                return new Msg_2004_(properties);
              };
              /**
               * Encodes the specified Msg_2004_ message. Does not implicitly {@link com.proto.Msg_2004_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_2004_
               * @static
               * @param {com.proto.IMsg_2004_} m Msg_2004_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_2004_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_2004_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_2004_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_2004_} Msg_2004_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_2004_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_2004_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_2004_;
            }();

            proto.MPlayer = function () {
              /**
               * Properties of a MPlayer.
               * @memberof com.proto
               * @interface IMPlayer
               * @property {number|Long|null} [id] MPlayer id
               * @property {string|null} [openId] MPlayer openId
               * @property {number|null} [areaId] MPlayer areaId
               * @property {string|null} [name] MPlayer name
               * @property {number|null} [level] MPlayer level
               * @property {number|Long|null} [exp] MPlayer exp
               * @property {number|null} [yuanBao] MPlayer yuanBao
               * @property {number|Long|null} [stone] MPlayer stone
               * @property {number|Long|null} [gold] MPlayer gold
               * @property {number|Long|null} [energy] MPlayer energy
               * @property {number|Long|null} [createTime] MPlayer createTime
               * @property {number|null} [state] MPlayer state
               * @property {number|null} [serialLogin] MPlayer serialLogin
               * @property {number|null} [totalLogin] MPlayer totalLogin
               * @property {number|null} [isInternal] MPlayer isInternal
               * @property {number|null} [channel] MPlayer channel
               * @property {number|Long|null} [dragonForce] MPlayer dragonForce
               * @property {number|null} [imageId] MPlayer imageId
               * @property {number|null} [guanQiaId] MPlayer guanQiaId
               */

              /**
               * Constructs a new MPlayer.
               * @memberof com.proto
               * @classdesc Represents a MPlayer.
               * @implements IMPlayer
               * @constructor
               * @param {com.proto.IMPlayer=} [p] Properties to set
               */
              function MPlayer(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MPlayer id.
               * @member {number|Long} id
               * @memberof com.proto.MPlayer
               * @instance
               */


              MPlayer.prototype.id = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer openId.
               * @member {string} openId
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.openId = "";
              /**
               * MPlayer areaId.
               * @member {number} areaId
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.areaId = -1;
              /**
               * MPlayer name.
               * @member {string} name
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.name = "";
              /**
               * MPlayer level.
               * @member {number} level
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.level = -1;
              /**
               * MPlayer exp.
               * @member {number|Long} exp
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.exp = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer yuanBao.
               * @member {number} yuanBao
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.yuanBao = -1;
              /**
               * MPlayer stone.
               * @member {number|Long} stone
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.stone = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer gold.
               * @member {number|Long} gold
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.gold = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer energy.
               * @member {number|Long} energy
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.energy = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer createTime.
               * @member {number|Long} createTime
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.createTime = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer state.
               * @member {number} state
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.state = -1;
              /**
               * MPlayer serialLogin.
               * @member {number} serialLogin
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.serialLogin = -1;
              /**
               * MPlayer totalLogin.
               * @member {number} totalLogin
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.totalLogin = -1;
              /**
               * MPlayer isInternal.
               * @member {number} isInternal
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.isInternal = -1;
              /**
               * MPlayer channel.
               * @member {number} channel
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.channel = -1;
              /**
               * MPlayer dragonForce.
               * @member {number|Long} dragonForce
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.dragonForce = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer imageId.
               * @member {number} imageId
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.imageId = -1;
              /**
               * MPlayer guanQiaId.
               * @member {number} guanQiaId
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.guanQiaId = -1;
              /**
               * Creates a new MPlayer instance using the specified properties.
               * @function create
               * @memberof com.proto.MPlayer
               * @static
               * @param {com.proto.IMPlayer=} [properties] Properties to set
               * @returns {com.proto.MPlayer} MPlayer instance
               */

              MPlayer.create = function create(properties) {
                return new MPlayer(properties);
              };
              /**
               * Encodes the specified MPlayer message. Does not implicitly {@link com.proto.MPlayer.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MPlayer
               * @static
               * @param {com.proto.IMPlayer} m MPlayer message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MPlayer.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
                if (m.openId != null && Object.hasOwnProperty.call(m, "openId")) w.uint32(18).string(m.openId);
                if (m.areaId != null && Object.hasOwnProperty.call(m, "areaId")) w.uint32(24).int32(m.areaId);
                if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(34).string(m.name);
                if (m.level != null && Object.hasOwnProperty.call(m, "level")) w.uint32(40).int32(m.level);
                if (m.exp != null && Object.hasOwnProperty.call(m, "exp")) w.uint32(48).int64(m.exp);
                if (m.yuanBao != null && Object.hasOwnProperty.call(m, "yuanBao")) w.uint32(56).int32(m.yuanBao);
                if (m.stone != null && Object.hasOwnProperty.call(m, "stone")) w.uint32(64).int64(m.stone);
                if (m.gold != null && Object.hasOwnProperty.call(m, "gold")) w.uint32(72).int64(m.gold);
                if (m.energy != null && Object.hasOwnProperty.call(m, "energy")) w.uint32(80).int64(m.energy);
                if (m.createTime != null && Object.hasOwnProperty.call(m, "createTime")) w.uint32(88).int64(m.createTime);
                if (m.state != null && Object.hasOwnProperty.call(m, "state")) w.uint32(96).int32(m.state);
                if (m.serialLogin != null && Object.hasOwnProperty.call(m, "serialLogin")) w.uint32(104).int32(m.serialLogin);
                if (m.totalLogin != null && Object.hasOwnProperty.call(m, "totalLogin")) w.uint32(112).int32(m.totalLogin);
                if (m.isInternal != null && Object.hasOwnProperty.call(m, "isInternal")) w.uint32(120).int32(m.isInternal);
                if (m.channel != null && Object.hasOwnProperty.call(m, "channel")) w.uint32(128).int32(m.channel);
                if (m.dragonForce != null && Object.hasOwnProperty.call(m, "dragonForce")) w.uint32(136).int64(m.dragonForce);
                if (m.imageId != null && Object.hasOwnProperty.call(m, "imageId")) w.uint32(144).int32(m.imageId);
                if (m.guanQiaId != null && Object.hasOwnProperty.call(m, "guanQiaId")) w.uint32(152).int32(m.guanQiaId);
                return w;
              };
              /**
               * Decodes a MPlayer message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MPlayer
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MPlayer} MPlayer
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MPlayer.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MPlayer();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int64();
                        break;
                      }

                    case 2:
                      {
                        m.openId = r.string();
                        break;
                      }

                    case 3:
                      {
                        m.areaId = r.int32();
                        break;
                      }

                    case 4:
                      {
                        m.name = r.string();
                        break;
                      }

                    case 5:
                      {
                        m.level = r.int32();
                        break;
                      }

                    case 6:
                      {
                        m.exp = r.int64();
                        break;
                      }

                    case 7:
                      {
                        m.yuanBao = r.int32();
                        break;
                      }

                    case 8:
                      {
                        m.stone = r.int64();
                        break;
                      }

                    case 9:
                      {
                        m.gold = r.int64();
                        break;
                      }

                    case 10:
                      {
                        m.energy = r.int64();
                        break;
                      }

                    case 11:
                      {
                        m.createTime = r.int64();
                        break;
                      }

                    case 12:
                      {
                        m.state = r.int32();
                        break;
                      }

                    case 13:
                      {
                        m.serialLogin = r.int32();
                        break;
                      }

                    case 14:
                      {
                        m.totalLogin = r.int32();
                        break;
                      }

                    case 15:
                      {
                        m.isInternal = r.int32();
                        break;
                      }

                    case 16:
                      {
                        m.channel = r.int32();
                        break;
                      }

                    case 17:
                      {
                        m.dragonForce = r.int64();
                        break;
                      }

                    case 18:
                      {
                        m.imageId = r.int32();
                        break;
                      }

                    case 19:
                      {
                        m.guanQiaId = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MPlayer;
            }();

            proto.MLoginData = function () {
              /**
               * Properties of a MLoginData.
               * @memberof com.proto
               * @interface IMLoginData
               * @property {com.proto.IMPlayer|null} [player] MLoginData player
               * @property {number|Long|null} [openServerTime] MLoginData openServerTime
               * @property {string|null} [logToken] MLoginData logToken
               * @property {Array.<com.proto.IMGrid>|null} [bagGirdList] MLoginData bagGirdList
               * @property {Array.<com.proto.IMAdvertising>|null} [advertising] MLoginData advertising
               * @property {Array.<com.proto.IMRecharge>|null} [awaitOrder] MLoginData awaitOrder
               * @property {Array.<com.proto.IMActivity>|null} [activity] MLoginData activity
               * @property {Array.<number>|null} [analysisList] MLoginData analysisList
               */

              /**
               * Constructs a new MLoginData.
               * @memberof com.proto
               * @classdesc Represents a MLoginData.
               * @implements IMLoginData
               * @constructor
               * @param {com.proto.IMLoginData=} [p] Properties to set
               */
              function MLoginData(p) {
                this.bagGirdList = [];
                this.advertising = [];
                this.awaitOrder = [];
                this.activity = [];
                this.analysisList = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MLoginData player.
               * @member {com.proto.IMPlayer|null|undefined} player
               * @memberof com.proto.MLoginData
               * @instance
               */


              MLoginData.prototype.player = null;
              /**
               * MLoginData openServerTime.
               * @member {number|Long} openServerTime
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.openServerTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MLoginData logToken.
               * @member {string} logToken
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.logToken = "";
              /**
               * MLoginData bagGirdList.
               * @member {Array.<com.proto.IMGrid>} bagGirdList
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.bagGirdList = $util.emptyArray;
              /**
               * MLoginData advertising.
               * @member {Array.<com.proto.IMAdvertising>} advertising
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.advertising = $util.emptyArray;
              /**
               * MLoginData awaitOrder.
               * @member {Array.<com.proto.IMRecharge>} awaitOrder
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.awaitOrder = $util.emptyArray;
              /**
               * MLoginData activity.
               * @member {Array.<com.proto.IMActivity>} activity
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.activity = $util.emptyArray;
              /**
               * MLoginData analysisList.
               * @member {Array.<number>} analysisList
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.analysisList = $util.emptyArray;
              /**
               * Creates a new MLoginData instance using the specified properties.
               * @function create
               * @memberof com.proto.MLoginData
               * @static
               * @param {com.proto.IMLoginData=} [properties] Properties to set
               * @returns {com.proto.MLoginData} MLoginData instance
               */

              MLoginData.create = function create(properties) {
                return new MLoginData(properties);
              };
              /**
               * Encodes the specified MLoginData message. Does not implicitly {@link com.proto.MLoginData.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MLoginData
               * @static
               * @param {com.proto.IMLoginData} m MLoginData message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MLoginData.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.player != null && Object.hasOwnProperty.call(m, "player")) $root.com.proto.MPlayer.encode(m.player, w.uint32(10).fork()).ldelim();
                if (m.openServerTime != null && Object.hasOwnProperty.call(m, "openServerTime")) w.uint32(16).int64(m.openServerTime);
                if (m.logToken != null && Object.hasOwnProperty.call(m, "logToken")) w.uint32(26).string(m.logToken);

                if (m.bagGirdList != null && m.bagGirdList.length) {
                  for (var i = 0; i < m.bagGirdList.length; ++i) $root.com.proto.MGrid.encode(m.bagGirdList[i], w.uint32(34).fork()).ldelim();
                }

                if (m.advertising != null && m.advertising.length) {
                  for (var i = 0; i < m.advertising.length; ++i) $root.com.proto.MAdvertising.encode(m.advertising[i], w.uint32(42).fork()).ldelim();
                }

                if (m.awaitOrder != null && m.awaitOrder.length) {
                  for (var i = 0; i < m.awaitOrder.length; ++i) $root.com.proto.MRecharge.encode(m.awaitOrder[i], w.uint32(50).fork()).ldelim();
                }

                if (m.activity != null && m.activity.length) {
                  for (var i = 0; i < m.activity.length; ++i) $root.com.proto.MActivity.encode(m.activity[i], w.uint32(58).fork()).ldelim();
                }

                if (m.analysisList != null && m.analysisList.length) {
                  for (var i = 0; i < m.analysisList.length; ++i) w.uint32(64).int32(m.analysisList[i]);
                }

                return w;
              };
              /**
               * Decodes a MLoginData message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MLoginData
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MLoginData} MLoginData
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MLoginData.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MLoginData();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.player = $root.com.proto.MPlayer.decode(r, r.uint32());
                        break;
                      }

                    case 2:
                      {
                        m.openServerTime = r.int64();
                        break;
                      }

                    case 3:
                      {
                        m.logToken = r.string();
                        break;
                      }

                    case 4:
                      {
                        if (!(m.bagGirdList && m.bagGirdList.length)) m.bagGirdList = [];
                        m.bagGirdList.push($root.com.proto.MGrid.decode(r, r.uint32()));
                        break;
                      }

                    case 5:
                      {
                        if (!(m.advertising && m.advertising.length)) m.advertising = [];
                        m.advertising.push($root.com.proto.MAdvertising.decode(r, r.uint32()));
                        break;
                      }

                    case 6:
                      {
                        if (!(m.awaitOrder && m.awaitOrder.length)) m.awaitOrder = [];
                        m.awaitOrder.push($root.com.proto.MRecharge.decode(r, r.uint32()));
                        break;
                      }

                    case 7:
                      {
                        if (!(m.activity && m.activity.length)) m.activity = [];
                        m.activity.push($root.com.proto.MActivity.decode(r, r.uint32()));
                        break;
                      }

                    case 8:
                      {
                        if (!(m.analysisList && m.analysisList.length)) m.analysisList = [];

                        if ((t & 7) === 2) {
                          var c2 = r.uint32() + r.pos;

                          while (r.pos < c2) m.analysisList.push(r.int32());
                        } else m.analysisList.push(r.int32());

                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MLoginData;
            }();

            proto.Msg_3001_ = function () {
              /**
               * Properties of a Msg_3001_.
               * @memberof com.proto
               * @interface IMsg_3001_
               * @property {com.proto.IMPlayer|null} [player] Msg_3001_ player
               */

              /**
               * Constructs a new Msg_3001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_3001_.
               * @implements IMsg_3001_
               * @constructor
               * @param {com.proto.IMsg_3001_=} [p] Properties to set
               */
              function Msg_3001_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3001_ player.
               * @member {com.proto.IMPlayer|null|undefined} player
               * @memberof com.proto.Msg_3001_
               * @instance
               */


              Msg_3001_.prototype.player = null;
              /**
               * Creates a new Msg_3001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3001_
               * @static
               * @param {com.proto.IMsg_3001_=} [properties] Properties to set
               * @returns {com.proto.Msg_3001_} Msg_3001_ instance
               */

              Msg_3001_.create = function create(properties) {
                return new Msg_3001_(properties);
              };
              /**
               * Encodes the specified Msg_3001_ message. Does not implicitly {@link com.proto.Msg_3001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3001_
               * @static
               * @param {com.proto.IMsg_3001_} m Msg_3001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.player != null && Object.hasOwnProperty.call(m, "player")) $root.com.proto.MPlayer.encode(m.player, w.uint32(10).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_3001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3001_} Msg_3001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.player = $root.com.proto.MPlayer.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3001_;
            }();

            proto.Msg_3002 = function () {
              /**
               * Properties of a Msg_3002.
               * @memberof com.proto
               * @interface IMsg_3002
               * @property {com.proto.IMPlayer|null} [player] Msg_3002 player
               */

              /**
               * Constructs a new Msg_3002.
               * @memberof com.proto
               * @classdesc Represents a Msg_3002.
               * @implements IMsg_3002
               * @constructor
               * @param {com.proto.IMsg_3002=} [p] Properties to set
               */
              function Msg_3002(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3002 player.
               * @member {com.proto.IMPlayer|null|undefined} player
               * @memberof com.proto.Msg_3002
               * @instance
               */


              Msg_3002.prototype.player = null;
              /**
               * Creates a new Msg_3002 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3002
               * @static
               * @param {com.proto.IMsg_3002=} [properties] Properties to set
               * @returns {com.proto.Msg_3002} Msg_3002 instance
               */

              Msg_3002.create = function create(properties) {
                return new Msg_3002(properties);
              };
              /**
               * Encodes the specified Msg_3002 message. Does not implicitly {@link com.proto.Msg_3002.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3002
               * @static
               * @param {com.proto.IMsg_3002} m Msg_3002 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3002.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.player != null && Object.hasOwnProperty.call(m, "player")) $root.com.proto.MPlayer.encode(m.player, w.uint32(10).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_3002 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3002
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3002} Msg_3002
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3002.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3002();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.player = $root.com.proto.MPlayer.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3002;
            }();

            proto.Msg_3003 = function () {
              /**
               * Properties of a Msg_3003.
               * @memberof com.proto
               * @interface IMsg_3003
               */

              /**
               * Constructs a new Msg_3003.
               * @memberof com.proto
               * @classdesc Represents a Msg_3003.
               * @implements IMsg_3003
               * @constructor
               * @param {com.proto.IMsg_3003=} [p] Properties to set
               */
              function Msg_3003(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_3003 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3003
               * @static
               * @param {com.proto.IMsg_3003=} [properties] Properties to set
               * @returns {com.proto.Msg_3003} Msg_3003 instance
               */


              Msg_3003.create = function create(properties) {
                return new Msg_3003(properties);
              };
              /**
               * Encodes the specified Msg_3003 message. Does not implicitly {@link com.proto.Msg_3003.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3003
               * @static
               * @param {com.proto.IMsg_3003} m Msg_3003 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3003.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_3003 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3003
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3003} Msg_3003
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3003.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3003();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3003;
            }();

            proto.Msg_3003_ = function () {
              /**
               * Properties of a Msg_3003_.
               * @memberof com.proto
               * @interface IMsg_3003_
               * @property {string|null} [logToken] Msg_3003_ logToken
               */

              /**
               * Constructs a new Msg_3003_.
               * @memberof com.proto
               * @classdesc Represents a Msg_3003_.
               * @implements IMsg_3003_
               * @constructor
               * @param {com.proto.IMsg_3003_=} [p] Properties to set
               */
              function Msg_3003_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3003_ logToken.
               * @member {string} logToken
               * @memberof com.proto.Msg_3003_
               * @instance
               */


              Msg_3003_.prototype.logToken = "";
              /**
               * Creates a new Msg_3003_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3003_
               * @static
               * @param {com.proto.IMsg_3003_=} [properties] Properties to set
               * @returns {com.proto.Msg_3003_} Msg_3003_ instance
               */

              Msg_3003_.create = function create(properties) {
                return new Msg_3003_(properties);
              };
              /**
               * Encodes the specified Msg_3003_ message. Does not implicitly {@link com.proto.Msg_3003_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3003_
               * @static
               * @param {com.proto.IMsg_3003_} m Msg_3003_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3003_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.logToken != null && Object.hasOwnProperty.call(m, "logToken")) w.uint32(10).string(m.logToken);
                return w;
              };
              /**
               * Decodes a Msg_3003_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3003_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3003_} Msg_3003_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3003_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3003_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.logToken = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3003_;
            }();

            proto.Msg_3004 = function () {
              /**
               * Properties of a Msg_3004.
               * @memberof com.proto
               * @interface IMsg_3004
               * @property {string|null} [code] Msg_3004 code
               */

              /**
               * Constructs a new Msg_3004.
               * @memberof com.proto
               * @classdesc Represents a Msg_3004.
               * @implements IMsg_3004
               * @constructor
               * @param {com.proto.IMsg_3004=} [p] Properties to set
               */
              function Msg_3004(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3004 code.
               * @member {string} code
               * @memberof com.proto.Msg_3004
               * @instance
               */


              Msg_3004.prototype.code = "";
              /**
               * Creates a new Msg_3004 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3004
               * @static
               * @param {com.proto.IMsg_3004=} [properties] Properties to set
               * @returns {com.proto.Msg_3004} Msg_3004 instance
               */

              Msg_3004.create = function create(properties) {
                return new Msg_3004(properties);
              };
              /**
               * Encodes the specified Msg_3004 message. Does not implicitly {@link com.proto.Msg_3004.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3004
               * @static
               * @param {com.proto.IMsg_3004} m Msg_3004 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3004.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.code != null && Object.hasOwnProperty.call(m, "code")) w.uint32(10).string(m.code);
                return w;
              };
              /**
               * Decodes a Msg_3004 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3004
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3004} Msg_3004
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3004.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3004();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.code = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3004;
            }();

            proto.Msg_3004_ = function () {
              /**
               * Properties of a Msg_3004_.
               * @memberof com.proto
               * @interface IMsg_3004_
               */

              /**
               * Constructs a new Msg_3004_.
               * @memberof com.proto
               * @classdesc Represents a Msg_3004_.
               * @implements IMsg_3004_
               * @constructor
               * @param {com.proto.IMsg_3004_=} [p] Properties to set
               */
              function Msg_3004_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_3004_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3004_
               * @static
               * @param {com.proto.IMsg_3004_=} [properties] Properties to set
               * @returns {com.proto.Msg_3004_} Msg_3004_ instance
               */


              Msg_3004_.create = function create(properties) {
                return new Msg_3004_(properties);
              };
              /**
               * Encodes the specified Msg_3004_ message. Does not implicitly {@link com.proto.Msg_3004_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3004_
               * @static
               * @param {com.proto.IMsg_3004_} m Msg_3004_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3004_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_3004_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3004_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3004_} Msg_3004_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3004_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3004_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3004_;
            }();

            proto.Msg_3005_ = function () {
              /**
               * Properties of a Msg_3005_.
               * @memberof com.proto
               * @interface IMsg_3005_
               */

              /**
               * Constructs a new Msg_3005_.
               * @memberof com.proto
               * @classdesc Represents a Msg_3005_.
               * @implements IMsg_3005_
               * @constructor
               * @param {com.proto.IMsg_3005_=} [p] Properties to set
               */
              function Msg_3005_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_3005_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3005_
               * @static
               * @param {com.proto.IMsg_3005_=} [properties] Properties to set
               * @returns {com.proto.Msg_3005_} Msg_3005_ instance
               */


              Msg_3005_.create = function create(properties) {
                return new Msg_3005_(properties);
              };
              /**
               * Encodes the specified Msg_3005_ message. Does not implicitly {@link com.proto.Msg_3005_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3005_
               * @static
               * @param {com.proto.IMsg_3005_} m Msg_3005_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3005_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_3005_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3005_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3005_} Msg_3005_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3005_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3005_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3005_;
            }();

            proto.Msg_3006 = function () {
              /**
               * Properties of a Msg_3006.
               * @memberof com.proto
               * @interface IMsg_3006
               * @property {string|null} [name] Msg_3006 name
               */

              /**
               * Constructs a new Msg_3006.
               * @memberof com.proto
               * @classdesc Represents a Msg_3006.
               * @implements IMsg_3006
               * @constructor
               * @param {com.proto.IMsg_3006=} [p] Properties to set
               */
              function Msg_3006(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3006 name.
               * @member {string} name
               * @memberof com.proto.Msg_3006
               * @instance
               */


              Msg_3006.prototype.name = "";
              /**
               * Creates a new Msg_3006 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3006
               * @static
               * @param {com.proto.IMsg_3006=} [properties] Properties to set
               * @returns {com.proto.Msg_3006} Msg_3006 instance
               */

              Msg_3006.create = function create(properties) {
                return new Msg_3006(properties);
              };
              /**
               * Encodes the specified Msg_3006 message. Does not implicitly {@link com.proto.Msg_3006.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3006
               * @static
               * @param {com.proto.IMsg_3006} m Msg_3006 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3006.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(10).string(m.name);
                return w;
              };
              /**
               * Decodes a Msg_3006 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3006
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3006} Msg_3006
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3006.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3006();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.name = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3006;
            }();

            proto.Msg_3006_ = function () {
              /**
               * Properties of a Msg_3006_.
               * @memberof com.proto
               * @interface IMsg_3006_
               * @property {number|null} [state] Msg_3006_ state
               * @property {string|null} [name] Msg_3006_ name
               */

              /**
               * Constructs a new Msg_3006_.
               * @memberof com.proto
               * @classdesc Represents a Msg_3006_.
               * @implements IMsg_3006_
               * @constructor
               * @param {com.proto.IMsg_3006_=} [p] Properties to set
               */
              function Msg_3006_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3006_ state.
               * @member {number} state
               * @memberof com.proto.Msg_3006_
               * @instance
               */


              Msg_3006_.prototype.state = 0;
              /**
               * Msg_3006_ name.
               * @member {string} name
               * @memberof com.proto.Msg_3006_
               * @instance
               */

              Msg_3006_.prototype.name = "";
              /**
               * Creates a new Msg_3006_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3006_
               * @static
               * @param {com.proto.IMsg_3006_=} [properties] Properties to set
               * @returns {com.proto.Msg_3006_} Msg_3006_ instance
               */

              Msg_3006_.create = function create(properties) {
                return new Msg_3006_(properties);
              };
              /**
               * Encodes the specified Msg_3006_ message. Does not implicitly {@link com.proto.Msg_3006_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3006_
               * @static
               * @param {com.proto.IMsg_3006_} m Msg_3006_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3006_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.state != null && Object.hasOwnProperty.call(m, "state")) w.uint32(8).int32(m.state);
                if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(18).string(m.name);
                return w;
              };
              /**
               * Decodes a Msg_3006_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3006_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3006_} Msg_3006_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3006_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3006_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.state = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.name = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3006_;
            }();

            proto.Msg_3007 = function () {
              /**
               * Properties of a Msg_3007.
               * @memberof com.proto
               * @interface IMsg_3007
               * @property {number|null} [imageId] Msg_3007 imageId
               */

              /**
               * Constructs a new Msg_3007.
               * @memberof com.proto
               * @classdesc Represents a Msg_3007.
               * @implements IMsg_3007
               * @constructor
               * @param {com.proto.IMsg_3007=} [p] Properties to set
               */
              function Msg_3007(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3007 imageId.
               * @member {number} imageId
               * @memberof com.proto.Msg_3007
               * @instance
               */


              Msg_3007.prototype.imageId = 0;
              /**
               * Creates a new Msg_3007 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3007
               * @static
               * @param {com.proto.IMsg_3007=} [properties] Properties to set
               * @returns {com.proto.Msg_3007} Msg_3007 instance
               */

              Msg_3007.create = function create(properties) {
                return new Msg_3007(properties);
              };
              /**
               * Encodes the specified Msg_3007 message. Does not implicitly {@link com.proto.Msg_3007.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3007
               * @static
               * @param {com.proto.IMsg_3007} m Msg_3007 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3007.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.imageId != null && Object.hasOwnProperty.call(m, "imageId")) w.uint32(8).int32(m.imageId);
                return w;
              };
              /**
               * Decodes a Msg_3007 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3007
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3007} Msg_3007
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3007.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3007();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.imageId = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3007;
            }();

            proto.Msg_3007_ = function () {
              /**
               * Properties of a Msg_3007_.
               * @memberof com.proto
               * @interface IMsg_3007_
               * @property {number|null} [state] Msg_3007_ state
               * @property {number|null} [imageId] Msg_3007_ imageId
               */

              /**
               * Constructs a new Msg_3007_.
               * @memberof com.proto
               * @classdesc Represents a Msg_3007_.
               * @implements IMsg_3007_
               * @constructor
               * @param {com.proto.IMsg_3007_=} [p] Properties to set
               */
              function Msg_3007_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3007_ state.
               * @member {number} state
               * @memberof com.proto.Msg_3007_
               * @instance
               */


              Msg_3007_.prototype.state = 0;
              /**
               * Msg_3007_ imageId.
               * @member {number} imageId
               * @memberof com.proto.Msg_3007_
               * @instance
               */

              Msg_3007_.prototype.imageId = 0;
              /**
               * Creates a new Msg_3007_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3007_
               * @static
               * @param {com.proto.IMsg_3007_=} [properties] Properties to set
               * @returns {com.proto.Msg_3007_} Msg_3007_ instance
               */

              Msg_3007_.create = function create(properties) {
                return new Msg_3007_(properties);
              };
              /**
               * Encodes the specified Msg_3007_ message. Does not implicitly {@link com.proto.Msg_3007_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3007_
               * @static
               * @param {com.proto.IMsg_3007_} m Msg_3007_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3007_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.state != null && Object.hasOwnProperty.call(m, "state")) w.uint32(8).int32(m.state);
                if (m.imageId != null && Object.hasOwnProperty.call(m, "imageId")) w.uint32(16).int32(m.imageId);
                return w;
              };
              /**
               * Decodes a Msg_3007_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3007_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3007_} Msg_3007_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3007_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3007_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.state = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.imageId = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3007_;
            }();

            proto.MRecharge = function () {
              /**
               * Properties of a MRecharge.
               * @memberof com.proto
               * @interface IMRecharge
               * @property {number|Long|null} [oriderId] MRecharge oriderId
               * @property {number|Long|null} [uid] MRecharge uid
               * @property {string|null} [cpBillNo] MRecharge cpBillNo
               * @property {number|null} [subjectId] MRecharge subjectId
               */

              /**
               * Constructs a new MRecharge.
               * @memberof com.proto
               * @classdesc Represents a MRecharge.
               * @implements IMRecharge
               * @constructor
               * @param {com.proto.IMRecharge=} [p] Properties to set
               */
              function MRecharge(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MRecharge oriderId.
               * @member {number|Long} oriderId
               * @memberof com.proto.MRecharge
               * @instance
               */


              MRecharge.prototype.oriderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MRecharge uid.
               * @member {number|Long} uid
               * @memberof com.proto.MRecharge
               * @instance
               */

              MRecharge.prototype.uid = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MRecharge cpBillNo.
               * @member {string} cpBillNo
               * @memberof com.proto.MRecharge
               * @instance
               */

              MRecharge.prototype.cpBillNo = "";
              /**
               * MRecharge subjectId.
               * @member {number} subjectId
               * @memberof com.proto.MRecharge
               * @instance
               */

              MRecharge.prototype.subjectId = 0;
              /**
               * Creates a new MRecharge instance using the specified properties.
               * @function create
               * @memberof com.proto.MRecharge
               * @static
               * @param {com.proto.IMRecharge=} [properties] Properties to set
               * @returns {com.proto.MRecharge} MRecharge instance
               */

              MRecharge.create = function create(properties) {
                return new MRecharge(properties);
              };
              /**
               * Encodes the specified MRecharge message. Does not implicitly {@link com.proto.MRecharge.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MRecharge
               * @static
               * @param {com.proto.IMRecharge} m MRecharge message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MRecharge.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.oriderId != null && Object.hasOwnProperty.call(m, "oriderId")) w.uint32(8).int64(m.oriderId);
                if (m.uid != null && Object.hasOwnProperty.call(m, "uid")) w.uint32(16).int64(m.uid);
                if (m.cpBillNo != null && Object.hasOwnProperty.call(m, "cpBillNo")) w.uint32(26).string(m.cpBillNo);
                if (m.subjectId != null && Object.hasOwnProperty.call(m, "subjectId")) w.uint32(32).int32(m.subjectId);
                return w;
              };
              /**
               * Decodes a MRecharge message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MRecharge
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MRecharge} MRecharge
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MRecharge.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MRecharge();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.oriderId = r.int64();
                        break;
                      }

                    case 2:
                      {
                        m.uid = r.int64();
                        break;
                      }

                    case 3:
                      {
                        m.cpBillNo = r.string();
                        break;
                      }

                    case 4:
                      {
                        m.subjectId = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MRecharge;
            }();

            proto.Msg_41000_ = function () {
              /**
               * Properties of a Msg_41000_.
               * @memberof com.proto
               * @interface IMsg_41000_
               * @property {com.proto.IMRecharge|null} [recharge] Msg_41000_ recharge
               */

              /**
               * Constructs a new Msg_41000_.
               * @memberof com.proto
               * @classdesc Represents a Msg_41000_.
               * @implements IMsg_41000_
               * @constructor
               * @param {com.proto.IMsg_41000_=} [p] Properties to set
               */
              function Msg_41000_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_41000_ recharge.
               * @member {com.proto.IMRecharge|null|undefined} recharge
               * @memberof com.proto.Msg_41000_
               * @instance
               */


              Msg_41000_.prototype.recharge = null;
              /**
               * Creates a new Msg_41000_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_41000_
               * @static
               * @param {com.proto.IMsg_41000_=} [properties] Properties to set
               * @returns {com.proto.Msg_41000_} Msg_41000_ instance
               */

              Msg_41000_.create = function create(properties) {
                return new Msg_41000_(properties);
              };
              /**
               * Encodes the specified Msg_41000_ message. Does not implicitly {@link com.proto.Msg_41000_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_41000_
               * @static
               * @param {com.proto.IMsg_41000_} m Msg_41000_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_41000_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.recharge != null && Object.hasOwnProperty.call(m, "recharge")) $root.com.proto.MRecharge.encode(m.recharge, w.uint32(10).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_41000_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_41000_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_41000_} Msg_41000_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_41000_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_41000_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.recharge = $root.com.proto.MRecharge.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_41000_;
            }();

            proto.Msg_41001 = function () {
              /**
               * Properties of a Msg_41001.
               * @memberof com.proto
               * @interface IMsg_41001
               * @property {number|Long|null} [oriderId] Msg_41001 oriderId
               */

              /**
               * Constructs a new Msg_41001.
               * @memberof com.proto
               * @classdesc Represents a Msg_41001.
               * @implements IMsg_41001
               * @constructor
               * @param {com.proto.IMsg_41001=} [p] Properties to set
               */
              function Msg_41001(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_41001 oriderId.
               * @member {number|Long} oriderId
               * @memberof com.proto.Msg_41001
               * @instance
               */


              Msg_41001.prototype.oriderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new Msg_41001 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_41001
               * @static
               * @param {com.proto.IMsg_41001=} [properties] Properties to set
               * @returns {com.proto.Msg_41001} Msg_41001 instance
               */

              Msg_41001.create = function create(properties) {
                return new Msg_41001(properties);
              };
              /**
               * Encodes the specified Msg_41001 message. Does not implicitly {@link com.proto.Msg_41001.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_41001
               * @static
               * @param {com.proto.IMsg_41001} m Msg_41001 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_41001.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.oriderId != null && Object.hasOwnProperty.call(m, "oriderId")) w.uint32(8).int64(m.oriderId);
                return w;
              };
              /**
               * Decodes a Msg_41001 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_41001
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_41001} Msg_41001
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_41001.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_41001();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.oriderId = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_41001;
            }();

            proto.Msg_41001_ = function () {
              /**
               * Properties of a Msg_41001_.
               * @memberof com.proto
               * @interface IMsg_41001_
               * @property {number|Long|null} [oriderId] Msg_41001_ oriderId
               */

              /**
               * Constructs a new Msg_41001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_41001_.
               * @implements IMsg_41001_
               * @constructor
               * @param {com.proto.IMsg_41001_=} [p] Properties to set
               */
              function Msg_41001_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_41001_ oriderId.
               * @member {number|Long} oriderId
               * @memberof com.proto.Msg_41001_
               * @instance
               */


              Msg_41001_.prototype.oriderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new Msg_41001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_41001_
               * @static
               * @param {com.proto.IMsg_41001_=} [properties] Properties to set
               * @returns {com.proto.Msg_41001_} Msg_41001_ instance
               */

              Msg_41001_.create = function create(properties) {
                return new Msg_41001_(properties);
              };
              /**
               * Encodes the specified Msg_41001_ message. Does not implicitly {@link com.proto.Msg_41001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_41001_
               * @static
               * @param {com.proto.IMsg_41001_} m Msg_41001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_41001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.oriderId != null && Object.hasOwnProperty.call(m, "oriderId")) w.uint32(8).int64(m.oriderId);
                return w;
              };
              /**
               * Decodes a Msg_41001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_41001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_41001_} Msg_41001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_41001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_41001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.oriderId = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_41001_;
            }();

            proto.MModule = function () {
              /**
               * Properties of a MModule.
               * @memberof com.proto
               * @interface IMModule
               * @property {number|null} [type] MModule type
               * @property {string|null} [moduleData] MModule moduleData
               */

              /**
               * Constructs a new MModule.
               * @memberof com.proto
               * @classdesc Represents a MModule.
               * @implements IMModule
               * @constructor
               * @param {com.proto.IMModule=} [p] Properties to set
               */
              function MModule(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MModule type.
               * @member {number} type
               * @memberof com.proto.MModule
               * @instance
               */


              MModule.prototype.type = 0;
              /**
               * MModule moduleData.
               * @member {string} moduleData
               * @memberof com.proto.MModule
               * @instance
               */

              MModule.prototype.moduleData = "";
              /**
               * Creates a new MModule instance using the specified properties.
               * @function create
               * @memberof com.proto.MModule
               * @static
               * @param {com.proto.IMModule=} [properties] Properties to set
               * @returns {com.proto.MModule} MModule instance
               */

              MModule.create = function create(properties) {
                return new MModule(properties);
              };
              /**
               * Encodes the specified MModule message. Does not implicitly {@link com.proto.MModule.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MModule
               * @static
               * @param {com.proto.IMModule} m MModule message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MModule.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(8).int32(m.type);
                if (m.moduleData != null && Object.hasOwnProperty.call(m, "moduleData")) w.uint32(18).string(m.moduleData);
                return w;
              };
              /**
               * Decodes a MModule message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MModule
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MModule} MModule
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MModule.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MModule();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.type = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.moduleData = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MModule;
            }();

            proto.Msg_4001 = function () {
              /**
               * Properties of a Msg_4001.
               * @memberof com.proto
               * @interface IMsg_4001
               * @property {Array.<com.proto.IMModule>|null} [module] Msg_4001 module
               */

              /**
               * Constructs a new Msg_4001.
               * @memberof com.proto
               * @classdesc Represents a Msg_4001.
               * @implements IMsg_4001
               * @constructor
               * @param {com.proto.IMsg_4001=} [p] Properties to set
               */
              function Msg_4001(p) {
                this.module = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_4001 module.
               * @member {Array.<com.proto.IMModule>} module
               * @memberof com.proto.Msg_4001
               * @instance
               */


              Msg_4001.prototype.module = $util.emptyArray;
              /**
               * Creates a new Msg_4001 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_4001
               * @static
               * @param {com.proto.IMsg_4001=} [properties] Properties to set
               * @returns {com.proto.Msg_4001} Msg_4001 instance
               */

              Msg_4001.create = function create(properties) {
                return new Msg_4001(properties);
              };
              /**
               * Encodes the specified Msg_4001 message. Does not implicitly {@link com.proto.Msg_4001.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_4001
               * @static
               * @param {com.proto.IMsg_4001} m Msg_4001 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_4001.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.module != null && m.module.length) {
                  for (var i = 0; i < m.module.length; ++i) $root.com.proto.MModule.encode(m.module[i], w.uint32(10).fork()).ldelim();
                }

                return w;
              };
              /**
               * Decodes a Msg_4001 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_4001
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_4001} Msg_4001
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_4001.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_4001();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.module && m.module.length)) m.module = [];
                        m.module.push($root.com.proto.MModule.decode(r, r.uint32()));
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_4001;
            }();

            proto.Msg_4001_ = function () {
              /**
               * Properties of a Msg_4001_.
               * @memberof com.proto
               * @interface IMsg_4001_
               */

              /**
               * Constructs a new Msg_4001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_4001_.
               * @implements IMsg_4001_
               * @constructor
               * @param {com.proto.IMsg_4001_=} [p] Properties to set
               */
              function Msg_4001_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_4001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_4001_
               * @static
               * @param {com.proto.IMsg_4001_=} [properties] Properties to set
               * @returns {com.proto.Msg_4001_} Msg_4001_ instance
               */


              Msg_4001_.create = function create(properties) {
                return new Msg_4001_(properties);
              };
              /**
               * Encodes the specified Msg_4001_ message. Does not implicitly {@link com.proto.Msg_4001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_4001_
               * @static
               * @param {com.proto.IMsg_4001_} m Msg_4001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_4001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_4001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_4001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_4001_} Msg_4001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_4001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_4001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_4001_;
            }();

            proto.Msg_4002 = function () {
              /**
               * Properties of a Msg_4002.
               * @memberof com.proto
               * @interface IMsg_4002
               * @property {Array.<number>|null} [types] Msg_4002 types
               */

              /**
               * Constructs a new Msg_4002.
               * @memberof com.proto
               * @classdesc Represents a Msg_4002.
               * @implements IMsg_4002
               * @constructor
               * @param {com.proto.IMsg_4002=} [p] Properties to set
               */
              function Msg_4002(p) {
                this.types = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_4002 types.
               * @member {Array.<number>} types
               * @memberof com.proto.Msg_4002
               * @instance
               */


              Msg_4002.prototype.types = $util.emptyArray;
              /**
               * Creates a new Msg_4002 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_4002
               * @static
               * @param {com.proto.IMsg_4002=} [properties] Properties to set
               * @returns {com.proto.Msg_4002} Msg_4002 instance
               */

              Msg_4002.create = function create(properties) {
                return new Msg_4002(properties);
              };
              /**
               * Encodes the specified Msg_4002 message. Does not implicitly {@link com.proto.Msg_4002.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_4002
               * @static
               * @param {com.proto.IMsg_4002} m Msg_4002 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_4002.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.types != null && m.types.length) {
                  for (var i = 0; i < m.types.length; ++i) w.uint32(8).int32(m.types[i]);
                }

                return w;
              };
              /**
               * Decodes a Msg_4002 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_4002
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_4002} Msg_4002
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_4002.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_4002();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.types && m.types.length)) m.types = [];

                        if ((t & 7) === 2) {
                          var c2 = r.uint32() + r.pos;

                          while (r.pos < c2) m.types.push(r.int32());
                        } else m.types.push(r.int32());

                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_4002;
            }();

            proto.Msg_4002_ = function () {
              /**
               * Properties of a Msg_4002_.
               * @memberof com.proto
               * @interface IMsg_4002_
               * @property {Array.<com.proto.IMModule>|null} [module] Msg_4002_ module
               */

              /**
               * Constructs a new Msg_4002_.
               * @memberof com.proto
               * @classdesc Represents a Msg_4002_.
               * @implements IMsg_4002_
               * @constructor
               * @param {com.proto.IMsg_4002_=} [p] Properties to set
               */
              function Msg_4002_(p) {
                this.module = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_4002_ module.
               * @member {Array.<com.proto.IMModule>} module
               * @memberof com.proto.Msg_4002_
               * @instance
               */


              Msg_4002_.prototype.module = $util.emptyArray;
              /**
               * Creates a new Msg_4002_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_4002_
               * @static
               * @param {com.proto.IMsg_4002_=} [properties] Properties to set
               * @returns {com.proto.Msg_4002_} Msg_4002_ instance
               */

              Msg_4002_.create = function create(properties) {
                return new Msg_4002_(properties);
              };
              /**
               * Encodes the specified Msg_4002_ message. Does not implicitly {@link com.proto.Msg_4002_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_4002_
               * @static
               * @param {com.proto.IMsg_4002_} m Msg_4002_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_4002_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.module != null && m.module.length) {
                  for (var i = 0; i < m.module.length; ++i) $root.com.proto.MModule.encode(m.module[i], w.uint32(10).fork()).ldelim();
                }

                return w;
              };
              /**
               * Decodes a Msg_4002_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_4002_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_4002_} Msg_4002_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_4002_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_4002_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.module && m.module.length)) m.module = [];
                        m.module.push($root.com.proto.MModule.decode(r, r.uint32()));
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_4002_;
            }();

            proto.Msg_4003_ = function () {
              /**
               * Properties of a Msg_4003_.
               * @memberof com.proto
               * @interface IMsg_4003_
               * @property {Array.<number>|null} [analysisList] Msg_4003_ analysisList
               */

              /**
               * Constructs a new Msg_4003_.
               * @memberof com.proto
               * @classdesc Represents a Msg_4003_.
               * @implements IMsg_4003_
               * @constructor
               * @param {com.proto.IMsg_4003_=} [p] Properties to set
               */
              function Msg_4003_(p) {
                this.analysisList = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_4003_ analysisList.
               * @member {Array.<number>} analysisList
               * @memberof com.proto.Msg_4003_
               * @instance
               */


              Msg_4003_.prototype.analysisList = $util.emptyArray;
              /**
               * Creates a new Msg_4003_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_4003_
               * @static
               * @param {com.proto.IMsg_4003_=} [properties] Properties to set
               * @returns {com.proto.Msg_4003_} Msg_4003_ instance
               */

              Msg_4003_.create = function create(properties) {
                return new Msg_4003_(properties);
              };
              /**
               * Encodes the specified Msg_4003_ message. Does not implicitly {@link com.proto.Msg_4003_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_4003_
               * @static
               * @param {com.proto.IMsg_4003_} m Msg_4003_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_4003_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.analysisList != null && m.analysisList.length) {
                  for (var i = 0; i < m.analysisList.length; ++i) w.uint32(8).int32(m.analysisList[i]);
                }

                return w;
              };
              /**
               * Decodes a Msg_4003_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_4003_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_4003_} Msg_4003_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_4003_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_4003_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.analysisList && m.analysisList.length)) m.analysisList = [];

                        if ((t & 7) === 2) {
                          var c2 = r.uint32() + r.pos;

                          while (r.pos < c2) m.analysisList.push(r.int32());
                        } else m.analysisList.push(r.int32());

                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_4003_;
            }();

            proto.MRankData = function () {
              /**
               * Properties of a MRankData.
               * @memberof com.proto
               * @interface IMRankData
               * @property {number|null} [sysId] MRankData sysId
               * @property {number|null} [rank] MRankData rank
               * @property {number|Long|null} [id] MRankData id
               * @property {string|null} [name] MRankData name
               * @property {number|Long|null} [score] MRankData score
               * @property {number|null} [imageId] MRankData imageId
               */

              /**
               * Constructs a new MRankData.
               * @memberof com.proto
               * @classdesc Represents a MRankData.
               * @implements IMRankData
               * @constructor
               * @param {com.proto.IMRankData=} [p] Properties to set
               */
              function MRankData(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MRankData sysId.
               * @member {number} sysId
               * @memberof com.proto.MRankData
               * @instance
               */


              MRankData.prototype.sysId = 0;
              /**
               * MRankData rank.
               * @member {number} rank
               * @memberof com.proto.MRankData
               * @instance
               */

              MRankData.prototype.rank = 0;
              /**
               * MRankData id.
               * @member {number|Long} id
               * @memberof com.proto.MRankData
               * @instance
               */

              MRankData.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MRankData name.
               * @member {string} name
               * @memberof com.proto.MRankData
               * @instance
               */

              MRankData.prototype.name = "";
              /**
               * MRankData score.
               * @member {number|Long} score
               * @memberof com.proto.MRankData
               * @instance
               */

              MRankData.prototype.score = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MRankData imageId.
               * @member {number} imageId
               * @memberof com.proto.MRankData
               * @instance
               */

              MRankData.prototype.imageId = 0;
              /**
               * Creates a new MRankData instance using the specified properties.
               * @function create
               * @memberof com.proto.MRankData
               * @static
               * @param {com.proto.IMRankData=} [properties] Properties to set
               * @returns {com.proto.MRankData} MRankData instance
               */

              MRankData.create = function create(properties) {
                return new MRankData(properties);
              };
              /**
               * Encodes the specified MRankData message. Does not implicitly {@link com.proto.MRankData.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MRankData
               * @static
               * @param {com.proto.IMRankData} m MRankData message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MRankData.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.sysId != null && Object.hasOwnProperty.call(m, "sysId")) w.uint32(8).int32(m.sysId);
                if (m.rank != null && Object.hasOwnProperty.call(m, "rank")) w.uint32(16).int32(m.rank);
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(24).int64(m.id);
                if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(34).string(m.name);
                if (m.score != null && Object.hasOwnProperty.call(m, "score")) w.uint32(40).int64(m.score);
                if (m.imageId != null && Object.hasOwnProperty.call(m, "imageId")) w.uint32(48).int32(m.imageId);
                return w;
              };
              /**
               * Decodes a MRankData message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MRankData
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MRankData} MRankData
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MRankData.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MRankData();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.sysId = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.rank = r.int32();
                        break;
                      }

                    case 3:
                      {
                        m.id = r.int64();
                        break;
                      }

                    case 4:
                      {
                        m.name = r.string();
                        break;
                      }

                    case 5:
                      {
                        m.score = r.int64();
                        break;
                      }

                    case 6:
                      {
                        m.imageId = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MRankData;
            }();

            proto.Msg_9001 = function () {
              /**
               * Properties of a Msg_9001.
               * @memberof com.proto
               * @interface IMsg_9001
               * @property {number|null} [sysId] Msg_9001 sysId
               * @property {number|Long|null} [score] Msg_9001 score
               */

              /**
               * Constructs a new Msg_9001.
               * @memberof com.proto
               * @classdesc Represents a Msg_9001.
               * @implements IMsg_9001
               * @constructor
               * @param {com.proto.IMsg_9001=} [p] Properties to set
               */
              function Msg_9001(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_9001 sysId.
               * @member {number} sysId
               * @memberof com.proto.Msg_9001
               * @instance
               */


              Msg_9001.prototype.sysId = 0;
              /**
               * Msg_9001 score.
               * @member {number|Long} score
               * @memberof com.proto.Msg_9001
               * @instance
               */

              Msg_9001.prototype.score = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new Msg_9001 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_9001
               * @static
               * @param {com.proto.IMsg_9001=} [properties] Properties to set
               * @returns {com.proto.Msg_9001} Msg_9001 instance
               */

              Msg_9001.create = function create(properties) {
                return new Msg_9001(properties);
              };
              /**
               * Encodes the specified Msg_9001 message. Does not implicitly {@link com.proto.Msg_9001.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_9001
               * @static
               * @param {com.proto.IMsg_9001} m Msg_9001 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_9001.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.sysId != null && Object.hasOwnProperty.call(m, "sysId")) w.uint32(8).int32(m.sysId);
                if (m.score != null && Object.hasOwnProperty.call(m, "score")) w.uint32(16).int64(m.score);
                return w;
              };
              /**
               * Decodes a Msg_9001 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_9001
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_9001} Msg_9001
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_9001.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_9001();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.sysId = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.score = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_9001;
            }();

            proto.Msg_9002 = function () {
              /**
               * Properties of a Msg_9002.
               * @memberof com.proto
               * @interface IMsg_9002
               * @property {number|null} [sysId] Msg_9002 sysId
               * @property {number|null} [page] Msg_9002 page
               */

              /**
               * Constructs a new Msg_9002.
               * @memberof com.proto
               * @classdesc Represents a Msg_9002.
               * @implements IMsg_9002
               * @constructor
               * @param {com.proto.IMsg_9002=} [p] Properties to set
               */
              function Msg_9002(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_9002 sysId.
               * @member {number} sysId
               * @memberof com.proto.Msg_9002
               * @instance
               */


              Msg_9002.prototype.sysId = 0;
              /**
               * Msg_9002 page.
               * @member {number} page
               * @memberof com.proto.Msg_9002
               * @instance
               */

              Msg_9002.prototype.page = 0;
              /**
               * Creates a new Msg_9002 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_9002
               * @static
               * @param {com.proto.IMsg_9002=} [properties] Properties to set
               * @returns {com.proto.Msg_9002} Msg_9002 instance
               */

              Msg_9002.create = function create(properties) {
                return new Msg_9002(properties);
              };
              /**
               * Encodes the specified Msg_9002 message. Does not implicitly {@link com.proto.Msg_9002.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_9002
               * @static
               * @param {com.proto.IMsg_9002} m Msg_9002 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_9002.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.sysId != null && Object.hasOwnProperty.call(m, "sysId")) w.uint32(8).int32(m.sysId);
                if (m.page != null && Object.hasOwnProperty.call(m, "page")) w.uint32(16).int32(m.page);
                return w;
              };
              /**
               * Decodes a Msg_9002 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_9002
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_9002} Msg_9002
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_9002.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_9002();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.sysId = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.page = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_9002;
            }();

            proto.Msg_9002_ = function () {
              /**
               * Properties of a Msg_9002_.
               * @memberof com.proto
               * @interface IMsg_9002_
               * @property {number|null} [sysId] Msg_9002_ sysId
               * @property {Array.<com.proto.IMRankData>|null} [rankData] Msg_9002_ rankData
               * @property {number|null} [currRank] Msg_9002_ currRank
               * @property {number|Long|null} [currScore] Msg_9002_ currScore
               */

              /**
               * Constructs a new Msg_9002_.
               * @memberof com.proto
               * @classdesc Represents a Msg_9002_.
               * @implements IMsg_9002_
               * @constructor
               * @param {com.proto.IMsg_9002_=} [p] Properties to set
               */
              function Msg_9002_(p) {
                this.rankData = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_9002_ sysId.
               * @member {number} sysId
               * @memberof com.proto.Msg_9002_
               * @instance
               */


              Msg_9002_.prototype.sysId = 0;
              /**
               * Msg_9002_ rankData.
               * @member {Array.<com.proto.IMRankData>} rankData
               * @memberof com.proto.Msg_9002_
               * @instance
               */

              Msg_9002_.prototype.rankData = $util.emptyArray;
              /**
               * Msg_9002_ currRank.
               * @member {number} currRank
               * @memberof com.proto.Msg_9002_
               * @instance
               */

              Msg_9002_.prototype.currRank = 0;
              /**
               * Msg_9002_ currScore.
               * @member {number|Long} currScore
               * @memberof com.proto.Msg_9002_
               * @instance
               */

              Msg_9002_.prototype.currScore = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new Msg_9002_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_9002_
               * @static
               * @param {com.proto.IMsg_9002_=} [properties] Properties to set
               * @returns {com.proto.Msg_9002_} Msg_9002_ instance
               */

              Msg_9002_.create = function create(properties) {
                return new Msg_9002_(properties);
              };
              /**
               * Encodes the specified Msg_9002_ message. Does not implicitly {@link com.proto.Msg_9002_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_9002_
               * @static
               * @param {com.proto.IMsg_9002_} m Msg_9002_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_9002_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.sysId != null && Object.hasOwnProperty.call(m, "sysId")) w.uint32(8).int32(m.sysId);

                if (m.rankData != null && m.rankData.length) {
                  for (var i = 0; i < m.rankData.length; ++i) $root.com.proto.MRankData.encode(m.rankData[i], w.uint32(18).fork()).ldelim();
                }

                if (m.currRank != null && Object.hasOwnProperty.call(m, "currRank")) w.uint32(24).int32(m.currRank);
                if (m.currScore != null && Object.hasOwnProperty.call(m, "currScore")) w.uint32(32).int64(m.currScore);
                return w;
              };
              /**
               * Decodes a Msg_9002_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_9002_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_9002_} Msg_9002_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_9002_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_9002_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.sysId = r.int32();
                        break;
                      }

                    case 2:
                      {
                        if (!(m.rankData && m.rankData.length)) m.rankData = [];
                        m.rankData.push($root.com.proto.MRankData.decode(r, r.uint32()));
                        break;
                      }

                    case 3:
                      {
                        m.currRank = r.int32();
                        break;
                      }

                    case 4:
                      {
                        m.currScore = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_9002_;
            }();

            return proto;
          }();

          return com;
        }();

        module.exports = $root; // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
      }, function () {
        return {
          'protobufjs/minimal': __cjsMetaURL$1
        };
      });
    }
  };
});

System.register("chunks:///_virtual/proto_bundle.mjs_cjs=&original=.js", ['./proto_bundle.js', './cjs-loader.mjs'], function (exports, module) {
  var __cjsMetaURL, loader;

  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      var _setter = {};
      _setter.__cjsMetaURL = module.__cjsMetaURL;
      _setter.default = module.default;
      exports(_setter);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './proto_bundle.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./proto_bundle.js', module.meta.url);
      }

      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/proto.bundle.js", ['./cjs-loader.mjs', './minimal.js'], function (exports, module) {
  var loader, __cjsMetaURL$1;

  return {
    setters: [function (module) {
      loader = module.default;
    }, function (module) {
      __cjsMetaURL$1 = module.__cjsMetaURL;
    }],
    execute: function () {
      exports('default', void 0);

      var _cjsExports;

      var __cjsMetaURL = exports('__cjsMetaURL', module.meta.url);

      loader.define(__cjsMetaURL, function (exports$1, require, module, __filename, __dirname) {
        var $protobuf = require("protobufjs/minimal"); // Common aliases


        var $Reader = $protobuf.Reader,
            $Writer = $protobuf.Writer,
            $util = $protobuf.util; // Exported root namespace

        var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});

        $root.com = function () {
          /**
           * Namespace com.
           * @exports com
           * @namespace
           */
          var com = {};

          com.proto = function () {
            /**
             * Namespace proto.
             * @memberof com
             * @namespace
             */
            var proto = {};

            proto.MActivity = function () {
              /**
               * Properties of a MActivity.
               * @memberof com.proto
               * @interface IMActivity
               * @property {number|null} [id] MActivity id
               * @property {number|Long|null} [startTime] MActivity startTime
               * @property {number|Long|null} [previewTime] MActivity previewTime
               * @property {number|Long|null} [awardTime] MActivity awardTime
               * @property {number|Long|null} [endTime] MActivity endTime
               */

              /**
               * Constructs a new MActivity.
               * @memberof com.proto
               * @classdesc Represents a MActivity.
               * @implements IMActivity
               * @constructor
               * @param {com.proto.IMActivity=} [p] Properties to set
               */
              function MActivity(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MActivity id.
               * @member {number} id
               * @memberof com.proto.MActivity
               * @instance
               */


              MActivity.prototype.id = 0;
              /**
               * MActivity startTime.
               * @member {number|Long} startTime
               * @memberof com.proto.MActivity
               * @instance
               */

              MActivity.prototype.startTime = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MActivity previewTime.
               * @member {number|Long} previewTime
               * @memberof com.proto.MActivity
               * @instance
               */

              MActivity.prototype.previewTime = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MActivity awardTime.
               * @member {number|Long} awardTime
               * @memberof com.proto.MActivity
               * @instance
               */

              MActivity.prototype.awardTime = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MActivity endTime.
               * @member {number|Long} endTime
               * @memberof com.proto.MActivity
               * @instance
               */

              MActivity.prototype.endTime = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * Creates a new MActivity instance using the specified properties.
               * @function create
               * @memberof com.proto.MActivity
               * @static
               * @param {com.proto.IMActivity=} [properties] Properties to set
               * @returns {com.proto.MActivity} MActivity instance
               */

              MActivity.create = function create(properties) {
                return new MActivity(properties);
              };
              /**
               * Encodes the specified MActivity message. Does not implicitly {@link com.proto.MActivity.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MActivity
               * @static
               * @param {com.proto.IMActivity} m MActivity message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MActivity.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);
                if (m.startTime != null && Object.hasOwnProperty.call(m, "startTime")) w.uint32(16).int64(m.startTime);
                if (m.previewTime != null && Object.hasOwnProperty.call(m, "previewTime")) w.uint32(24).int64(m.previewTime);
                if (m.awardTime != null && Object.hasOwnProperty.call(m, "awardTime")) w.uint32(32).int64(m.awardTime);
                if (m.endTime != null && Object.hasOwnProperty.call(m, "endTime")) w.uint32(40).int64(m.endTime);
                return w;
              };
              /**
               * Decodes a MActivity message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MActivity
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MActivity} MActivity
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MActivity.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MActivity();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.startTime = r.int64();
                        break;
                      }

                    case 3:
                      {
                        m.previewTime = r.int64();
                        break;
                      }

                    case 4:
                      {
                        m.awardTime = r.int64();
                        break;
                      }

                    case 5:
                      {
                        m.endTime = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MActivity;
            }();

            proto.Msg_8000_ = function () {
              /**
               * Properties of a Msg_8000_.
               * @memberof com.proto
               * @interface IMsg_8000_
               * @property {com.proto.IMActivity|null} [activity] Msg_8000_ activity
               */

              /**
               * Constructs a new Msg_8000_.
               * @memberof com.proto
               * @classdesc Represents a Msg_8000_.
               * @implements IMsg_8000_
               * @constructor
               * @param {com.proto.IMsg_8000_=} [p] Properties to set
               */
              function Msg_8000_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_8000_ activity.
               * @member {com.proto.IMActivity|null|undefined} activity
               * @memberof com.proto.Msg_8000_
               * @instance
               */


              Msg_8000_.prototype.activity = null;
              /**
               * Creates a new Msg_8000_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_8000_
               * @static
               * @param {com.proto.IMsg_8000_=} [properties] Properties to set
               * @returns {com.proto.Msg_8000_} Msg_8000_ instance
               */

              Msg_8000_.create = function create(properties) {
                return new Msg_8000_(properties);
              };
              /**
               * Encodes the specified Msg_8000_ message. Does not implicitly {@link com.proto.Msg_8000_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_8000_
               * @static
               * @param {com.proto.IMsg_8000_} m Msg_8000_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_8000_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.activity != null && Object.hasOwnProperty.call(m, "activity")) $root.com.proto.MActivity.encode(m.activity, w.uint32(10).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_8000_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_8000_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_8000_} Msg_8000_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_8000_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_8000_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.activity = $root.com.proto.MActivity.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_8000_;
            }();

            proto.CMsg = function () {
              /**
               * Properties of a CMsg.
               * @memberof com.proto
               * @interface ICMsg
               * @property {number|null} [cmd] CMsg cmd
               * @property {Uint8Array|null} [body] CMsg body
               * @property {number|Long|null} [serverTime] CMsg serverTime
               */

              /**
               * Constructs a new CMsg.
               * @memberof com.proto
               * @classdesc Represents a CMsg.
               * @implements ICMsg
               * @constructor
               * @param {com.proto.ICMsg=} [p] Properties to set
               */
              function CMsg(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * CMsg cmd.
               * @member {number} cmd
               * @memberof com.proto.CMsg
               * @instance
               */


              CMsg.prototype.cmd = 0;
              /**
               * CMsg body.
               * @member {Uint8Array} body
               * @memberof com.proto.CMsg
               * @instance
               */

              CMsg.prototype.body = $util.newBuffer([]);
              /**
               * CMsg serverTime.
               * @member {number|Long} serverTime
               * @memberof com.proto.CMsg
               * @instance
               */

              CMsg.prototype.serverTime = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * Creates a new CMsg instance using the specified properties.
               * @function create
               * @memberof com.proto.CMsg
               * @static
               * @param {com.proto.ICMsg=} [properties] Properties to set
               * @returns {com.proto.CMsg} CMsg instance
               */

              CMsg.create = function create(properties) {
                return new CMsg(properties);
              };
              /**
               * Encodes the specified CMsg message. Does not implicitly {@link com.proto.CMsg.verify|verify} messages.
               * @function encode
               * @memberof com.proto.CMsg
               * @static
               * @param {com.proto.ICMsg} m CMsg message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              CMsg.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.cmd != null && Object.hasOwnProperty.call(m, "cmd")) w.uint32(8).int32(m.cmd);
                if (m.body != null && Object.hasOwnProperty.call(m, "body")) w.uint32(18).bytes(m.body);
                if (m.serverTime != null && Object.hasOwnProperty.call(m, "serverTime")) w.uint32(24).int64(m.serverTime);
                return w;
              };
              /**
               * Decodes a CMsg message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.CMsg
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.CMsg} CMsg
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              CMsg.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.CMsg();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.cmd = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.body = r.bytes();
                        break;
                      }

                    case 3:
                      {
                        m.serverTime = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return CMsg;
            }();

            proto.Msg_1001_ = function () {
              /**
               * Properties of a Msg_1001_.
               * @memberof com.proto
               * @interface IMsg_1001_
               * @property {string|null} [tipKey] Msg_1001_ tipKey
               * @property {Array.<string>|null} [paramValue] Msg_1001_ paramValue
               */

              /**
               * Constructs a new Msg_1001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_1001_.
               * @implements IMsg_1001_
               * @constructor
               * @param {com.proto.IMsg_1001_=} [p] Properties to set
               */
              function Msg_1001_(p) {
                this.paramValue = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_1001_ tipKey.
               * @member {string} tipKey
               * @memberof com.proto.Msg_1001_
               * @instance
               */


              Msg_1001_.prototype.tipKey = "";
              /**
               * Msg_1001_ paramValue.
               * @member {Array.<string>} paramValue
               * @memberof com.proto.Msg_1001_
               * @instance
               */

              Msg_1001_.prototype.paramValue = $util.emptyArray;
              /**
               * Creates a new Msg_1001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_1001_
               * @static
               * @param {com.proto.IMsg_1001_=} [properties] Properties to set
               * @returns {com.proto.Msg_1001_} Msg_1001_ instance
               */

              Msg_1001_.create = function create(properties) {
                return new Msg_1001_(properties);
              };
              /**
               * Encodes the specified Msg_1001_ message. Does not implicitly {@link com.proto.Msg_1001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_1001_
               * @static
               * @param {com.proto.IMsg_1001_} m Msg_1001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_1001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.tipKey != null && Object.hasOwnProperty.call(m, "tipKey")) w.uint32(10).string(m.tipKey);

                if (m.paramValue != null && m.paramValue.length) {
                  for (var i = 0; i < m.paramValue.length; ++i) w.uint32(18).string(m.paramValue[i]);
                }

                return w;
              };
              /**
               * Decodes a Msg_1001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_1001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_1001_} Msg_1001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_1001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_1001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.tipKey = r.string();
                        break;
                      }

                    case 2:
                      {
                        if (!(m.paramValue && m.paramValue.length)) m.paramValue = [];
                        m.paramValue.push(r.string());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_1001_;
            }();

            proto.Msg_1002 = function () {
              /**
               * Properties of a Msg_1002.
               * @memberof com.proto
               * @interface IMsg_1002
               */

              /**
               * Constructs a new Msg_1002.
               * @memberof com.proto
               * @classdesc Represents a Msg_1002.
               * @implements IMsg_1002
               * @constructor
               * @param {com.proto.IMsg_1002=} [p] Properties to set
               */
              function Msg_1002(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_1002 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_1002
               * @static
               * @param {com.proto.IMsg_1002=} [properties] Properties to set
               * @returns {com.proto.Msg_1002} Msg_1002 instance
               */


              Msg_1002.create = function create(properties) {
                return new Msg_1002(properties);
              };
              /**
               * Encodes the specified Msg_1002 message. Does not implicitly {@link com.proto.Msg_1002.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_1002
               * @static
               * @param {com.proto.IMsg_1002} m Msg_1002 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_1002.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_1002 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_1002
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_1002} Msg_1002
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_1002.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_1002();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_1002;
            }();

            proto.Msg_1004 = function () {
              /**
               * Properties of a Msg_1004.
               * @memberof com.proto
               * @interface IMsg_1004
               * @property {string|null} [values] Msg_1004 values
               */

              /**
               * Constructs a new Msg_1004.
               * @memberof com.proto
               * @classdesc Represents a Msg_1004.
               * @implements IMsg_1004
               * @constructor
               * @param {com.proto.IMsg_1004=} [p] Properties to set
               */
              function Msg_1004(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_1004 values.
               * @member {string} values
               * @memberof com.proto.Msg_1004
               * @instance
               */


              Msg_1004.prototype.values = "";
              /**
               * Creates a new Msg_1004 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_1004
               * @static
               * @param {com.proto.IMsg_1004=} [properties] Properties to set
               * @returns {com.proto.Msg_1004} Msg_1004 instance
               */

              Msg_1004.create = function create(properties) {
                return new Msg_1004(properties);
              };
              /**
               * Encodes the specified Msg_1004 message. Does not implicitly {@link com.proto.Msg_1004.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_1004
               * @static
               * @param {com.proto.IMsg_1004} m Msg_1004 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_1004.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.values != null && Object.hasOwnProperty.call(m, "values")) w.uint32(10).string(m.values);
                return w;
              };
              /**
               * Decodes a Msg_1004 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_1004
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_1004} Msg_1004
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_1004.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_1004();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.values = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_1004;
            }();

            proto.MAdvertising = function () {
              /**
               * Properties of a MAdvertising.
               * @memberof com.proto
               * @interface IMAdvertising
               * @property {number|null} [id] MAdvertising id
               * @property {number|null} [useCount] MAdvertising useCount
               * @property {number|Long|null} [useTime] MAdvertising useTime
               */

              /**
               * Constructs a new MAdvertising.
               * @memberof com.proto
               * @classdesc Represents a MAdvertising.
               * @implements IMAdvertising
               * @constructor
               * @param {com.proto.IMAdvertising=} [p] Properties to set
               */
              function MAdvertising(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MAdvertising id.
               * @member {number} id
               * @memberof com.proto.MAdvertising
               * @instance
               */


              MAdvertising.prototype.id = 0;
              /**
               * MAdvertising useCount.
               * @member {number} useCount
               * @memberof com.proto.MAdvertising
               * @instance
               */

              MAdvertising.prototype.useCount = 0;
              /**
               * MAdvertising useTime.
               * @member {number|Long} useTime
               * @memberof com.proto.MAdvertising
               * @instance
               */

              MAdvertising.prototype.useTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new MAdvertising instance using the specified properties.
               * @function create
               * @memberof com.proto.MAdvertising
               * @static
               * @param {com.proto.IMAdvertising=} [properties] Properties to set
               * @returns {com.proto.MAdvertising} MAdvertising instance
               */

              MAdvertising.create = function create(properties) {
                return new MAdvertising(properties);
              };
              /**
               * Encodes the specified MAdvertising message. Does not implicitly {@link com.proto.MAdvertising.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MAdvertising
               * @static
               * @param {com.proto.IMAdvertising} m MAdvertising message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MAdvertising.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);
                if (m.useCount != null && Object.hasOwnProperty.call(m, "useCount")) w.uint32(16).int32(m.useCount);
                if (m.useTime != null && Object.hasOwnProperty.call(m, "useTime")) w.uint32(24).int64(m.useTime);
                return w;
              };
              /**
               * Decodes a MAdvertising message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MAdvertising
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MAdvertising} MAdvertising
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MAdvertising.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MAdvertising();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.useCount = r.int32();
                        break;
                      }

                    case 3:
                      {
                        m.useTime = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MAdvertising;
            }();

            proto.Msg_83000_ = function () {
              /**
               * Properties of a Msg_83000_.
               * @memberof com.proto
               * @interface IMsg_83000_
               * @property {com.proto.IMAdvertising|null} [advertising] Msg_83000_ advertising
               */

              /**
               * Constructs a new Msg_83000_.
               * @memberof com.proto
               * @classdesc Represents a Msg_83000_.
               * @implements IMsg_83000_
               * @constructor
               * @param {com.proto.IMsg_83000_=} [p] Properties to set
               */
              function Msg_83000_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_83000_ advertising.
               * @member {com.proto.IMAdvertising|null|undefined} advertising
               * @memberof com.proto.Msg_83000_
               * @instance
               */


              Msg_83000_.prototype.advertising = null;
              /**
               * Creates a new Msg_83000_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_83000_
               * @static
               * @param {com.proto.IMsg_83000_=} [properties] Properties to set
               * @returns {com.proto.Msg_83000_} Msg_83000_ instance
               */

              Msg_83000_.create = function create(properties) {
                return new Msg_83000_(properties);
              };
              /**
               * Encodes the specified Msg_83000_ message. Does not implicitly {@link com.proto.Msg_83000_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_83000_
               * @static
               * @param {com.proto.IMsg_83000_} m Msg_83000_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_83000_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.advertising != null && Object.hasOwnProperty.call(m, "advertising")) $root.com.proto.MAdvertising.encode(m.advertising, w.uint32(10).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_83000_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_83000_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_83000_} Msg_83000_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_83000_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_83000_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.advertising = $root.com.proto.MAdvertising.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_83000_;
            }();

            proto.Msg_83001_ = function () {
              /**
               * Properties of a Msg_83001_.
               * @memberof com.proto
               * @interface IMsg_83001_
               * @property {Array.<number>|null} [id] Msg_83001_ id
               */

              /**
               * Constructs a new Msg_83001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_83001_.
               * @implements IMsg_83001_
               * @constructor
               * @param {com.proto.IMsg_83001_=} [p] Properties to set
               */
              function Msg_83001_(p) {
                this.id = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_83001_ id.
               * @member {Array.<number>} id
               * @memberof com.proto.Msg_83001_
               * @instance
               */


              Msg_83001_.prototype.id = $util.emptyArray;
              /**
               * Creates a new Msg_83001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_83001_
               * @static
               * @param {com.proto.IMsg_83001_=} [properties] Properties to set
               * @returns {com.proto.Msg_83001_} Msg_83001_ instance
               */

              Msg_83001_.create = function create(properties) {
                return new Msg_83001_(properties);
              };
              /**
               * Encodes the specified Msg_83001_ message. Does not implicitly {@link com.proto.Msg_83001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_83001_
               * @static
               * @param {com.proto.IMsg_83001_} m Msg_83001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_83001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.id != null && m.id.length) {
                  for (var i = 0; i < m.id.length; ++i) w.uint32(8).int32(m.id[i]);
                }

                return w;
              };
              /**
               * Decodes a Msg_83001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_83001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_83001_} Msg_83001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_83001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_83001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.id && m.id.length)) m.id = [];

                        if ((t & 7) === 2) {
                          var c2 = r.uint32() + r.pos;

                          while (r.pos < c2) m.id.push(r.int32());
                        } else m.id.push(r.int32());

                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_83001_;
            }();

            proto.Msg_83002 = function () {
              /**
               * Properties of a Msg_83002.
               * @memberof com.proto
               * @interface IMsg_83002
               * @property {number|null} [id] Msg_83002 id
               */

              /**
               * Constructs a new Msg_83002.
               * @memberof com.proto
               * @classdesc Represents a Msg_83002.
               * @implements IMsg_83002
               * @constructor
               * @param {com.proto.IMsg_83002=} [p] Properties to set
               */
              function Msg_83002(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_83002 id.
               * @member {number} id
               * @memberof com.proto.Msg_83002
               * @instance
               */


              Msg_83002.prototype.id = 0;
              /**
               * Creates a new Msg_83002 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_83002
               * @static
               * @param {com.proto.IMsg_83002=} [properties] Properties to set
               * @returns {com.proto.Msg_83002} Msg_83002 instance
               */

              Msg_83002.create = function create(properties) {
                return new Msg_83002(properties);
              };
              /**
               * Encodes the specified Msg_83002 message. Does not implicitly {@link com.proto.Msg_83002.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_83002
               * @static
               * @param {com.proto.IMsg_83002} m Msg_83002 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_83002.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);
                return w;
              };
              /**
               * Decodes a Msg_83002 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_83002
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_83002} Msg_83002
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_83002.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_83002();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_83002;
            }();

            proto.Msg_83002_ = function () {
              /**
               * Properties of a Msg_83002_.
               * @memberof com.proto
               * @interface IMsg_83002_
               */

              /**
               * Constructs a new Msg_83002_.
               * @memberof com.proto
               * @classdesc Represents a Msg_83002_.
               * @implements IMsg_83002_
               * @constructor
               * @param {com.proto.IMsg_83002_=} [p] Properties to set
               */
              function Msg_83002_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_83002_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_83002_
               * @static
               * @param {com.proto.IMsg_83002_=} [properties] Properties to set
               * @returns {com.proto.Msg_83002_} Msg_83002_ instance
               */


              Msg_83002_.create = function create(properties) {
                return new Msg_83002_(properties);
              };
              /**
               * Encodes the specified Msg_83002_ message. Does not implicitly {@link com.proto.Msg_83002_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_83002_
               * @static
               * @param {com.proto.IMsg_83002_} m Msg_83002_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_83002_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_83002_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_83002_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_83002_} Msg_83002_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_83002_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_83002_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_83002_;
            }();

            proto.MGrid = function () {
              /**
               * Properties of a MGrid.
               * @memberof com.proto
               * @interface IMGrid
               * @property {number|null} [index] MGrid index
               * @property {number|null} [type] MGrid type
               * @property {number|null} [sysId] MGrid sysId
               * @property {number|null} [number] MGrid number
               * @property {number|Long|null} [startTime] MGrid startTime
               * @property {number|null} [soruce] MGrid soruce
               */

              /**
               * Constructs a new MGrid.
               * @memberof com.proto
               * @classdesc Represents a MGrid.
               * @implements IMGrid
               * @constructor
               * @param {com.proto.IMGrid=} [p] Properties to set
               */
              function MGrid(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MGrid index.
               * @member {number} index
               * @memberof com.proto.MGrid
               * @instance
               */


              MGrid.prototype.index = 0;
              /**
               * MGrid type.
               * @member {number} type
               * @memberof com.proto.MGrid
               * @instance
               */

              MGrid.prototype.type = 0;
              /**
               * MGrid sysId.
               * @member {number} sysId
               * @memberof com.proto.MGrid
               * @instance
               */

              MGrid.prototype.sysId = 0;
              /**
               * MGrid number.
               * @member {number} number
               * @memberof com.proto.MGrid
               * @instance
               */

              MGrid.prototype.number = 0;
              /**
               * MGrid startTime.
               * @member {number|Long} startTime
               * @memberof com.proto.MGrid
               * @instance
               */

              MGrid.prototype.startTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MGrid soruce.
               * @member {number} soruce
               * @memberof com.proto.MGrid
               * @instance
               */

              MGrid.prototype.soruce = 0;
              /**
               * Creates a new MGrid instance using the specified properties.
               * @function create
               * @memberof com.proto.MGrid
               * @static
               * @param {com.proto.IMGrid=} [properties] Properties to set
               * @returns {com.proto.MGrid} MGrid instance
               */

              MGrid.create = function create(properties) {
                return new MGrid(properties);
              };
              /**
               * Encodes the specified MGrid message. Does not implicitly {@link com.proto.MGrid.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MGrid
               * @static
               * @param {com.proto.IMGrid} m MGrid message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MGrid.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.index != null && Object.hasOwnProperty.call(m, "index")) w.uint32(8).int32(m.index);
                if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(16).int32(m.type);
                if (m.sysId != null && Object.hasOwnProperty.call(m, "sysId")) w.uint32(24).int32(m.sysId);
                if (m.number != null && Object.hasOwnProperty.call(m, "number")) w.uint32(32).int32(m.number);
                if (m.startTime != null && Object.hasOwnProperty.call(m, "startTime")) w.uint32(40).int64(m.startTime);
                if (m.soruce != null && Object.hasOwnProperty.call(m, "soruce")) w.uint32(48).int32(m.soruce);
                return w;
              };
              /**
               * Decodes a MGrid message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MGrid
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MGrid} MGrid
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MGrid.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MGrid();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.index = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.type = r.int32();
                        break;
                      }

                    case 3:
                      {
                        m.sysId = r.int32();
                        break;
                      }

                    case 4:
                      {
                        m.number = r.int32();
                        break;
                      }

                    case 5:
                      {
                        m.startTime = r.int64();
                        break;
                      }

                    case 6:
                      {
                        m.soruce = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MGrid;
            }();

            proto.Msg_6001_ = function () {
              /**
               * Properties of a Msg_6001_.
               * @memberof com.proto
               * @interface IMsg_6001_
               * @property {Array.<com.proto.IMGrid>|null} [updateList] Msg_6001_ updateList
               */

              /**
               * Constructs a new Msg_6001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_6001_.
               * @implements IMsg_6001_
               * @constructor
               * @param {com.proto.IMsg_6001_=} [p] Properties to set
               */
              function Msg_6001_(p) {
                this.updateList = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_6001_ updateList.
               * @member {Array.<com.proto.IMGrid>} updateList
               * @memberof com.proto.Msg_6001_
               * @instance
               */


              Msg_6001_.prototype.updateList = $util.emptyArray;
              /**
               * Creates a new Msg_6001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_6001_
               * @static
               * @param {com.proto.IMsg_6001_=} [properties] Properties to set
               * @returns {com.proto.Msg_6001_} Msg_6001_ instance
               */

              Msg_6001_.create = function create(properties) {
                return new Msg_6001_(properties);
              };
              /**
               * Encodes the specified Msg_6001_ message. Does not implicitly {@link com.proto.Msg_6001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_6001_
               * @static
               * @param {com.proto.IMsg_6001_} m Msg_6001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_6001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.updateList != null && m.updateList.length) {
                  for (var i = 0; i < m.updateList.length; ++i) $root.com.proto.MGrid.encode(m.updateList[i], w.uint32(10).fork()).ldelim();
                }

                return w;
              };
              /**
               * Decodes a Msg_6001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_6001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_6001_} Msg_6001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_6001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_6001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.updateList && m.updateList.length)) m.updateList = [];
                        m.updateList.push($root.com.proto.MGrid.decode(r, r.uint32()));
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_6001_;
            }();

            proto.Msg_6002 = function () {
              /**
               * Properties of a Msg_6002.
               * @memberof com.proto
               * @interface IMsg_6002
               * @property {Array.<number>|null} [index] Msg_6002 index
               */

              /**
               * Constructs a new Msg_6002.
               * @memberof com.proto
               * @classdesc Represents a Msg_6002.
               * @implements IMsg_6002
               * @constructor
               * @param {com.proto.IMsg_6002=} [p] Properties to set
               */
              function Msg_6002(p) {
                this.index = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_6002 index.
               * @member {Array.<number>} index
               * @memberof com.proto.Msg_6002
               * @instance
               */


              Msg_6002.prototype.index = $util.emptyArray;
              /**
               * Creates a new Msg_6002 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_6002
               * @static
               * @param {com.proto.IMsg_6002=} [properties] Properties to set
               * @returns {com.proto.Msg_6002} Msg_6002 instance
               */

              Msg_6002.create = function create(properties) {
                return new Msg_6002(properties);
              };
              /**
               * Encodes the specified Msg_6002 message. Does not implicitly {@link com.proto.Msg_6002.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_6002
               * @static
               * @param {com.proto.IMsg_6002} m Msg_6002 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_6002.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.index != null && m.index.length) {
                  for (var i = 0; i < m.index.length; ++i) w.uint32(8).int32(m.index[i]);
                }

                return w;
              };
              /**
               * Decodes a Msg_6002 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_6002
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_6002} Msg_6002
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_6002.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_6002();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.index && m.index.length)) m.index = [];

                        if ((t & 7) === 2) {
                          var c2 = r.uint32() + r.pos;

                          while (r.pos < c2) m.index.push(r.int32());
                        } else m.index.push(r.int32());

                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_6002;
            }();

            proto.MPlayerChat = function () {
              /**
               * Properties of a MPlayerChat.
               * @memberof com.proto
               * @interface IMPlayerChat
               * @property {number|Long|null} [id] MPlayerChat id
               * @property {string|null} [name] MPlayerChat name
               * @property {number|null} [level] MPlayerChat level
               * @property {number|null} [imageId] MPlayerChat imageId
               */

              /**
               * Constructs a new MPlayerChat.
               * @memberof com.proto
               * @classdesc Represents a MPlayerChat.
               * @implements IMPlayerChat
               * @constructor
               * @param {com.proto.IMPlayerChat=} [p] Properties to set
               */
              function MPlayerChat(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MPlayerChat id.
               * @member {number|Long} id
               * @memberof com.proto.MPlayerChat
               * @instance
               */


              MPlayerChat.prototype.id = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayerChat name.
               * @member {string} name
               * @memberof com.proto.MPlayerChat
               * @instance
               */

              MPlayerChat.prototype.name = "";
              /**
               * MPlayerChat level.
               * @member {number} level
               * @memberof com.proto.MPlayerChat
               * @instance
               */

              MPlayerChat.prototype.level = -1;
              /**
               * MPlayerChat imageId.
               * @member {number} imageId
               * @memberof com.proto.MPlayerChat
               * @instance
               */

              MPlayerChat.prototype.imageId = -1;
              /**
               * Creates a new MPlayerChat instance using the specified properties.
               * @function create
               * @memberof com.proto.MPlayerChat
               * @static
               * @param {com.proto.IMPlayerChat=} [properties] Properties to set
               * @returns {com.proto.MPlayerChat} MPlayerChat instance
               */

              MPlayerChat.create = function create(properties) {
                return new MPlayerChat(properties);
              };
              /**
               * Encodes the specified MPlayerChat message. Does not implicitly {@link com.proto.MPlayerChat.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MPlayerChat
               * @static
               * @param {com.proto.IMPlayerChat} m MPlayerChat message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MPlayerChat.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
                if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(18).string(m.name);
                if (m.level != null && Object.hasOwnProperty.call(m, "level")) w.uint32(24).int32(m.level);
                if (m.imageId != null && Object.hasOwnProperty.call(m, "imageId")) w.uint32(32).int32(m.imageId);
                return w;
              };
              /**
               * Decodes a MPlayerChat message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MPlayerChat
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MPlayerChat} MPlayerChat
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MPlayerChat.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MPlayerChat();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int64();
                        break;
                      }

                    case 2:
                      {
                        m.name = r.string();
                        break;
                      }

                    case 3:
                      {
                        m.level = r.int32();
                        break;
                      }

                    case 4:
                      {
                        m.imageId = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MPlayerChat;
            }();

            proto.MChatData = function () {
              /**
               * Properties of a MChatData.
               * @memberof com.proto
               * @interface IMChatData
               * @property {number|null} [type] MChatData type
               * @property {string|null} [chatData] MChatData chatData
               * @property {com.proto.IMPlayerChat|null} [player] MChatData player
               * @property {number|Long|null} [sendTime] MChatData sendTime
               */

              /**
               * Constructs a new MChatData.
               * @memberof com.proto
               * @classdesc Represents a MChatData.
               * @implements IMChatData
               * @constructor
               * @param {com.proto.IMChatData=} [p] Properties to set
               */
              function MChatData(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MChatData type.
               * @member {number} type
               * @memberof com.proto.MChatData
               * @instance
               */


              MChatData.prototype.type = 0;
              /**
               * MChatData chatData.
               * @member {string} chatData
               * @memberof com.proto.MChatData
               * @instance
               */

              MChatData.prototype.chatData = "";
              /**
               * MChatData player.
               * @member {com.proto.IMPlayerChat|null|undefined} player
               * @memberof com.proto.MChatData
               * @instance
               */

              MChatData.prototype.player = null;
              /**
               * MChatData sendTime.
               * @member {number|Long} sendTime
               * @memberof com.proto.MChatData
               * @instance
               */

              MChatData.prototype.sendTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new MChatData instance using the specified properties.
               * @function create
               * @memberof com.proto.MChatData
               * @static
               * @param {com.proto.IMChatData=} [properties] Properties to set
               * @returns {com.proto.MChatData} MChatData instance
               */

              MChatData.create = function create(properties) {
                return new MChatData(properties);
              };
              /**
               * Encodes the specified MChatData message. Does not implicitly {@link com.proto.MChatData.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MChatData
               * @static
               * @param {com.proto.IMChatData} m MChatData message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MChatData.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(8).int32(m.type);
                if (m.chatData != null && Object.hasOwnProperty.call(m, "chatData")) w.uint32(18).string(m.chatData);
                if (m.player != null && Object.hasOwnProperty.call(m, "player")) $root.com.proto.MPlayerChat.encode(m.player, w.uint32(26).fork()).ldelim();
                if (m.sendTime != null && Object.hasOwnProperty.call(m, "sendTime")) w.uint32(32).int64(m.sendTime);
                return w;
              };
              /**
               * Decodes a MChatData message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MChatData
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MChatData} MChatData
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MChatData.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MChatData();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.type = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.chatData = r.string();
                        break;
                      }

                    case 3:
                      {
                        m.player = $root.com.proto.MPlayerChat.decode(r, r.uint32());
                        break;
                      }

                    case 4:
                      {
                        m.sendTime = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MChatData;
            }();

            proto.MNoticeData = function () {
              /**
               * Properties of a MNoticeData.
               * @memberof com.proto
               * @interface IMNoticeData
               * @property {number|Long|null} [id] MNoticeData id
               * @property {number|null} [sysId] MNoticeData sysId
               * @property {number|Long|null} [startTime] MNoticeData startTime
               * @property {number|Long|null} [endTime] MNoticeData endTime
               * @property {number|null} [intervalTime] MNoticeData intervalTime
               * @property {string|null} [content] MNoticeData content
               */

              /**
               * Constructs a new MNoticeData.
               * @memberof com.proto
               * @classdesc Represents a MNoticeData.
               * @implements IMNoticeData
               * @constructor
               * @param {com.proto.IMNoticeData=} [p] Properties to set
               */
              function MNoticeData(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MNoticeData id.
               * @member {number|Long} id
               * @memberof com.proto.MNoticeData
               * @instance
               */


              MNoticeData.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MNoticeData sysId.
               * @member {number} sysId
               * @memberof com.proto.MNoticeData
               * @instance
               */

              MNoticeData.prototype.sysId = 0;
              /**
               * MNoticeData startTime.
               * @member {number|Long} startTime
               * @memberof com.proto.MNoticeData
               * @instance
               */

              MNoticeData.prototype.startTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MNoticeData endTime.
               * @member {number|Long} endTime
               * @memberof com.proto.MNoticeData
               * @instance
               */

              MNoticeData.prototype.endTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MNoticeData intervalTime.
               * @member {number} intervalTime
               * @memberof com.proto.MNoticeData
               * @instance
               */

              MNoticeData.prototype.intervalTime = 0;
              /**
               * MNoticeData content.
               * @member {string} content
               * @memberof com.proto.MNoticeData
               * @instance
               */

              MNoticeData.prototype.content = "";
              /**
               * Creates a new MNoticeData instance using the specified properties.
               * @function create
               * @memberof com.proto.MNoticeData
               * @static
               * @param {com.proto.IMNoticeData=} [properties] Properties to set
               * @returns {com.proto.MNoticeData} MNoticeData instance
               */

              MNoticeData.create = function create(properties) {
                return new MNoticeData(properties);
              };
              /**
               * Encodes the specified MNoticeData message. Does not implicitly {@link com.proto.MNoticeData.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MNoticeData
               * @static
               * @param {com.proto.IMNoticeData} m MNoticeData message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MNoticeData.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
                if (m.sysId != null && Object.hasOwnProperty.call(m, "sysId")) w.uint32(16).int32(m.sysId);
                if (m.startTime != null && Object.hasOwnProperty.call(m, "startTime")) w.uint32(24).int64(m.startTime);
                if (m.endTime != null && Object.hasOwnProperty.call(m, "endTime")) w.uint32(32).int64(m.endTime);
                if (m.intervalTime != null && Object.hasOwnProperty.call(m, "intervalTime")) w.uint32(40).int32(m.intervalTime);
                if (m.content != null && Object.hasOwnProperty.call(m, "content")) w.uint32(50).string(m.content);
                return w;
              };
              /**
               * Decodes a MNoticeData message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MNoticeData
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MNoticeData} MNoticeData
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MNoticeData.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MNoticeData();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int64();
                        break;
                      }

                    case 2:
                      {
                        m.sysId = r.int32();
                        break;
                      }

                    case 3:
                      {
                        m.startTime = r.int64();
                        break;
                      }

                    case 4:
                      {
                        m.endTime = r.int64();
                        break;
                      }

                    case 5:
                      {
                        m.intervalTime = r.int32();
                        break;
                      }

                    case 6:
                      {
                        m.content = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MNoticeData;
            }();

            proto.Msg_7000 = function () {
              /**
               * Properties of a Msg_7000.
               * @memberof com.proto
               * @interface IMsg_7000
               */

              /**
               * Constructs a new Msg_7000.
               * @memberof com.proto
               * @classdesc Represents a Msg_7000.
               * @implements IMsg_7000
               * @constructor
               * @param {com.proto.IMsg_7000=} [p] Properties to set
               */
              function Msg_7000(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_7000 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7000
               * @static
               * @param {com.proto.IMsg_7000=} [properties] Properties to set
               * @returns {com.proto.Msg_7000} Msg_7000 instance
               */


              Msg_7000.create = function create(properties) {
                return new Msg_7000(properties);
              };
              /**
               * Encodes the specified Msg_7000 message. Does not implicitly {@link com.proto.Msg_7000.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7000
               * @static
               * @param {com.proto.IMsg_7000} m Msg_7000 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7000.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_7000 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7000
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7000} Msg_7000
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7000.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7000();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7000;
            }();

            proto.Msg_7000_ = function () {
              /**
               * Properties of a Msg_7000_.
               * @memberof com.proto
               * @interface IMsg_7000_
               * @property {Array.<com.proto.IMChatData>|null} [chatData] Msg_7000_ chatData
               * @property {Array.<com.proto.IMsg_7002_>|null} [privateChat] Msg_7000_ privateChat
               */

              /**
               * Constructs a new Msg_7000_.
               * @memberof com.proto
               * @classdesc Represents a Msg_7000_.
               * @implements IMsg_7000_
               * @constructor
               * @param {com.proto.IMsg_7000_=} [p] Properties to set
               */
              function Msg_7000_(p) {
                this.chatData = [];
                this.privateChat = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7000_ chatData.
               * @member {Array.<com.proto.IMChatData>} chatData
               * @memberof com.proto.Msg_7000_
               * @instance
               */


              Msg_7000_.prototype.chatData = $util.emptyArray;
              /**
               * Msg_7000_ privateChat.
               * @member {Array.<com.proto.IMsg_7002_>} privateChat
               * @memberof com.proto.Msg_7000_
               * @instance
               */

              Msg_7000_.prototype.privateChat = $util.emptyArray;
              /**
               * Creates a new Msg_7000_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7000_
               * @static
               * @param {com.proto.IMsg_7000_=} [properties] Properties to set
               * @returns {com.proto.Msg_7000_} Msg_7000_ instance
               */

              Msg_7000_.create = function create(properties) {
                return new Msg_7000_(properties);
              };
              /**
               * Encodes the specified Msg_7000_ message. Does not implicitly {@link com.proto.Msg_7000_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7000_
               * @static
               * @param {com.proto.IMsg_7000_} m Msg_7000_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7000_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.chatData != null && m.chatData.length) {
                  for (var i = 0; i < m.chatData.length; ++i) $root.com.proto.MChatData.encode(m.chatData[i], w.uint32(10).fork()).ldelim();
                }

                if (m.privateChat != null && m.privateChat.length) {
                  for (var i = 0; i < m.privateChat.length; ++i) $root.com.proto.Msg_7002_.encode(m.privateChat[i], w.uint32(18).fork()).ldelim();
                }

                return w;
              };
              /**
               * Decodes a Msg_7000_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7000_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7000_} Msg_7000_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7000_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7000_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.chatData && m.chatData.length)) m.chatData = [];
                        m.chatData.push($root.com.proto.MChatData.decode(r, r.uint32()));
                        break;
                      }

                    case 2:
                      {
                        if (!(m.privateChat && m.privateChat.length)) m.privateChat = [];
                        m.privateChat.push($root.com.proto.Msg_7002_.decode(r, r.uint32()));
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7000_;
            }();

            proto.Msg_7001 = function () {
              /**
               * Properties of a Msg_7001.
               * @memberof com.proto
               * @interface IMsg_7001
               * @property {number|null} [type] Msg_7001 type
               * @property {number|Long} targetId Msg_7001 targetId
               * @property {string|null} [chatData] Msg_7001 chatData
               */

              /**
               * Constructs a new Msg_7001.
               * @memberof com.proto
               * @classdesc Represents a Msg_7001.
               * @implements IMsg_7001
               * @constructor
               * @param {com.proto.IMsg_7001=} [p] Properties to set
               */
              function Msg_7001(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7001 type.
               * @member {number} type
               * @memberof com.proto.Msg_7001
               * @instance
               */


              Msg_7001.prototype.type = 0;
              /**
               * Msg_7001 targetId.
               * @member {number|Long} targetId
               * @memberof com.proto.Msg_7001
               * @instance
               */

              Msg_7001.prototype.targetId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Msg_7001 chatData.
               * @member {string} chatData
               * @memberof com.proto.Msg_7001
               * @instance
               */

              Msg_7001.prototype.chatData = "";
              /**
               * Creates a new Msg_7001 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7001
               * @static
               * @param {com.proto.IMsg_7001=} [properties] Properties to set
               * @returns {com.proto.Msg_7001} Msg_7001 instance
               */

              Msg_7001.create = function create(properties) {
                return new Msg_7001(properties);
              };
              /**
               * Encodes the specified Msg_7001 message. Does not implicitly {@link com.proto.Msg_7001.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7001
               * @static
               * @param {com.proto.IMsg_7001} m Msg_7001 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7001.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(8).int32(m.type);
                w.uint32(16).int64(m.targetId);
                if (m.chatData != null && Object.hasOwnProperty.call(m, "chatData")) w.uint32(26).string(m.chatData);
                return w;
              };
              /**
               * Decodes a Msg_7001 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7001
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7001} Msg_7001
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7001.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7001();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.type = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.targetId = r.int64();
                        break;
                      }

                    case 3:
                      {
                        m.chatData = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                if (!m.hasOwnProperty("targetId")) throw $util.ProtocolError("missing required 'targetId'", {
                  instance: m
                });
                return m;
              };

              return Msg_7001;
            }();

            proto.Msg_7001_ = function () {
              /**
               * Properties of a Msg_7001_.
               * @memberof com.proto
               * @interface IMsg_7001_
               * @property {Array.<com.proto.IMChatData>|null} [chatData] Msg_7001_ chatData
               */

              /**
               * Constructs a new Msg_7001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_7001_.
               * @implements IMsg_7001_
               * @constructor
               * @param {com.proto.IMsg_7001_=} [p] Properties to set
               */
              function Msg_7001_(p) {
                this.chatData = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7001_ chatData.
               * @member {Array.<com.proto.IMChatData>} chatData
               * @memberof com.proto.Msg_7001_
               * @instance
               */


              Msg_7001_.prototype.chatData = $util.emptyArray;
              /**
               * Creates a new Msg_7001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7001_
               * @static
               * @param {com.proto.IMsg_7001_=} [properties] Properties to set
               * @returns {com.proto.Msg_7001_} Msg_7001_ instance
               */

              Msg_7001_.create = function create(properties) {
                return new Msg_7001_(properties);
              };
              /**
               * Encodes the specified Msg_7001_ message. Does not implicitly {@link com.proto.Msg_7001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7001_
               * @static
               * @param {com.proto.IMsg_7001_} m Msg_7001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.chatData != null && m.chatData.length) {
                  for (var i = 0; i < m.chatData.length; ++i) $root.com.proto.MChatData.encode(m.chatData[i], w.uint32(10).fork()).ldelim();
                }

                return w;
              };
              /**
               * Decodes a Msg_7001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7001_} Msg_7001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.chatData && m.chatData.length)) m.chatData = [];
                        m.chatData.push($root.com.proto.MChatData.decode(r, r.uint32()));
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7001_;
            }();

            proto.Msg_7002_ = function () {
              /**
               * Properties of a Msg_7002_.
               * @memberof com.proto
               * @interface IMsg_7002_
               * @property {number|null} [type] Msg_7002_ type
               * @property {string|null} [chatData] Msg_7002_ chatData
               * @property {com.proto.IMPlayerChat|null} [player] Msg_7002_ player
               * @property {number|Long|null} [sendTime] Msg_7002_ sendTime
               * @property {com.proto.IMPlayerChat|null} [target] Msg_7002_ target
               */

              /**
               * Constructs a new Msg_7002_.
               * @memberof com.proto
               * @classdesc Represents a Msg_7002_.
               * @implements IMsg_7002_
               * @constructor
               * @param {com.proto.IMsg_7002_=} [p] Properties to set
               */
              function Msg_7002_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7002_ type.
               * @member {number} type
               * @memberof com.proto.Msg_7002_
               * @instance
               */


              Msg_7002_.prototype.type = 0;
              /**
               * Msg_7002_ chatData.
               * @member {string} chatData
               * @memberof com.proto.Msg_7002_
               * @instance
               */

              Msg_7002_.prototype.chatData = "";
              /**
               * Msg_7002_ player.
               * @member {com.proto.IMPlayerChat|null|undefined} player
               * @memberof com.proto.Msg_7002_
               * @instance
               */

              Msg_7002_.prototype.player = null;
              /**
               * Msg_7002_ sendTime.
               * @member {number|Long} sendTime
               * @memberof com.proto.Msg_7002_
               * @instance
               */

              Msg_7002_.prototype.sendTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Msg_7002_ target.
               * @member {com.proto.IMPlayerChat|null|undefined} target
               * @memberof com.proto.Msg_7002_
               * @instance
               */

              Msg_7002_.prototype.target = null;
              /**
               * Creates a new Msg_7002_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7002_
               * @static
               * @param {com.proto.IMsg_7002_=} [properties] Properties to set
               * @returns {com.proto.Msg_7002_} Msg_7002_ instance
               */

              Msg_7002_.create = function create(properties) {
                return new Msg_7002_(properties);
              };
              /**
               * Encodes the specified Msg_7002_ message. Does not implicitly {@link com.proto.Msg_7002_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7002_
               * @static
               * @param {com.proto.IMsg_7002_} m Msg_7002_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7002_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(8).int32(m.type);
                if (m.chatData != null && Object.hasOwnProperty.call(m, "chatData")) w.uint32(18).string(m.chatData);
                if (m.player != null && Object.hasOwnProperty.call(m, "player")) $root.com.proto.MPlayerChat.encode(m.player, w.uint32(26).fork()).ldelim();
                if (m.sendTime != null && Object.hasOwnProperty.call(m, "sendTime")) w.uint32(32).int64(m.sendTime);
                if (m.target != null && Object.hasOwnProperty.call(m, "target")) $root.com.proto.MPlayerChat.encode(m.target, w.uint32(42).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_7002_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7002_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7002_} Msg_7002_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7002_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7002_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.type = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.chatData = r.string();
                        break;
                      }

                    case 3:
                      {
                        m.player = $root.com.proto.MPlayerChat.decode(r, r.uint32());
                        break;
                      }

                    case 4:
                      {
                        m.sendTime = r.int64();
                        break;
                      }

                    case 5:
                      {
                        m.target = $root.com.proto.MPlayerChat.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7002_;
            }();

            proto.Msg_7003_ = function () {
              /**
               * Properties of a Msg_7003_.
               * @memberof com.proto
               * @interface IMsg_7003_
               * @property {number|null} [id] Msg_7003_ id
               * @property {Array.<string>|null} [paramValue] Msg_7003_ paramValue
               */

              /**
               * Constructs a new Msg_7003_.
               * @memberof com.proto
               * @classdesc Represents a Msg_7003_.
               * @implements IMsg_7003_
               * @constructor
               * @param {com.proto.IMsg_7003_=} [p] Properties to set
               */
              function Msg_7003_(p) {
                this.paramValue = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7003_ id.
               * @member {number} id
               * @memberof com.proto.Msg_7003_
               * @instance
               */


              Msg_7003_.prototype.id = 0;
              /**
               * Msg_7003_ paramValue.
               * @member {Array.<string>} paramValue
               * @memberof com.proto.Msg_7003_
               * @instance
               */

              Msg_7003_.prototype.paramValue = $util.emptyArray;
              /**
               * Creates a new Msg_7003_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7003_
               * @static
               * @param {com.proto.IMsg_7003_=} [properties] Properties to set
               * @returns {com.proto.Msg_7003_} Msg_7003_ instance
               */

              Msg_7003_.create = function create(properties) {
                return new Msg_7003_(properties);
              };
              /**
               * Encodes the specified Msg_7003_ message. Does not implicitly {@link com.proto.Msg_7003_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7003_
               * @static
               * @param {com.proto.IMsg_7003_} m Msg_7003_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7003_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int32(m.id);

                if (m.paramValue != null && m.paramValue.length) {
                  for (var i = 0; i < m.paramValue.length; ++i) w.uint32(18).string(m.paramValue[i]);
                }

                return w;
              };
              /**
               * Decodes a Msg_7003_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7003_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7003_} Msg_7003_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7003_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7003_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int32();
                        break;
                      }

                    case 2:
                      {
                        if (!(m.paramValue && m.paramValue.length)) m.paramValue = [];
                        m.paramValue.push(r.string());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7003_;
            }();

            proto.Msg_7004_ = function () {
              /**
               * Properties of a Msg_7004_.
               * @memberof com.proto
               * @interface IMsg_7004_
               * @property {Array.<com.proto.IMNoticeData>|null} [noticeData] Msg_7004_ noticeData
               */

              /**
               * Constructs a new Msg_7004_.
               * @memberof com.proto
               * @classdesc Represents a Msg_7004_.
               * @implements IMsg_7004_
               * @constructor
               * @param {com.proto.IMsg_7004_=} [p] Properties to set
               */
              function Msg_7004_(p) {
                this.noticeData = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7004_ noticeData.
               * @member {Array.<com.proto.IMNoticeData>} noticeData
               * @memberof com.proto.Msg_7004_
               * @instance
               */


              Msg_7004_.prototype.noticeData = $util.emptyArray;
              /**
               * Creates a new Msg_7004_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7004_
               * @static
               * @param {com.proto.IMsg_7004_=} [properties] Properties to set
               * @returns {com.proto.Msg_7004_} Msg_7004_ instance
               */

              Msg_7004_.create = function create(properties) {
                return new Msg_7004_(properties);
              };
              /**
               * Encodes the specified Msg_7004_ message. Does not implicitly {@link com.proto.Msg_7004_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7004_
               * @static
               * @param {com.proto.IMsg_7004_} m Msg_7004_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7004_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.noticeData != null && m.noticeData.length) {
                  for (var i = 0; i < m.noticeData.length; ++i) $root.com.proto.MNoticeData.encode(m.noticeData[i], w.uint32(10).fork()).ldelim();
                }

                return w;
              };
              /**
               * Decodes a Msg_7004_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7004_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7004_} Msg_7004_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7004_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7004_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.noticeData && m.noticeData.length)) m.noticeData = [];
                        m.noticeData.push($root.com.proto.MNoticeData.decode(r, r.uint32()));
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7004_;
            }();

            proto.Msg_7005_ = function () {
              /**
               * Properties of a Msg_7005_.
               * @memberof com.proto
               * @interface IMsg_7005_
               * @property {number|Long|null} [id] Msg_7005_ id
               */

              /**
               * Constructs a new Msg_7005_.
               * @memberof com.proto
               * @classdesc Represents a Msg_7005_.
               * @implements IMsg_7005_
               * @constructor
               * @param {com.proto.IMsg_7005_=} [p] Properties to set
               */
              function Msg_7005_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_7005_ id.
               * @member {number|Long} id
               * @memberof com.proto.Msg_7005_
               * @instance
               */


              Msg_7005_.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new Msg_7005_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_7005_
               * @static
               * @param {com.proto.IMsg_7005_=} [properties] Properties to set
               * @returns {com.proto.Msg_7005_} Msg_7005_ instance
               */

              Msg_7005_.create = function create(properties) {
                return new Msg_7005_(properties);
              };
              /**
               * Encodes the specified Msg_7005_ message. Does not implicitly {@link com.proto.Msg_7005_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_7005_
               * @static
               * @param {com.proto.IMsg_7005_} m Msg_7005_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_7005_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
                return w;
              };
              /**
               * Decodes a Msg_7005_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_7005_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_7005_} Msg_7005_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_7005_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_7005_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_7005_;
            }();

            proto.MClient = function () {
              /**
               * Properties of a MClient.
               * @memberof com.proto
               * @interface IMClient
               * @property {number|null} [reLogin] MClient reLogin
               * @property {number|null} [channel] MClient channel
               * @property {number|null} [currChannel] MClient currChannel
               * @property {string|null} [version] MClient version
               * @property {string|null} [terminal] MClient terminal
               * @property {string|null} [terminalType] MClient terminalType
               */

              /**
               * Constructs a new MClient.
               * @memberof com.proto
               * @classdesc Represents a MClient.
               * @implements IMClient
               * @constructor
               * @param {com.proto.IMClient=} [p] Properties to set
               */
              function MClient(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MClient reLogin.
               * @member {number} reLogin
               * @memberof com.proto.MClient
               * @instance
               */


              MClient.prototype.reLogin = 0;
              /**
               * MClient channel.
               * @member {number} channel
               * @memberof com.proto.MClient
               * @instance
               */

              MClient.prototype.channel = 0;
              /**
               * MClient currChannel.
               * @member {number} currChannel
               * @memberof com.proto.MClient
               * @instance
               */

              MClient.prototype.currChannel = 0;
              /**
               * MClient version.
               * @member {string} version
               * @memberof com.proto.MClient
               * @instance
               */

              MClient.prototype.version = "";
              /**
               * MClient terminal.
               * @member {string} terminal
               * @memberof com.proto.MClient
               * @instance
               */

              MClient.prototype.terminal = "";
              /**
               * MClient terminalType.
               * @member {string} terminalType
               * @memberof com.proto.MClient
               * @instance
               */

              MClient.prototype.terminalType = "";
              /**
               * Creates a new MClient instance using the specified properties.
               * @function create
               * @memberof com.proto.MClient
               * @static
               * @param {com.proto.IMClient=} [properties] Properties to set
               * @returns {com.proto.MClient} MClient instance
               */

              MClient.create = function create(properties) {
                return new MClient(properties);
              };
              /**
               * Encodes the specified MClient message. Does not implicitly {@link com.proto.MClient.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MClient
               * @static
               * @param {com.proto.IMClient} m MClient message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MClient.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.reLogin != null && Object.hasOwnProperty.call(m, "reLogin")) w.uint32(8).int32(m.reLogin);
                if (m.channel != null && Object.hasOwnProperty.call(m, "channel")) w.uint32(16).int32(m.channel);
                if (m.currChannel != null && Object.hasOwnProperty.call(m, "currChannel")) w.uint32(24).int32(m.currChannel);
                if (m.version != null && Object.hasOwnProperty.call(m, "version")) w.uint32(34).string(m.version);
                if (m.terminal != null && Object.hasOwnProperty.call(m, "terminal")) w.uint32(42).string(m.terminal);
                if (m.terminalType != null && Object.hasOwnProperty.call(m, "terminalType")) w.uint32(50).string(m.terminalType);
                return w;
              };
              /**
               * Decodes a MClient message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MClient
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MClient} MClient
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MClient.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MClient();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.reLogin = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.channel = r.int32();
                        break;
                      }

                    case 3:
                      {
                        m.currChannel = r.int32();
                        break;
                      }

                    case 4:
                      {
                        m.version = r.string();
                        break;
                      }

                    case 5:
                      {
                        m.terminal = r.string();
                        break;
                      }

                    case 6:
                      {
                        m.terminalType = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MClient;
            }();

            proto.Msg_2001 = function () {
              /**
               * Properties of a Msg_2001.
               * @memberof com.proto
               * @interface IMsg_2001
               * @property {number|Long|null} [accountId] Msg_2001 accountId
               * @property {number|null} [areaId] Msg_2001 areaId
               * @property {com.proto.IMClient|null} [client] Msg_2001 client
               * @property {string|null} [operatorId] Msg_2001 operatorId
               * @property {string|null} [loginIp] Msg_2001 loginIp
               * @property {string|null} [loginSign] Msg_2001 loginSign
               * @property {string|null} [gateToken] Msg_2001 gateToken
               */

              /**
               * Constructs a new Msg_2001.
               * @memberof com.proto
               * @classdesc Represents a Msg_2001.
               * @implements IMsg_2001
               * @constructor
               * @param {com.proto.IMsg_2001=} [p] Properties to set
               */
              function Msg_2001(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_2001 accountId.
               * @member {number|Long} accountId
               * @memberof com.proto.Msg_2001
               * @instance
               */


              Msg_2001.prototype.accountId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Msg_2001 areaId.
               * @member {number} areaId
               * @memberof com.proto.Msg_2001
               * @instance
               */

              Msg_2001.prototype.areaId = 0;
              /**
               * Msg_2001 client.
               * @member {com.proto.IMClient|null|undefined} client
               * @memberof com.proto.Msg_2001
               * @instance
               */

              Msg_2001.prototype.client = null;
              /**
               * Msg_2001 operatorId.
               * @member {string} operatorId
               * @memberof com.proto.Msg_2001
               * @instance
               */

              Msg_2001.prototype.operatorId = "";
              /**
               * Msg_2001 loginIp.
               * @member {string} loginIp
               * @memberof com.proto.Msg_2001
               * @instance
               */

              Msg_2001.prototype.loginIp = "";
              /**
               * Msg_2001 loginSign.
               * @member {string} loginSign
               * @memberof com.proto.Msg_2001
               * @instance
               */

              Msg_2001.prototype.loginSign = "";
              /**
               * Msg_2001 gateToken.
               * @member {string} gateToken
               * @memberof com.proto.Msg_2001
               * @instance
               */

              Msg_2001.prototype.gateToken = "";
              /**
               * Creates a new Msg_2001 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_2001
               * @static
               * @param {com.proto.IMsg_2001=} [properties] Properties to set
               * @returns {com.proto.Msg_2001} Msg_2001 instance
               */

              Msg_2001.create = function create(properties) {
                return new Msg_2001(properties);
              };
              /**
               * Encodes the specified Msg_2001 message. Does not implicitly {@link com.proto.Msg_2001.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_2001
               * @static
               * @param {com.proto.IMsg_2001} m Msg_2001 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_2001.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.accountId != null && Object.hasOwnProperty.call(m, "accountId")) w.uint32(8).int64(m.accountId);
                if (m.areaId != null && Object.hasOwnProperty.call(m, "areaId")) w.uint32(16).int32(m.areaId);
                if (m.client != null && Object.hasOwnProperty.call(m, "client")) $root.com.proto.MClient.encode(m.client, w.uint32(26).fork()).ldelim();
                if (m.operatorId != null && Object.hasOwnProperty.call(m, "operatorId")) w.uint32(34).string(m.operatorId);
                if (m.loginIp != null && Object.hasOwnProperty.call(m, "loginIp")) w.uint32(42).string(m.loginIp);
                if (m.loginSign != null && Object.hasOwnProperty.call(m, "loginSign")) w.uint32(50).string(m.loginSign);
                if (m.gateToken != null && Object.hasOwnProperty.call(m, "gateToken")) w.uint32(58).string(m.gateToken);
                return w;
              };
              /**
               * Decodes a Msg_2001 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_2001
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_2001} Msg_2001
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_2001.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_2001();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.accountId = r.int64();
                        break;
                      }

                    case 2:
                      {
                        m.areaId = r.int32();
                        break;
                      }

                    case 3:
                      {
                        m.client = $root.com.proto.MClient.decode(r, r.uint32());
                        break;
                      }

                    case 4:
                      {
                        m.operatorId = r.string();
                        break;
                      }

                    case 5:
                      {
                        m.loginIp = r.string();
                        break;
                      }

                    case 6:
                      {
                        m.loginSign = r.string();
                        break;
                      }

                    case 7:
                      {
                        m.gateToken = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_2001;
            }();

            proto.Msg_2001_ = function () {
              /**
               * Properties of a Msg_2001_.
               * @memberof com.proto
               * @interface IMsg_2001_
               * @property {number|null} [status] Msg_2001_ status
               * @property {string|null} [loginNotice] Msg_2001_ loginNotice
               * @property {number|Long|null} [illegalTime] Msg_2001_ illegalTime
               * @property {number|null} [timeZone] Msg_2001_ timeZone
               */

              /**
               * Constructs a new Msg_2001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_2001_.
               * @implements IMsg_2001_
               * @constructor
               * @param {com.proto.IMsg_2001_=} [p] Properties to set
               */
              function Msg_2001_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_2001_ status.
               * @member {number} status
               * @memberof com.proto.Msg_2001_
               * @instance
               */


              Msg_2001_.prototype.status = 0;
              /**
               * Msg_2001_ loginNotice.
               * @member {string} loginNotice
               * @memberof com.proto.Msg_2001_
               * @instance
               */

              Msg_2001_.prototype.loginNotice = "";
              /**
               * Msg_2001_ illegalTime.
               * @member {number|Long} illegalTime
               * @memberof com.proto.Msg_2001_
               * @instance
               */

              Msg_2001_.prototype.illegalTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Msg_2001_ timeZone.
               * @member {number} timeZone
               * @memberof com.proto.Msg_2001_
               * @instance
               */

              Msg_2001_.prototype.timeZone = 0;
              /**
               * Creates a new Msg_2001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_2001_
               * @static
               * @param {com.proto.IMsg_2001_=} [properties] Properties to set
               * @returns {com.proto.Msg_2001_} Msg_2001_ instance
               */

              Msg_2001_.create = function create(properties) {
                return new Msg_2001_(properties);
              };
              /**
               * Encodes the specified Msg_2001_ message. Does not implicitly {@link com.proto.Msg_2001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_2001_
               * @static
               * @param {com.proto.IMsg_2001_} m Msg_2001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_2001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.status != null && Object.hasOwnProperty.call(m, "status")) w.uint32(8).int32(m.status);
                if (m.loginNotice != null && Object.hasOwnProperty.call(m, "loginNotice")) w.uint32(18).string(m.loginNotice);
                if (m.illegalTime != null && Object.hasOwnProperty.call(m, "illegalTime")) w.uint32(24).int64(m.illegalTime);
                if (m.timeZone != null && Object.hasOwnProperty.call(m, "timeZone")) w.uint32(32).int32(m.timeZone);
                return w;
              };
              /**
               * Decodes a Msg_2001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_2001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_2001_} Msg_2001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_2001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_2001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.status = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.loginNotice = r.string();
                        break;
                      }

                    case 3:
                      {
                        m.illegalTime = r.int64();
                        break;
                      }

                    case 4:
                      {
                        m.timeZone = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_2001_;
            }();

            proto.Msg_2003_ = function () {
              /**
               * Properties of a Msg_2003_.
               * @memberof com.proto
               * @interface IMsg_2003_
               * @property {com.proto.IMLoginData|null} [loginData] Msg_2003_ loginData
               */

              /**
               * Constructs a new Msg_2003_.
               * @memberof com.proto
               * @classdesc Represents a Msg_2003_.
               * @implements IMsg_2003_
               * @constructor
               * @param {com.proto.IMsg_2003_=} [p] Properties to set
               */
              function Msg_2003_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_2003_ loginData.
               * @member {com.proto.IMLoginData|null|undefined} loginData
               * @memberof com.proto.Msg_2003_
               * @instance
               */


              Msg_2003_.prototype.loginData = null;
              /**
               * Creates a new Msg_2003_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_2003_
               * @static
               * @param {com.proto.IMsg_2003_=} [properties] Properties to set
               * @returns {com.proto.Msg_2003_} Msg_2003_ instance
               */

              Msg_2003_.create = function create(properties) {
                return new Msg_2003_(properties);
              };
              /**
               * Encodes the specified Msg_2003_ message. Does not implicitly {@link com.proto.Msg_2003_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_2003_
               * @static
               * @param {com.proto.IMsg_2003_} m Msg_2003_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_2003_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.loginData != null && Object.hasOwnProperty.call(m, "loginData")) $root.com.proto.MLoginData.encode(m.loginData, w.uint32(10).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_2003_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_2003_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_2003_} Msg_2003_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_2003_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_2003_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.loginData = $root.com.proto.MLoginData.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_2003_;
            }();

            proto.Msg_2004_ = function () {
              /**
               * Properties of a Msg_2004_.
               * @memberof com.proto
               * @interface IMsg_2004_
               */

              /**
               * Constructs a new Msg_2004_.
               * @memberof com.proto
               * @classdesc Represents a Msg_2004_.
               * @implements IMsg_2004_
               * @constructor
               * @param {com.proto.IMsg_2004_=} [p] Properties to set
               */
              function Msg_2004_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_2004_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_2004_
               * @static
               * @param {com.proto.IMsg_2004_=} [properties] Properties to set
               * @returns {com.proto.Msg_2004_} Msg_2004_ instance
               */


              Msg_2004_.create = function create(properties) {
                return new Msg_2004_(properties);
              };
              /**
               * Encodes the specified Msg_2004_ message. Does not implicitly {@link com.proto.Msg_2004_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_2004_
               * @static
               * @param {com.proto.IMsg_2004_} m Msg_2004_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_2004_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_2004_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_2004_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_2004_} Msg_2004_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_2004_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_2004_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_2004_;
            }();

            proto.MPlayer = function () {
              /**
               * Properties of a MPlayer.
               * @memberof com.proto
               * @interface IMPlayer
               * @property {number|Long|null} [id] MPlayer id
               * @property {string|null} [openId] MPlayer openId
               * @property {number|null} [areaId] MPlayer areaId
               * @property {string|null} [name] MPlayer name
               * @property {number|null} [level] MPlayer level
               * @property {number|Long|null} [exp] MPlayer exp
               * @property {number|null} [yuanBao] MPlayer yuanBao
               * @property {number|Long|null} [stone] MPlayer stone
               * @property {number|Long|null} [gold] MPlayer gold
               * @property {number|Long|null} [energy] MPlayer energy
               * @property {number|Long|null} [createTime] MPlayer createTime
               * @property {number|null} [state] MPlayer state
               * @property {number|null} [serialLogin] MPlayer serialLogin
               * @property {number|null} [totalLogin] MPlayer totalLogin
               * @property {number|null} [isInternal] MPlayer isInternal
               * @property {number|null} [channel] MPlayer channel
               * @property {number|Long|null} [dragonForce] MPlayer dragonForce
               * @property {number|null} [imageId] MPlayer imageId
               * @property {number|null} [guanQiaId] MPlayer guanQiaId
               */

              /**
               * Constructs a new MPlayer.
               * @memberof com.proto
               * @classdesc Represents a MPlayer.
               * @implements IMPlayer
               * @constructor
               * @param {com.proto.IMPlayer=} [p] Properties to set
               */
              function MPlayer(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MPlayer id.
               * @member {number|Long} id
               * @memberof com.proto.MPlayer
               * @instance
               */


              MPlayer.prototype.id = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer openId.
               * @member {string} openId
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.openId = "";
              /**
               * MPlayer areaId.
               * @member {number} areaId
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.areaId = -1;
              /**
               * MPlayer name.
               * @member {string} name
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.name = "";
              /**
               * MPlayer level.
               * @member {number} level
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.level = -1;
              /**
               * MPlayer exp.
               * @member {number|Long} exp
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.exp = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer yuanBao.
               * @member {number} yuanBao
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.yuanBao = -1;
              /**
               * MPlayer stone.
               * @member {number|Long} stone
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.stone = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer gold.
               * @member {number|Long} gold
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.gold = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer energy.
               * @member {number|Long} energy
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.energy = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer createTime.
               * @member {number|Long} createTime
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.createTime = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer state.
               * @member {number} state
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.state = -1;
              /**
               * MPlayer serialLogin.
               * @member {number} serialLogin
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.serialLogin = -1;
              /**
               * MPlayer totalLogin.
               * @member {number} totalLogin
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.totalLogin = -1;
              /**
               * MPlayer isInternal.
               * @member {number} isInternal
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.isInternal = -1;
              /**
               * MPlayer channel.
               * @member {number} channel
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.channel = -1;
              /**
               * MPlayer dragonForce.
               * @member {number|Long} dragonForce
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.dragonForce = $util.Long ? $util.Long.fromBits(-1, -1, false) : -1;
              /**
               * MPlayer imageId.
               * @member {number} imageId
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.imageId = -1;
              /**
               * MPlayer guanQiaId.
               * @member {number} guanQiaId
               * @memberof com.proto.MPlayer
               * @instance
               */

              MPlayer.prototype.guanQiaId = -1;
              /**
               * Creates a new MPlayer instance using the specified properties.
               * @function create
               * @memberof com.proto.MPlayer
               * @static
               * @param {com.proto.IMPlayer=} [properties] Properties to set
               * @returns {com.proto.MPlayer} MPlayer instance
               */

              MPlayer.create = function create(properties) {
                return new MPlayer(properties);
              };
              /**
               * Encodes the specified MPlayer message. Does not implicitly {@link com.proto.MPlayer.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MPlayer
               * @static
               * @param {com.proto.IMPlayer} m MPlayer message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MPlayer.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(8).int64(m.id);
                if (m.openId != null && Object.hasOwnProperty.call(m, "openId")) w.uint32(18).string(m.openId);
                if (m.areaId != null && Object.hasOwnProperty.call(m, "areaId")) w.uint32(24).int32(m.areaId);
                if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(34).string(m.name);
                if (m.level != null && Object.hasOwnProperty.call(m, "level")) w.uint32(40).int32(m.level);
                if (m.exp != null && Object.hasOwnProperty.call(m, "exp")) w.uint32(48).int64(m.exp);
                if (m.yuanBao != null && Object.hasOwnProperty.call(m, "yuanBao")) w.uint32(56).int32(m.yuanBao);
                if (m.stone != null && Object.hasOwnProperty.call(m, "stone")) w.uint32(64).int64(m.stone);
                if (m.gold != null && Object.hasOwnProperty.call(m, "gold")) w.uint32(72).int64(m.gold);
                if (m.energy != null && Object.hasOwnProperty.call(m, "energy")) w.uint32(80).int64(m.energy);
                if (m.createTime != null && Object.hasOwnProperty.call(m, "createTime")) w.uint32(88).int64(m.createTime);
                if (m.state != null && Object.hasOwnProperty.call(m, "state")) w.uint32(96).int32(m.state);
                if (m.serialLogin != null && Object.hasOwnProperty.call(m, "serialLogin")) w.uint32(104).int32(m.serialLogin);
                if (m.totalLogin != null && Object.hasOwnProperty.call(m, "totalLogin")) w.uint32(112).int32(m.totalLogin);
                if (m.isInternal != null && Object.hasOwnProperty.call(m, "isInternal")) w.uint32(120).int32(m.isInternal);
                if (m.channel != null && Object.hasOwnProperty.call(m, "channel")) w.uint32(128).int32(m.channel);
                if (m.dragonForce != null && Object.hasOwnProperty.call(m, "dragonForce")) w.uint32(136).int64(m.dragonForce);
                if (m.imageId != null && Object.hasOwnProperty.call(m, "imageId")) w.uint32(144).int32(m.imageId);
                if (m.guanQiaId != null && Object.hasOwnProperty.call(m, "guanQiaId")) w.uint32(152).int32(m.guanQiaId);
                return w;
              };
              /**
               * Decodes a MPlayer message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MPlayer
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MPlayer} MPlayer
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MPlayer.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MPlayer();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.id = r.int64();
                        break;
                      }

                    case 2:
                      {
                        m.openId = r.string();
                        break;
                      }

                    case 3:
                      {
                        m.areaId = r.int32();
                        break;
                      }

                    case 4:
                      {
                        m.name = r.string();
                        break;
                      }

                    case 5:
                      {
                        m.level = r.int32();
                        break;
                      }

                    case 6:
                      {
                        m.exp = r.int64();
                        break;
                      }

                    case 7:
                      {
                        m.yuanBao = r.int32();
                        break;
                      }

                    case 8:
                      {
                        m.stone = r.int64();
                        break;
                      }

                    case 9:
                      {
                        m.gold = r.int64();
                        break;
                      }

                    case 10:
                      {
                        m.energy = r.int64();
                        break;
                      }

                    case 11:
                      {
                        m.createTime = r.int64();
                        break;
                      }

                    case 12:
                      {
                        m.state = r.int32();
                        break;
                      }

                    case 13:
                      {
                        m.serialLogin = r.int32();
                        break;
                      }

                    case 14:
                      {
                        m.totalLogin = r.int32();
                        break;
                      }

                    case 15:
                      {
                        m.isInternal = r.int32();
                        break;
                      }

                    case 16:
                      {
                        m.channel = r.int32();
                        break;
                      }

                    case 17:
                      {
                        m.dragonForce = r.int64();
                        break;
                      }

                    case 18:
                      {
                        m.imageId = r.int32();
                        break;
                      }

                    case 19:
                      {
                        m.guanQiaId = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MPlayer;
            }();

            proto.MLoginData = function () {
              /**
               * Properties of a MLoginData.
               * @memberof com.proto
               * @interface IMLoginData
               * @property {com.proto.IMPlayer|null} [player] MLoginData player
               * @property {number|Long|null} [openServerTime] MLoginData openServerTime
               * @property {string|null} [logToken] MLoginData logToken
               * @property {Array.<com.proto.IMGrid>|null} [bagGirdList] MLoginData bagGirdList
               * @property {Array.<com.proto.IMAdvertising>|null} [advertising] MLoginData advertising
               * @property {Array.<com.proto.IMRecharge>|null} [awaitOrder] MLoginData awaitOrder
               * @property {Array.<com.proto.IMActivity>|null} [activity] MLoginData activity
               * @property {Array.<number>|null} [analysisList] MLoginData analysisList
               */

              /**
               * Constructs a new MLoginData.
               * @memberof com.proto
               * @classdesc Represents a MLoginData.
               * @implements IMLoginData
               * @constructor
               * @param {com.proto.IMLoginData=} [p] Properties to set
               */
              function MLoginData(p) {
                this.bagGirdList = [];
                this.advertising = [];
                this.awaitOrder = [];
                this.activity = [];
                this.analysisList = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MLoginData player.
               * @member {com.proto.IMPlayer|null|undefined} player
               * @memberof com.proto.MLoginData
               * @instance
               */


              MLoginData.prototype.player = null;
              /**
               * MLoginData openServerTime.
               * @member {number|Long} openServerTime
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.openServerTime = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MLoginData logToken.
               * @member {string} logToken
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.logToken = "";
              /**
               * MLoginData bagGirdList.
               * @member {Array.<com.proto.IMGrid>} bagGirdList
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.bagGirdList = $util.emptyArray;
              /**
               * MLoginData advertising.
               * @member {Array.<com.proto.IMAdvertising>} advertising
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.advertising = $util.emptyArray;
              /**
               * MLoginData awaitOrder.
               * @member {Array.<com.proto.IMRecharge>} awaitOrder
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.awaitOrder = $util.emptyArray;
              /**
               * MLoginData activity.
               * @member {Array.<com.proto.IMActivity>} activity
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.activity = $util.emptyArray;
              /**
               * MLoginData analysisList.
               * @member {Array.<number>} analysisList
               * @memberof com.proto.MLoginData
               * @instance
               */

              MLoginData.prototype.analysisList = $util.emptyArray;
              /**
               * Creates a new MLoginData instance using the specified properties.
               * @function create
               * @memberof com.proto.MLoginData
               * @static
               * @param {com.proto.IMLoginData=} [properties] Properties to set
               * @returns {com.proto.MLoginData} MLoginData instance
               */

              MLoginData.create = function create(properties) {
                return new MLoginData(properties);
              };
              /**
               * Encodes the specified MLoginData message. Does not implicitly {@link com.proto.MLoginData.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MLoginData
               * @static
               * @param {com.proto.IMLoginData} m MLoginData message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MLoginData.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.player != null && Object.hasOwnProperty.call(m, "player")) $root.com.proto.MPlayer.encode(m.player, w.uint32(10).fork()).ldelim();
                if (m.openServerTime != null && Object.hasOwnProperty.call(m, "openServerTime")) w.uint32(16).int64(m.openServerTime);
                if (m.logToken != null && Object.hasOwnProperty.call(m, "logToken")) w.uint32(26).string(m.logToken);

                if (m.bagGirdList != null && m.bagGirdList.length) {
                  for (var i = 0; i < m.bagGirdList.length; ++i) $root.com.proto.MGrid.encode(m.bagGirdList[i], w.uint32(34).fork()).ldelim();
                }

                if (m.advertising != null && m.advertising.length) {
                  for (var i = 0; i < m.advertising.length; ++i) $root.com.proto.MAdvertising.encode(m.advertising[i], w.uint32(42).fork()).ldelim();
                }

                if (m.awaitOrder != null && m.awaitOrder.length) {
                  for (var i = 0; i < m.awaitOrder.length; ++i) $root.com.proto.MRecharge.encode(m.awaitOrder[i], w.uint32(50).fork()).ldelim();
                }

                if (m.activity != null && m.activity.length) {
                  for (var i = 0; i < m.activity.length; ++i) $root.com.proto.MActivity.encode(m.activity[i], w.uint32(58).fork()).ldelim();
                }

                if (m.analysisList != null && m.analysisList.length) {
                  for (var i = 0; i < m.analysisList.length; ++i) w.uint32(64).int32(m.analysisList[i]);
                }

                return w;
              };
              /**
               * Decodes a MLoginData message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MLoginData
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MLoginData} MLoginData
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MLoginData.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MLoginData();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.player = $root.com.proto.MPlayer.decode(r, r.uint32());
                        break;
                      }

                    case 2:
                      {
                        m.openServerTime = r.int64();
                        break;
                      }

                    case 3:
                      {
                        m.logToken = r.string();
                        break;
                      }

                    case 4:
                      {
                        if (!(m.bagGirdList && m.bagGirdList.length)) m.bagGirdList = [];
                        m.bagGirdList.push($root.com.proto.MGrid.decode(r, r.uint32()));
                        break;
                      }

                    case 5:
                      {
                        if (!(m.advertising && m.advertising.length)) m.advertising = [];
                        m.advertising.push($root.com.proto.MAdvertising.decode(r, r.uint32()));
                        break;
                      }

                    case 6:
                      {
                        if (!(m.awaitOrder && m.awaitOrder.length)) m.awaitOrder = [];
                        m.awaitOrder.push($root.com.proto.MRecharge.decode(r, r.uint32()));
                        break;
                      }

                    case 7:
                      {
                        if (!(m.activity && m.activity.length)) m.activity = [];
                        m.activity.push($root.com.proto.MActivity.decode(r, r.uint32()));
                        break;
                      }

                    case 8:
                      {
                        if (!(m.analysisList && m.analysisList.length)) m.analysisList = [];

                        if ((t & 7) === 2) {
                          var c2 = r.uint32() + r.pos;

                          while (r.pos < c2) m.analysisList.push(r.int32());
                        } else m.analysisList.push(r.int32());

                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MLoginData;
            }();

            proto.Msg_3001_ = function () {
              /**
               * Properties of a Msg_3001_.
               * @memberof com.proto
               * @interface IMsg_3001_
               * @property {com.proto.IMPlayer|null} [player] Msg_3001_ player
               */

              /**
               * Constructs a new Msg_3001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_3001_.
               * @implements IMsg_3001_
               * @constructor
               * @param {com.proto.IMsg_3001_=} [p] Properties to set
               */
              function Msg_3001_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3001_ player.
               * @member {com.proto.IMPlayer|null|undefined} player
               * @memberof com.proto.Msg_3001_
               * @instance
               */


              Msg_3001_.prototype.player = null;
              /**
               * Creates a new Msg_3001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3001_
               * @static
               * @param {com.proto.IMsg_3001_=} [properties] Properties to set
               * @returns {com.proto.Msg_3001_} Msg_3001_ instance
               */

              Msg_3001_.create = function create(properties) {
                return new Msg_3001_(properties);
              };
              /**
               * Encodes the specified Msg_3001_ message. Does not implicitly {@link com.proto.Msg_3001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3001_
               * @static
               * @param {com.proto.IMsg_3001_} m Msg_3001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.player != null && Object.hasOwnProperty.call(m, "player")) $root.com.proto.MPlayer.encode(m.player, w.uint32(10).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_3001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3001_} Msg_3001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.player = $root.com.proto.MPlayer.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3001_;
            }();

            proto.Msg_3002 = function () {
              /**
               * Properties of a Msg_3002.
               * @memberof com.proto
               * @interface IMsg_3002
               * @property {com.proto.IMPlayer|null} [player] Msg_3002 player
               */

              /**
               * Constructs a new Msg_3002.
               * @memberof com.proto
               * @classdesc Represents a Msg_3002.
               * @implements IMsg_3002
               * @constructor
               * @param {com.proto.IMsg_3002=} [p] Properties to set
               */
              function Msg_3002(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3002 player.
               * @member {com.proto.IMPlayer|null|undefined} player
               * @memberof com.proto.Msg_3002
               * @instance
               */


              Msg_3002.prototype.player = null;
              /**
               * Creates a new Msg_3002 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3002
               * @static
               * @param {com.proto.IMsg_3002=} [properties] Properties to set
               * @returns {com.proto.Msg_3002} Msg_3002 instance
               */

              Msg_3002.create = function create(properties) {
                return new Msg_3002(properties);
              };
              /**
               * Encodes the specified Msg_3002 message. Does not implicitly {@link com.proto.Msg_3002.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3002
               * @static
               * @param {com.proto.IMsg_3002} m Msg_3002 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3002.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.player != null && Object.hasOwnProperty.call(m, "player")) $root.com.proto.MPlayer.encode(m.player, w.uint32(10).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_3002 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3002
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3002} Msg_3002
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3002.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3002();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.player = $root.com.proto.MPlayer.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3002;
            }();

            proto.Msg_3003 = function () {
              /**
               * Properties of a Msg_3003.
               * @memberof com.proto
               * @interface IMsg_3003
               */

              /**
               * Constructs a new Msg_3003.
               * @memberof com.proto
               * @classdesc Represents a Msg_3003.
               * @implements IMsg_3003
               * @constructor
               * @param {com.proto.IMsg_3003=} [p] Properties to set
               */
              function Msg_3003(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_3003 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3003
               * @static
               * @param {com.proto.IMsg_3003=} [properties] Properties to set
               * @returns {com.proto.Msg_3003} Msg_3003 instance
               */


              Msg_3003.create = function create(properties) {
                return new Msg_3003(properties);
              };
              /**
               * Encodes the specified Msg_3003 message. Does not implicitly {@link com.proto.Msg_3003.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3003
               * @static
               * @param {com.proto.IMsg_3003} m Msg_3003 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3003.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_3003 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3003
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3003} Msg_3003
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3003.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3003();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3003;
            }();

            proto.Msg_3003_ = function () {
              /**
               * Properties of a Msg_3003_.
               * @memberof com.proto
               * @interface IMsg_3003_
               * @property {string|null} [logToken] Msg_3003_ logToken
               */

              /**
               * Constructs a new Msg_3003_.
               * @memberof com.proto
               * @classdesc Represents a Msg_3003_.
               * @implements IMsg_3003_
               * @constructor
               * @param {com.proto.IMsg_3003_=} [p] Properties to set
               */
              function Msg_3003_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3003_ logToken.
               * @member {string} logToken
               * @memberof com.proto.Msg_3003_
               * @instance
               */


              Msg_3003_.prototype.logToken = "";
              /**
               * Creates a new Msg_3003_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3003_
               * @static
               * @param {com.proto.IMsg_3003_=} [properties] Properties to set
               * @returns {com.proto.Msg_3003_} Msg_3003_ instance
               */

              Msg_3003_.create = function create(properties) {
                return new Msg_3003_(properties);
              };
              /**
               * Encodes the specified Msg_3003_ message. Does not implicitly {@link com.proto.Msg_3003_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3003_
               * @static
               * @param {com.proto.IMsg_3003_} m Msg_3003_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3003_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.logToken != null && Object.hasOwnProperty.call(m, "logToken")) w.uint32(10).string(m.logToken);
                return w;
              };
              /**
               * Decodes a Msg_3003_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3003_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3003_} Msg_3003_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3003_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3003_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.logToken = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3003_;
            }();

            proto.Msg_3004 = function () {
              /**
               * Properties of a Msg_3004.
               * @memberof com.proto
               * @interface IMsg_3004
               * @property {string|null} [code] Msg_3004 code
               */

              /**
               * Constructs a new Msg_3004.
               * @memberof com.proto
               * @classdesc Represents a Msg_3004.
               * @implements IMsg_3004
               * @constructor
               * @param {com.proto.IMsg_3004=} [p] Properties to set
               */
              function Msg_3004(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3004 code.
               * @member {string} code
               * @memberof com.proto.Msg_3004
               * @instance
               */


              Msg_3004.prototype.code = "";
              /**
               * Creates a new Msg_3004 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3004
               * @static
               * @param {com.proto.IMsg_3004=} [properties] Properties to set
               * @returns {com.proto.Msg_3004} Msg_3004 instance
               */

              Msg_3004.create = function create(properties) {
                return new Msg_3004(properties);
              };
              /**
               * Encodes the specified Msg_3004 message. Does not implicitly {@link com.proto.Msg_3004.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3004
               * @static
               * @param {com.proto.IMsg_3004} m Msg_3004 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3004.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.code != null && Object.hasOwnProperty.call(m, "code")) w.uint32(10).string(m.code);
                return w;
              };
              /**
               * Decodes a Msg_3004 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3004
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3004} Msg_3004
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3004.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3004();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.code = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3004;
            }();

            proto.Msg_3004_ = function () {
              /**
               * Properties of a Msg_3004_.
               * @memberof com.proto
               * @interface IMsg_3004_
               */

              /**
               * Constructs a new Msg_3004_.
               * @memberof com.proto
               * @classdesc Represents a Msg_3004_.
               * @implements IMsg_3004_
               * @constructor
               * @param {com.proto.IMsg_3004_=} [p] Properties to set
               */
              function Msg_3004_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_3004_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3004_
               * @static
               * @param {com.proto.IMsg_3004_=} [properties] Properties to set
               * @returns {com.proto.Msg_3004_} Msg_3004_ instance
               */


              Msg_3004_.create = function create(properties) {
                return new Msg_3004_(properties);
              };
              /**
               * Encodes the specified Msg_3004_ message. Does not implicitly {@link com.proto.Msg_3004_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3004_
               * @static
               * @param {com.proto.IMsg_3004_} m Msg_3004_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3004_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_3004_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3004_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3004_} Msg_3004_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3004_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3004_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3004_;
            }();

            proto.Msg_3005_ = function () {
              /**
               * Properties of a Msg_3005_.
               * @memberof com.proto
               * @interface IMsg_3005_
               */

              /**
               * Constructs a new Msg_3005_.
               * @memberof com.proto
               * @classdesc Represents a Msg_3005_.
               * @implements IMsg_3005_
               * @constructor
               * @param {com.proto.IMsg_3005_=} [p] Properties to set
               */
              function Msg_3005_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_3005_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3005_
               * @static
               * @param {com.proto.IMsg_3005_=} [properties] Properties to set
               * @returns {com.proto.Msg_3005_} Msg_3005_ instance
               */


              Msg_3005_.create = function create(properties) {
                return new Msg_3005_(properties);
              };
              /**
               * Encodes the specified Msg_3005_ message. Does not implicitly {@link com.proto.Msg_3005_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3005_
               * @static
               * @param {com.proto.IMsg_3005_} m Msg_3005_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3005_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_3005_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3005_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3005_} Msg_3005_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3005_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3005_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3005_;
            }();

            proto.Msg_3006 = function () {
              /**
               * Properties of a Msg_3006.
               * @memberof com.proto
               * @interface IMsg_3006
               * @property {string|null} [name] Msg_3006 name
               */

              /**
               * Constructs a new Msg_3006.
               * @memberof com.proto
               * @classdesc Represents a Msg_3006.
               * @implements IMsg_3006
               * @constructor
               * @param {com.proto.IMsg_3006=} [p] Properties to set
               */
              function Msg_3006(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3006 name.
               * @member {string} name
               * @memberof com.proto.Msg_3006
               * @instance
               */


              Msg_3006.prototype.name = "";
              /**
               * Creates a new Msg_3006 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3006
               * @static
               * @param {com.proto.IMsg_3006=} [properties] Properties to set
               * @returns {com.proto.Msg_3006} Msg_3006 instance
               */

              Msg_3006.create = function create(properties) {
                return new Msg_3006(properties);
              };
              /**
               * Encodes the specified Msg_3006 message. Does not implicitly {@link com.proto.Msg_3006.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3006
               * @static
               * @param {com.proto.IMsg_3006} m Msg_3006 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3006.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(10).string(m.name);
                return w;
              };
              /**
               * Decodes a Msg_3006 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3006
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3006} Msg_3006
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3006.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3006();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.name = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3006;
            }();

            proto.Msg_3006_ = function () {
              /**
               * Properties of a Msg_3006_.
               * @memberof com.proto
               * @interface IMsg_3006_
               * @property {number|null} [state] Msg_3006_ state
               * @property {string|null} [name] Msg_3006_ name
               */

              /**
               * Constructs a new Msg_3006_.
               * @memberof com.proto
               * @classdesc Represents a Msg_3006_.
               * @implements IMsg_3006_
               * @constructor
               * @param {com.proto.IMsg_3006_=} [p] Properties to set
               */
              function Msg_3006_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3006_ state.
               * @member {number} state
               * @memberof com.proto.Msg_3006_
               * @instance
               */


              Msg_3006_.prototype.state = 0;
              /**
               * Msg_3006_ name.
               * @member {string} name
               * @memberof com.proto.Msg_3006_
               * @instance
               */

              Msg_3006_.prototype.name = "";
              /**
               * Creates a new Msg_3006_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3006_
               * @static
               * @param {com.proto.IMsg_3006_=} [properties] Properties to set
               * @returns {com.proto.Msg_3006_} Msg_3006_ instance
               */

              Msg_3006_.create = function create(properties) {
                return new Msg_3006_(properties);
              };
              /**
               * Encodes the specified Msg_3006_ message. Does not implicitly {@link com.proto.Msg_3006_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3006_
               * @static
               * @param {com.proto.IMsg_3006_} m Msg_3006_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3006_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.state != null && Object.hasOwnProperty.call(m, "state")) w.uint32(8).int32(m.state);
                if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(18).string(m.name);
                return w;
              };
              /**
               * Decodes a Msg_3006_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3006_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3006_} Msg_3006_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3006_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3006_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.state = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.name = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3006_;
            }();

            proto.Msg_3007 = function () {
              /**
               * Properties of a Msg_3007.
               * @memberof com.proto
               * @interface IMsg_3007
               * @property {number|null} [imageId] Msg_3007 imageId
               */

              /**
               * Constructs a new Msg_3007.
               * @memberof com.proto
               * @classdesc Represents a Msg_3007.
               * @implements IMsg_3007
               * @constructor
               * @param {com.proto.IMsg_3007=} [p] Properties to set
               */
              function Msg_3007(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3007 imageId.
               * @member {number} imageId
               * @memberof com.proto.Msg_3007
               * @instance
               */


              Msg_3007.prototype.imageId = 0;
              /**
               * Creates a new Msg_3007 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3007
               * @static
               * @param {com.proto.IMsg_3007=} [properties] Properties to set
               * @returns {com.proto.Msg_3007} Msg_3007 instance
               */

              Msg_3007.create = function create(properties) {
                return new Msg_3007(properties);
              };
              /**
               * Encodes the specified Msg_3007 message. Does not implicitly {@link com.proto.Msg_3007.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3007
               * @static
               * @param {com.proto.IMsg_3007} m Msg_3007 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3007.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.imageId != null && Object.hasOwnProperty.call(m, "imageId")) w.uint32(8).int32(m.imageId);
                return w;
              };
              /**
               * Decodes a Msg_3007 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3007
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3007} Msg_3007
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3007.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3007();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.imageId = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3007;
            }();

            proto.Msg_3007_ = function () {
              /**
               * Properties of a Msg_3007_.
               * @memberof com.proto
               * @interface IMsg_3007_
               * @property {number|null} [state] Msg_3007_ state
               * @property {number|null} [imageId] Msg_3007_ imageId
               */

              /**
               * Constructs a new Msg_3007_.
               * @memberof com.proto
               * @classdesc Represents a Msg_3007_.
               * @implements IMsg_3007_
               * @constructor
               * @param {com.proto.IMsg_3007_=} [p] Properties to set
               */
              function Msg_3007_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_3007_ state.
               * @member {number} state
               * @memberof com.proto.Msg_3007_
               * @instance
               */


              Msg_3007_.prototype.state = 0;
              /**
               * Msg_3007_ imageId.
               * @member {number} imageId
               * @memberof com.proto.Msg_3007_
               * @instance
               */

              Msg_3007_.prototype.imageId = 0;
              /**
               * Creates a new Msg_3007_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_3007_
               * @static
               * @param {com.proto.IMsg_3007_=} [properties] Properties to set
               * @returns {com.proto.Msg_3007_} Msg_3007_ instance
               */

              Msg_3007_.create = function create(properties) {
                return new Msg_3007_(properties);
              };
              /**
               * Encodes the specified Msg_3007_ message. Does not implicitly {@link com.proto.Msg_3007_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_3007_
               * @static
               * @param {com.proto.IMsg_3007_} m Msg_3007_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_3007_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.state != null && Object.hasOwnProperty.call(m, "state")) w.uint32(8).int32(m.state);
                if (m.imageId != null && Object.hasOwnProperty.call(m, "imageId")) w.uint32(16).int32(m.imageId);
                return w;
              };
              /**
               * Decodes a Msg_3007_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_3007_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_3007_} Msg_3007_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_3007_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_3007_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.state = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.imageId = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_3007_;
            }();

            proto.MRecharge = function () {
              /**
               * Properties of a MRecharge.
               * @memberof com.proto
               * @interface IMRecharge
               * @property {number|Long|null} [oriderId] MRecharge oriderId
               * @property {number|Long|null} [uid] MRecharge uid
               * @property {string|null} [cpBillNo] MRecharge cpBillNo
               * @property {number|null} [subjectId] MRecharge subjectId
               */

              /**
               * Constructs a new MRecharge.
               * @memberof com.proto
               * @classdesc Represents a MRecharge.
               * @implements IMRecharge
               * @constructor
               * @param {com.proto.IMRecharge=} [p] Properties to set
               */
              function MRecharge(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MRecharge oriderId.
               * @member {number|Long} oriderId
               * @memberof com.proto.MRecharge
               * @instance
               */


              MRecharge.prototype.oriderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MRecharge uid.
               * @member {number|Long} uid
               * @memberof com.proto.MRecharge
               * @instance
               */

              MRecharge.prototype.uid = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MRecharge cpBillNo.
               * @member {string} cpBillNo
               * @memberof com.proto.MRecharge
               * @instance
               */

              MRecharge.prototype.cpBillNo = "";
              /**
               * MRecharge subjectId.
               * @member {number} subjectId
               * @memberof com.proto.MRecharge
               * @instance
               */

              MRecharge.prototype.subjectId = 0;
              /**
               * Creates a new MRecharge instance using the specified properties.
               * @function create
               * @memberof com.proto.MRecharge
               * @static
               * @param {com.proto.IMRecharge=} [properties] Properties to set
               * @returns {com.proto.MRecharge} MRecharge instance
               */

              MRecharge.create = function create(properties) {
                return new MRecharge(properties);
              };
              /**
               * Encodes the specified MRecharge message. Does not implicitly {@link com.proto.MRecharge.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MRecharge
               * @static
               * @param {com.proto.IMRecharge} m MRecharge message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MRecharge.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.oriderId != null && Object.hasOwnProperty.call(m, "oriderId")) w.uint32(8).int64(m.oriderId);
                if (m.uid != null && Object.hasOwnProperty.call(m, "uid")) w.uint32(16).int64(m.uid);
                if (m.cpBillNo != null && Object.hasOwnProperty.call(m, "cpBillNo")) w.uint32(26).string(m.cpBillNo);
                if (m.subjectId != null && Object.hasOwnProperty.call(m, "subjectId")) w.uint32(32).int32(m.subjectId);
                return w;
              };
              /**
               * Decodes a MRecharge message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MRecharge
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MRecharge} MRecharge
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MRecharge.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MRecharge();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.oriderId = r.int64();
                        break;
                      }

                    case 2:
                      {
                        m.uid = r.int64();
                        break;
                      }

                    case 3:
                      {
                        m.cpBillNo = r.string();
                        break;
                      }

                    case 4:
                      {
                        m.subjectId = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MRecharge;
            }();

            proto.Msg_41000_ = function () {
              /**
               * Properties of a Msg_41000_.
               * @memberof com.proto
               * @interface IMsg_41000_
               * @property {com.proto.IMRecharge|null} [recharge] Msg_41000_ recharge
               */

              /**
               * Constructs a new Msg_41000_.
               * @memberof com.proto
               * @classdesc Represents a Msg_41000_.
               * @implements IMsg_41000_
               * @constructor
               * @param {com.proto.IMsg_41000_=} [p] Properties to set
               */
              function Msg_41000_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_41000_ recharge.
               * @member {com.proto.IMRecharge|null|undefined} recharge
               * @memberof com.proto.Msg_41000_
               * @instance
               */


              Msg_41000_.prototype.recharge = null;
              /**
               * Creates a new Msg_41000_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_41000_
               * @static
               * @param {com.proto.IMsg_41000_=} [properties] Properties to set
               * @returns {com.proto.Msg_41000_} Msg_41000_ instance
               */

              Msg_41000_.create = function create(properties) {
                return new Msg_41000_(properties);
              };
              /**
               * Encodes the specified Msg_41000_ message. Does not implicitly {@link com.proto.Msg_41000_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_41000_
               * @static
               * @param {com.proto.IMsg_41000_} m Msg_41000_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_41000_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.recharge != null && Object.hasOwnProperty.call(m, "recharge")) $root.com.proto.MRecharge.encode(m.recharge, w.uint32(10).fork()).ldelim();
                return w;
              };
              /**
               * Decodes a Msg_41000_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_41000_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_41000_} Msg_41000_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_41000_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_41000_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.recharge = $root.com.proto.MRecharge.decode(r, r.uint32());
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_41000_;
            }();

            proto.Msg_41001 = function () {
              /**
               * Properties of a Msg_41001.
               * @memberof com.proto
               * @interface IMsg_41001
               * @property {number|Long|null} [oriderId] Msg_41001 oriderId
               */

              /**
               * Constructs a new Msg_41001.
               * @memberof com.proto
               * @classdesc Represents a Msg_41001.
               * @implements IMsg_41001
               * @constructor
               * @param {com.proto.IMsg_41001=} [p] Properties to set
               */
              function Msg_41001(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_41001 oriderId.
               * @member {number|Long} oriderId
               * @memberof com.proto.Msg_41001
               * @instance
               */


              Msg_41001.prototype.oriderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new Msg_41001 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_41001
               * @static
               * @param {com.proto.IMsg_41001=} [properties] Properties to set
               * @returns {com.proto.Msg_41001} Msg_41001 instance
               */

              Msg_41001.create = function create(properties) {
                return new Msg_41001(properties);
              };
              /**
               * Encodes the specified Msg_41001 message. Does not implicitly {@link com.proto.Msg_41001.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_41001
               * @static
               * @param {com.proto.IMsg_41001} m Msg_41001 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_41001.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.oriderId != null && Object.hasOwnProperty.call(m, "oriderId")) w.uint32(8).int64(m.oriderId);
                return w;
              };
              /**
               * Decodes a Msg_41001 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_41001
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_41001} Msg_41001
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_41001.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_41001();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.oriderId = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_41001;
            }();

            proto.Msg_41001_ = function () {
              /**
               * Properties of a Msg_41001_.
               * @memberof com.proto
               * @interface IMsg_41001_
               * @property {number|Long|null} [oriderId] Msg_41001_ oriderId
               */

              /**
               * Constructs a new Msg_41001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_41001_.
               * @implements IMsg_41001_
               * @constructor
               * @param {com.proto.IMsg_41001_=} [p] Properties to set
               */
              function Msg_41001_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_41001_ oriderId.
               * @member {number|Long} oriderId
               * @memberof com.proto.Msg_41001_
               * @instance
               */


              Msg_41001_.prototype.oriderId = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new Msg_41001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_41001_
               * @static
               * @param {com.proto.IMsg_41001_=} [properties] Properties to set
               * @returns {com.proto.Msg_41001_} Msg_41001_ instance
               */

              Msg_41001_.create = function create(properties) {
                return new Msg_41001_(properties);
              };
              /**
               * Encodes the specified Msg_41001_ message. Does not implicitly {@link com.proto.Msg_41001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_41001_
               * @static
               * @param {com.proto.IMsg_41001_} m Msg_41001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_41001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.oriderId != null && Object.hasOwnProperty.call(m, "oriderId")) w.uint32(8).int64(m.oriderId);
                return w;
              };
              /**
               * Decodes a Msg_41001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_41001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_41001_} Msg_41001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_41001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_41001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.oriderId = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_41001_;
            }();

            proto.MModule = function () {
              /**
               * Properties of a MModule.
               * @memberof com.proto
               * @interface IMModule
               * @property {number|null} [type] MModule type
               * @property {string|null} [moduleData] MModule moduleData
               */

              /**
               * Constructs a new MModule.
               * @memberof com.proto
               * @classdesc Represents a MModule.
               * @implements IMModule
               * @constructor
               * @param {com.proto.IMModule=} [p] Properties to set
               */
              function MModule(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MModule type.
               * @member {number} type
               * @memberof com.proto.MModule
               * @instance
               */


              MModule.prototype.type = 0;
              /**
               * MModule moduleData.
               * @member {string} moduleData
               * @memberof com.proto.MModule
               * @instance
               */

              MModule.prototype.moduleData = "";
              /**
               * Creates a new MModule instance using the specified properties.
               * @function create
               * @memberof com.proto.MModule
               * @static
               * @param {com.proto.IMModule=} [properties] Properties to set
               * @returns {com.proto.MModule} MModule instance
               */

              MModule.create = function create(properties) {
                return new MModule(properties);
              };
              /**
               * Encodes the specified MModule message. Does not implicitly {@link com.proto.MModule.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MModule
               * @static
               * @param {com.proto.IMModule} m MModule message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MModule.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.type != null && Object.hasOwnProperty.call(m, "type")) w.uint32(8).int32(m.type);
                if (m.moduleData != null && Object.hasOwnProperty.call(m, "moduleData")) w.uint32(18).string(m.moduleData);
                return w;
              };
              /**
               * Decodes a MModule message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MModule
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MModule} MModule
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MModule.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MModule();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.type = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.moduleData = r.string();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MModule;
            }();

            proto.Msg_4001 = function () {
              /**
               * Properties of a Msg_4001.
               * @memberof com.proto
               * @interface IMsg_4001
               * @property {Array.<com.proto.IMModule>|null} [module] Msg_4001 module
               */

              /**
               * Constructs a new Msg_4001.
               * @memberof com.proto
               * @classdesc Represents a Msg_4001.
               * @implements IMsg_4001
               * @constructor
               * @param {com.proto.IMsg_4001=} [p] Properties to set
               */
              function Msg_4001(p) {
                this.module = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_4001 module.
               * @member {Array.<com.proto.IMModule>} module
               * @memberof com.proto.Msg_4001
               * @instance
               */


              Msg_4001.prototype.module = $util.emptyArray;
              /**
               * Creates a new Msg_4001 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_4001
               * @static
               * @param {com.proto.IMsg_4001=} [properties] Properties to set
               * @returns {com.proto.Msg_4001} Msg_4001 instance
               */

              Msg_4001.create = function create(properties) {
                return new Msg_4001(properties);
              };
              /**
               * Encodes the specified Msg_4001 message. Does not implicitly {@link com.proto.Msg_4001.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_4001
               * @static
               * @param {com.proto.IMsg_4001} m Msg_4001 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_4001.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.module != null && m.module.length) {
                  for (var i = 0; i < m.module.length; ++i) $root.com.proto.MModule.encode(m.module[i], w.uint32(10).fork()).ldelim();
                }

                return w;
              };
              /**
               * Decodes a Msg_4001 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_4001
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_4001} Msg_4001
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_4001.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_4001();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.module && m.module.length)) m.module = [];
                        m.module.push($root.com.proto.MModule.decode(r, r.uint32()));
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_4001;
            }();

            proto.Msg_4001_ = function () {
              /**
               * Properties of a Msg_4001_.
               * @memberof com.proto
               * @interface IMsg_4001_
               */

              /**
               * Constructs a new Msg_4001_.
               * @memberof com.proto
               * @classdesc Represents a Msg_4001_.
               * @implements IMsg_4001_
               * @constructor
               * @param {com.proto.IMsg_4001_=} [p] Properties to set
               */
              function Msg_4001_(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Creates a new Msg_4001_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_4001_
               * @static
               * @param {com.proto.IMsg_4001_=} [properties] Properties to set
               * @returns {com.proto.Msg_4001_} Msg_4001_ instance
               */


              Msg_4001_.create = function create(properties) {
                return new Msg_4001_(properties);
              };
              /**
               * Encodes the specified Msg_4001_ message. Does not implicitly {@link com.proto.Msg_4001_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_4001_
               * @static
               * @param {com.proto.IMsg_4001_} m Msg_4001_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_4001_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                return w;
              };
              /**
               * Decodes a Msg_4001_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_4001_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_4001_} Msg_4001_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_4001_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_4001_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_4001_;
            }();

            proto.Msg_4002 = function () {
              /**
               * Properties of a Msg_4002.
               * @memberof com.proto
               * @interface IMsg_4002
               * @property {Array.<number>|null} [types] Msg_4002 types
               */

              /**
               * Constructs a new Msg_4002.
               * @memberof com.proto
               * @classdesc Represents a Msg_4002.
               * @implements IMsg_4002
               * @constructor
               * @param {com.proto.IMsg_4002=} [p] Properties to set
               */
              function Msg_4002(p) {
                this.types = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_4002 types.
               * @member {Array.<number>} types
               * @memberof com.proto.Msg_4002
               * @instance
               */


              Msg_4002.prototype.types = $util.emptyArray;
              /**
               * Creates a new Msg_4002 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_4002
               * @static
               * @param {com.proto.IMsg_4002=} [properties] Properties to set
               * @returns {com.proto.Msg_4002} Msg_4002 instance
               */

              Msg_4002.create = function create(properties) {
                return new Msg_4002(properties);
              };
              /**
               * Encodes the specified Msg_4002 message. Does not implicitly {@link com.proto.Msg_4002.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_4002
               * @static
               * @param {com.proto.IMsg_4002} m Msg_4002 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_4002.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.types != null && m.types.length) {
                  for (var i = 0; i < m.types.length; ++i) w.uint32(8).int32(m.types[i]);
                }

                return w;
              };
              /**
               * Decodes a Msg_4002 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_4002
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_4002} Msg_4002
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_4002.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_4002();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.types && m.types.length)) m.types = [];

                        if ((t & 7) === 2) {
                          var c2 = r.uint32() + r.pos;

                          while (r.pos < c2) m.types.push(r.int32());
                        } else m.types.push(r.int32());

                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_4002;
            }();

            proto.Msg_4002_ = function () {
              /**
               * Properties of a Msg_4002_.
               * @memberof com.proto
               * @interface IMsg_4002_
               * @property {Array.<com.proto.IMModule>|null} [module] Msg_4002_ module
               */

              /**
               * Constructs a new Msg_4002_.
               * @memberof com.proto
               * @classdesc Represents a Msg_4002_.
               * @implements IMsg_4002_
               * @constructor
               * @param {com.proto.IMsg_4002_=} [p] Properties to set
               */
              function Msg_4002_(p) {
                this.module = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_4002_ module.
               * @member {Array.<com.proto.IMModule>} module
               * @memberof com.proto.Msg_4002_
               * @instance
               */


              Msg_4002_.prototype.module = $util.emptyArray;
              /**
               * Creates a new Msg_4002_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_4002_
               * @static
               * @param {com.proto.IMsg_4002_=} [properties] Properties to set
               * @returns {com.proto.Msg_4002_} Msg_4002_ instance
               */

              Msg_4002_.create = function create(properties) {
                return new Msg_4002_(properties);
              };
              /**
               * Encodes the specified Msg_4002_ message. Does not implicitly {@link com.proto.Msg_4002_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_4002_
               * @static
               * @param {com.proto.IMsg_4002_} m Msg_4002_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_4002_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.module != null && m.module.length) {
                  for (var i = 0; i < m.module.length; ++i) $root.com.proto.MModule.encode(m.module[i], w.uint32(10).fork()).ldelim();
                }

                return w;
              };
              /**
               * Decodes a Msg_4002_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_4002_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_4002_} Msg_4002_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_4002_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_4002_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.module && m.module.length)) m.module = [];
                        m.module.push($root.com.proto.MModule.decode(r, r.uint32()));
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_4002_;
            }();

            proto.Msg_4003_ = function () {
              /**
               * Properties of a Msg_4003_.
               * @memberof com.proto
               * @interface IMsg_4003_
               * @property {Array.<number>|null} [analysisList] Msg_4003_ analysisList
               */

              /**
               * Constructs a new Msg_4003_.
               * @memberof com.proto
               * @classdesc Represents a Msg_4003_.
               * @implements IMsg_4003_
               * @constructor
               * @param {com.proto.IMsg_4003_=} [p] Properties to set
               */
              function Msg_4003_(p) {
                this.analysisList = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_4003_ analysisList.
               * @member {Array.<number>} analysisList
               * @memberof com.proto.Msg_4003_
               * @instance
               */


              Msg_4003_.prototype.analysisList = $util.emptyArray;
              /**
               * Creates a new Msg_4003_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_4003_
               * @static
               * @param {com.proto.IMsg_4003_=} [properties] Properties to set
               * @returns {com.proto.Msg_4003_} Msg_4003_ instance
               */

              Msg_4003_.create = function create(properties) {
                return new Msg_4003_(properties);
              };
              /**
               * Encodes the specified Msg_4003_ message. Does not implicitly {@link com.proto.Msg_4003_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_4003_
               * @static
               * @param {com.proto.IMsg_4003_} m Msg_4003_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_4003_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();

                if (m.analysisList != null && m.analysisList.length) {
                  for (var i = 0; i < m.analysisList.length; ++i) w.uint32(8).int32(m.analysisList[i]);
                }

                return w;
              };
              /**
               * Decodes a Msg_4003_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_4003_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_4003_} Msg_4003_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_4003_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_4003_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        if (!(m.analysisList && m.analysisList.length)) m.analysisList = [];

                        if ((t & 7) === 2) {
                          var c2 = r.uint32() + r.pos;

                          while (r.pos < c2) m.analysisList.push(r.int32());
                        } else m.analysisList.push(r.int32());

                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_4003_;
            }();

            proto.MRankData = function () {
              /**
               * Properties of a MRankData.
               * @memberof com.proto
               * @interface IMRankData
               * @property {number|null} [sysId] MRankData sysId
               * @property {number|null} [rank] MRankData rank
               * @property {number|Long|null} [id] MRankData id
               * @property {string|null} [name] MRankData name
               * @property {number|Long|null} [score] MRankData score
               * @property {number|null} [imageId] MRankData imageId
               */

              /**
               * Constructs a new MRankData.
               * @memberof com.proto
               * @classdesc Represents a MRankData.
               * @implements IMRankData
               * @constructor
               * @param {com.proto.IMRankData=} [p] Properties to set
               */
              function MRankData(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * MRankData sysId.
               * @member {number} sysId
               * @memberof com.proto.MRankData
               * @instance
               */


              MRankData.prototype.sysId = 0;
              /**
               * MRankData rank.
               * @member {number} rank
               * @memberof com.proto.MRankData
               * @instance
               */

              MRankData.prototype.rank = 0;
              /**
               * MRankData id.
               * @member {number|Long} id
               * @memberof com.proto.MRankData
               * @instance
               */

              MRankData.prototype.id = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MRankData name.
               * @member {string} name
               * @memberof com.proto.MRankData
               * @instance
               */

              MRankData.prototype.name = "";
              /**
               * MRankData score.
               * @member {number|Long} score
               * @memberof com.proto.MRankData
               * @instance
               */

              MRankData.prototype.score = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * MRankData imageId.
               * @member {number} imageId
               * @memberof com.proto.MRankData
               * @instance
               */

              MRankData.prototype.imageId = 0;
              /**
               * Creates a new MRankData instance using the specified properties.
               * @function create
               * @memberof com.proto.MRankData
               * @static
               * @param {com.proto.IMRankData=} [properties] Properties to set
               * @returns {com.proto.MRankData} MRankData instance
               */

              MRankData.create = function create(properties) {
                return new MRankData(properties);
              };
              /**
               * Encodes the specified MRankData message. Does not implicitly {@link com.proto.MRankData.verify|verify} messages.
               * @function encode
               * @memberof com.proto.MRankData
               * @static
               * @param {com.proto.IMRankData} m MRankData message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              MRankData.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.sysId != null && Object.hasOwnProperty.call(m, "sysId")) w.uint32(8).int32(m.sysId);
                if (m.rank != null && Object.hasOwnProperty.call(m, "rank")) w.uint32(16).int32(m.rank);
                if (m.id != null && Object.hasOwnProperty.call(m, "id")) w.uint32(24).int64(m.id);
                if (m.name != null && Object.hasOwnProperty.call(m, "name")) w.uint32(34).string(m.name);
                if (m.score != null && Object.hasOwnProperty.call(m, "score")) w.uint32(40).int64(m.score);
                if (m.imageId != null && Object.hasOwnProperty.call(m, "imageId")) w.uint32(48).int32(m.imageId);
                return w;
              };
              /**
               * Decodes a MRankData message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.MRankData
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.MRankData} MRankData
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              MRankData.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.MRankData();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.sysId = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.rank = r.int32();
                        break;
                      }

                    case 3:
                      {
                        m.id = r.int64();
                        break;
                      }

                    case 4:
                      {
                        m.name = r.string();
                        break;
                      }

                    case 5:
                      {
                        m.score = r.int64();
                        break;
                      }

                    case 6:
                      {
                        m.imageId = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return MRankData;
            }();

            proto.Msg_9001 = function () {
              /**
               * Properties of a Msg_9001.
               * @memberof com.proto
               * @interface IMsg_9001
               * @property {number|null} [sysId] Msg_9001 sysId
               * @property {number|Long|null} [score] Msg_9001 score
               */

              /**
               * Constructs a new Msg_9001.
               * @memberof com.proto
               * @classdesc Represents a Msg_9001.
               * @implements IMsg_9001
               * @constructor
               * @param {com.proto.IMsg_9001=} [p] Properties to set
               */
              function Msg_9001(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_9001 sysId.
               * @member {number} sysId
               * @memberof com.proto.Msg_9001
               * @instance
               */


              Msg_9001.prototype.sysId = 0;
              /**
               * Msg_9001 score.
               * @member {number|Long} score
               * @memberof com.proto.Msg_9001
               * @instance
               */

              Msg_9001.prototype.score = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new Msg_9001 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_9001
               * @static
               * @param {com.proto.IMsg_9001=} [properties] Properties to set
               * @returns {com.proto.Msg_9001} Msg_9001 instance
               */

              Msg_9001.create = function create(properties) {
                return new Msg_9001(properties);
              };
              /**
               * Encodes the specified Msg_9001 message. Does not implicitly {@link com.proto.Msg_9001.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_9001
               * @static
               * @param {com.proto.IMsg_9001} m Msg_9001 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_9001.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.sysId != null && Object.hasOwnProperty.call(m, "sysId")) w.uint32(8).int32(m.sysId);
                if (m.score != null && Object.hasOwnProperty.call(m, "score")) w.uint32(16).int64(m.score);
                return w;
              };
              /**
               * Decodes a Msg_9001 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_9001
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_9001} Msg_9001
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_9001.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_9001();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.sysId = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.score = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_9001;
            }();

            proto.Msg_9002 = function () {
              /**
               * Properties of a Msg_9002.
               * @memberof com.proto
               * @interface IMsg_9002
               * @property {number|null} [sysId] Msg_9002 sysId
               * @property {number|null} [page] Msg_9002 page
               */

              /**
               * Constructs a new Msg_9002.
               * @memberof com.proto
               * @classdesc Represents a Msg_9002.
               * @implements IMsg_9002
               * @constructor
               * @param {com.proto.IMsg_9002=} [p] Properties to set
               */
              function Msg_9002(p) {
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_9002 sysId.
               * @member {number} sysId
               * @memberof com.proto.Msg_9002
               * @instance
               */


              Msg_9002.prototype.sysId = 0;
              /**
               * Msg_9002 page.
               * @member {number} page
               * @memberof com.proto.Msg_9002
               * @instance
               */

              Msg_9002.prototype.page = 0;
              /**
               * Creates a new Msg_9002 instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_9002
               * @static
               * @param {com.proto.IMsg_9002=} [properties] Properties to set
               * @returns {com.proto.Msg_9002} Msg_9002 instance
               */

              Msg_9002.create = function create(properties) {
                return new Msg_9002(properties);
              };
              /**
               * Encodes the specified Msg_9002 message. Does not implicitly {@link com.proto.Msg_9002.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_9002
               * @static
               * @param {com.proto.IMsg_9002} m Msg_9002 message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_9002.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.sysId != null && Object.hasOwnProperty.call(m, "sysId")) w.uint32(8).int32(m.sysId);
                if (m.page != null && Object.hasOwnProperty.call(m, "page")) w.uint32(16).int32(m.page);
                return w;
              };
              /**
               * Decodes a Msg_9002 message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_9002
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_9002} Msg_9002
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_9002.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_9002();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.sysId = r.int32();
                        break;
                      }

                    case 2:
                      {
                        m.page = r.int32();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_9002;
            }();

            proto.Msg_9002_ = function () {
              /**
               * Properties of a Msg_9002_.
               * @memberof com.proto
               * @interface IMsg_9002_
               * @property {number|null} [sysId] Msg_9002_ sysId
               * @property {Array.<com.proto.IMRankData>|null} [rankData] Msg_9002_ rankData
               * @property {number|null} [currRank] Msg_9002_ currRank
               * @property {number|Long|null} [currScore] Msg_9002_ currScore
               */

              /**
               * Constructs a new Msg_9002_.
               * @memberof com.proto
               * @classdesc Represents a Msg_9002_.
               * @implements IMsg_9002_
               * @constructor
               * @param {com.proto.IMsg_9002_=} [p] Properties to set
               */
              function Msg_9002_(p) {
                this.rankData = [];
                if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];
              }
              /**
               * Msg_9002_ sysId.
               * @member {number} sysId
               * @memberof com.proto.Msg_9002_
               * @instance
               */


              Msg_9002_.prototype.sysId = 0;
              /**
               * Msg_9002_ rankData.
               * @member {Array.<com.proto.IMRankData>} rankData
               * @memberof com.proto.Msg_9002_
               * @instance
               */

              Msg_9002_.prototype.rankData = $util.emptyArray;
              /**
               * Msg_9002_ currRank.
               * @member {number} currRank
               * @memberof com.proto.Msg_9002_
               * @instance
               */

              Msg_9002_.prototype.currRank = 0;
              /**
               * Msg_9002_ currScore.
               * @member {number|Long} currScore
               * @memberof com.proto.Msg_9002_
               * @instance
               */

              Msg_9002_.prototype.currScore = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;
              /**
               * Creates a new Msg_9002_ instance using the specified properties.
               * @function create
               * @memberof com.proto.Msg_9002_
               * @static
               * @param {com.proto.IMsg_9002_=} [properties] Properties to set
               * @returns {com.proto.Msg_9002_} Msg_9002_ instance
               */

              Msg_9002_.create = function create(properties) {
                return new Msg_9002_(properties);
              };
              /**
               * Encodes the specified Msg_9002_ message. Does not implicitly {@link com.proto.Msg_9002_.verify|verify} messages.
               * @function encode
               * @memberof com.proto.Msg_9002_
               * @static
               * @param {com.proto.IMsg_9002_} m Msg_9002_ message or plain object to encode
               * @param {$protobuf.Writer} [w] Writer to encode to
               * @returns {$protobuf.Writer} Writer
               */


              Msg_9002_.encode = function encode(m, w) {
                if (!w) w = $Writer.create();
                if (m.sysId != null && Object.hasOwnProperty.call(m, "sysId")) w.uint32(8).int32(m.sysId);

                if (m.rankData != null && m.rankData.length) {
                  for (var i = 0; i < m.rankData.length; ++i) $root.com.proto.MRankData.encode(m.rankData[i], w.uint32(18).fork()).ldelim();
                }

                if (m.currRank != null && Object.hasOwnProperty.call(m, "currRank")) w.uint32(24).int32(m.currRank);
                if (m.currScore != null && Object.hasOwnProperty.call(m, "currScore")) w.uint32(32).int64(m.currScore);
                return w;
              };
              /**
               * Decodes a Msg_9002_ message from the specified reader or buffer.
               * @function decode
               * @memberof com.proto.Msg_9002_
               * @static
               * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from
               * @param {number} [l] Message length if known beforehand
               * @returns {com.proto.Msg_9002_} Msg_9002_
               * @throws {Error} If the payload is not a reader or valid buffer
               * @throws {$protobuf.util.ProtocolError} If required fields are missing
               */


              Msg_9002_.decode = function decode(r, l) {
                if (!(r instanceof $Reader)) r = $Reader.create(r);
                var c = l === undefined ? r.len : r.pos + l,
                    m = new $root.com.proto.Msg_9002_();

                while (r.pos < c) {
                  var t = r.uint32();

                  switch (t >>> 3) {
                    case 1:
                      {
                        m.sysId = r.int32();
                        break;
                      }

                    case 2:
                      {
                        if (!(m.rankData && m.rankData.length)) m.rankData = [];
                        m.rankData.push($root.com.proto.MRankData.decode(r, r.uint32()));
                        break;
                      }

                    case 3:
                      {
                        m.currRank = r.int32();
                        break;
                      }

                    case 4:
                      {
                        m.currScore = r.int64();
                        break;
                      }

                    default:
                      r.skipType(t & 7);
                      break;
                  }
                }

                return m;
              };

              return Msg_9002_;
            }();

            return proto;
          }();

          return com;
        }();

        module.exports = $root; // #endregion ORIGINAL CODE

        _cjsExports = exports('default', module.exports);
      }, function () {
        return {
          'protobufjs/minimal': __cjsMetaURL$1
        };
      });
    }
  };
});

System.register("chunks:///_virtual/proto.bundle.mjs_cjs=&original=.js", ['./proto.bundle.js', './cjs-loader.mjs'], function (exports, module) {
  var __cjsMetaURL, loader;

  return {
    setters: [function (module) {
      __cjsMetaURL = module.__cjsMetaURL;
      var _setter = {};
      _setter.__cjsMetaURL = module.__cjsMetaURL;
      _setter.default = module.default;
      exports(_setter);
    }, function (module) {
      loader = module.default;
    }],
    execute: function () {
      // I am the facade module who provides access to the CommonJS module './proto.bundle.js'~
      if (!__cjsMetaURL) {
        loader.throwInvalidWrapper('./proto.bundle.js', module.meta.url);
      }

      loader.require(__cjsMetaURL);
    }
  };
});

System.register("chunks:///_virtual/Proxy.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Notifier.ts', './WService.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Notifier, WService;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Notifier = module.Notifier;
    }, function (module) {
      WService = module.WService;
    }],
    execute: function () {
      cclegacy._RF.push({}, "f6ad4133nRJOqwV7edhK3Fb", "Proxy", undefined);
      /** @public */


      var Proxy = exports('Proxy', /*#__PURE__*/function (_Notifier) {
        _inheritsLoose(Proxy, _Notifier);

        function Proxy(proxyName, data) {
          var _this;

          _this = _Notifier.call(this) || this;
          _this._module = void 0;
          _this._proxyName = void 0;
          _this._data = null;
          _this._protoList = [];
          proxyName = proxyName != null ? proxyName : Proxy.NAME;
          _this._proxyName = proxyName;
          if (data != null) _this.setData(data);
          return _this;
        }

        var _proto = Proxy.prototype;

        _proto.startReconnect = function startReconnect() {
          // 短线重连
          var list = this._protoList;

          while (list.length) {
            var obj = list.pop();
          }

          this.onStartReconnect();
        };

        _proto.sendProto = function sendProto(proto) {
          Proxy.wService.sendProto(proto);
        };

        _proto.onProto = function onProto(proto, method, context) {// var data = { proto: proto, method: method, context: context };
          // this._protoList.push(data);
          // Proxy.wService.onNotification(proto, method, context);
        };

        _proto.offProto = function offProto(proto, method, context) {// Proxy.wService.offNotification(proto, method, context);
          // var list = this._protoList;
          // for (var i = 0, len = list.length; i < len; i++) {
          //     var obj = list[i];
          //     if (obj && obj.proto === proto && obj.method == method) {
          //         list.splice(i, 1);
          //         i--;
          //         len--;
          //     }
          // }
        };

        _proto.setModule = function setModule(module) {
          this._module = module;
        };

        _proto.retrieveProxy = function retrieveProxy(proxyName) {
          return this._module.retrieveProxy(proxyName);
        };

        _proto.getProxyName = function getProxyName() {
          return this._proxyName;
        };

        _proto.setData = function setData(data) {
          this._data = data;
        };

        _proto.getData = function getData() {
          return this._data;
        };

        _proto.onRegister = function onRegister() {};

        _proto.onRemove = function onRemove() {};

        _proto.onStartReconnect = function onStartReconnect() {};

        return Proxy;
      }(Notifier));
      Proxy.wService = new WService();
      Proxy.NAME = "Proxy";

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/PureMVC.ts", ['cc', './Facade.ts', './Proxy.ts', './Module.ts', './Command.ts', './Mediator.ts', './Notification.ts'], function (exports) {
  var cclegacy, Facade;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Facade = module.Facade;
    }, function (module) {
      exports('DDProxy', module.Proxy);
    }, function (module) {
      exports('Module', module.Module);
    }, function (module) {
      exports('Command', module.Command);
    }, function (module) {
      exports('Mediator', module.Mediator);
    }, function (module) {
      exports('DNotification', module.Notification);
    }],
    execute: function () {
      cclegacy._RF.push({}, "efa10IhjPlMTauYF8OtrTX0", "PureMVC", undefined);

      var facade = exports('facade', Facade.ins);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/resourceUtil.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts'], function (exports) {
  var _asyncToGenerator, _regeneratorRuntime, cclegacy, _decorator, resources, error, Prefab, Texture2D, SpriteFrame, instantiate, find, isValid, Constant;

  return {
    setters: [function (module) {
      _asyncToGenerator = module.asyncToGenerator;
      _regeneratorRuntime = module.regeneratorRuntime;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      resources = module.resources;
      error = module.error;
      Prefab = module.Prefab;
      Texture2D = module.Texture2D;
      SpriteFrame = module.SpriteFrame;
      instantiate = module.instantiate;
      find = module.find;
      isValid = module.isValid;
    }, function (module) {
      Constant = module.Constant;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "7844e1bOwZK+7JMYjENQU5v", "resourceUtil", undefined);

      var ccclass = _decorator.ccclass;
      var ResourceUtil = exports('ResourceUtil', (_dec = ccclass("ResourceUtil"), _dec(_class = /*#__PURE__*/function () {
        function ResourceUtil() {}
        /**
        * 加载资源
        * @param url   资源路径
        * @param type  资源类型
        * @method loadRes
        */


        ResourceUtil.loadRes = function loadRes(url, type) {
          return new Promise(function (resolve, reject) {
            resources.load(url, type, function (err, res) {
              if (err) {
                error(err.message || err);
                reject && reject(err);
                return;
              }

              resolve && resolve(res);
            });
          });
        }
        /**
         * 获取特效prefab
         * @param modulePath 路径
         * @returns 
         */
        ;

        ResourceUtil.loadEffectRes = /*#__PURE__*/function () {
          var _loadEffectRes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(modulePath) {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  return _context.abrupt("return", this.loadRes(Constant.RESOURCES_FILE_NAME.PREFAB + "/" + Constant.PREFAB_FILE_NAME.EFFECT + "/" + modulePath, Prefab));

                case 1:
                case "end":
                  return _context.stop();
              }
            }, _callee, this);
          }));

          function loadEffectRes(_x) {
            return _loadEffectRes.apply(this, arguments);
          }

          return loadEffectRes;
        }()
        /**
         * 获取模型prefab
         * @param modulePath 模型路径
         * @returns 
         */
        ;

        ResourceUtil.loadModelRes = /*#__PURE__*/function () {
          var _loadModelRes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(modulePath) {
            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
              while (1) switch (_context2.prev = _context2.next) {
                case 0:
                  return _context2.abrupt("return", this.loadRes(Constant.RESOURCES_FILE_NAME.PREFAB + "/" + Constant.PREFAB_FILE_NAME.MODEL + "/" + modulePath, Prefab));

                case 1:
                case "end":
                  return _context2.stop();
              }
            }, _callee2, this);
          }));

          function loadModelRes(_x2) {
            return _loadModelRes.apply(this, arguments);
          }

          return loadModelRes;
        }()
        /**
         * 获取多模型数据
         * @param path 资源路径
         * @param arrName 资源名称
         * @param progressCb 过程回调函数
         * @param completeCb 完成回调函数
         */
        ;

        ResourceUtil.loadModelResArr = function loadModelResArr(path, arrName, progressCb, completeCb) {
          var arrUrls = arrName.map(function (item) {
            return path + "/" + item;
          });
          resources.load(arrUrls, Prefab, progressCb, completeCb);
        }
        /**
         * 获取贴图资源
         * @param path 贴图路径
         * @returns 
         */
        ;

        ResourceUtil.loadSpriteFrameRes = /*#__PURE__*/function () {
          var _loadSpriteFrameRes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(path) {
            var img, texture, sf;
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  _context3.next = 2;
                  return this.loadRes(path, SpriteFrame);

                case 2:
                  img = _context3.sent;
                  texture = new Texture2D();
                  texture.image = img;
                  sf = new SpriteFrame();
                  sf.texture = texture;
                  return _context3.abrupt("return", sf);

                case 8:
                case "end":
                  return _context3.stop();
              }
            }, _callee3, this);
          }));

          function loadSpriteFrameRes(_x3) {
            return _loadSpriteFrameRes.apply(this, arguments);
          }

          return loadSpriteFrameRes;
        }()
        /**
         * 获取关卡数据
         * @param level 关卡
         */
        ;

        ResourceUtil.getMap = /*#__PURE__*/function () {
          var _getMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(level) {
            var levelStr, txtAsset, content, objJson, _objJson;

            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  levelStr = 'map'; //前面补0

                  if (level >= 100) {
                    levelStr += level;
                  } else if (level >= 10) {
                    levelStr += '0' + level;
                  } else {
                    levelStr += '00' + level;
                  }

                  _context4.next = 4;
                  return this.loadRes("map/config/" + levelStr, null);

                case 4:
                  txtAsset = _context4.sent;
                  content = '';

                  if (!txtAsset._file) {
                    _context4.next = 12;
                    break;
                  } //@ts-ignore


                  if (window['LZString']) {
                    //@ts-ignore
                    content = window['LZString'].decompressFromEncodedURIComponent(txtAsset._file);
                  }

                  objJson = JSON.parse(content);
                  return _context4.abrupt("return", objJson);

                case 12:
                  if (!txtAsset.text) {
                    _context4.next = 18;
                    break;
                  } //@ts-ignore


                  if (window['LZString']) {
                    //@ts-ignore
                    content = window['LZString'].decompressFromEncodedURIComponent(txtAsset.text);
                  }

                  _objJson = JSON.parse(content);
                  return _context4.abrupt("return", _objJson);

                case 18:
                  if (!txtAsset.json) {
                    _context4.next = 22;
                    break;
                  }

                  return _context4.abrupt("return", txtAsset.json);

                case 22:
                  return _context4.abrupt("return", 'failed');

                case 23:
                case "end":
                  return _context4.stop();
              }
            }, _callee4, this);
          }));

          function getMap(_x4) {
            return _getMap.apply(this, arguments);
          }

          return getMap;
        }()
        /**
         * 获取关卡数据
         * @param type 关卡类型
         * @param arrName 资源名称
         * @param progressCb 过程回调函数
         * @param completeCb 完成回调函数
         */
        ;

        ResourceUtil.getMapObj = function getMapObj(type, arrName, progressCb, completeCb) {
          var arrUrls = [];

          for (var idx = 0; idx < arrName.length; idx++) {
            arrUrls.push("map/" + type + "/" + arrName[idx]);
          }

          resources.load(arrUrls, Prefab, progressCb, completeCb);
        }
        /**
         * 获取UI prefab
         * @param prefabPath prefab路径 
         */
        ;

        ResourceUtil.getUIPrefabRes = /*#__PURE__*/function () {
          var _getUIPrefabRes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(prefabPath) {
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  return _context5.abrupt("return", this.loadRes(Constant.RESOURCES_FILE_NAME.PREFAB + "/" + Constant.PREFAB_FILE_NAME.UI + "/" + prefabPath, Prefab));

                case 1:
                case "end":
                  return _context5.stop();
              }
            }, _callee5, this);
          }));

          function getUIPrefabRes(_x5) {
            return _getUIPrefabRes.apply(this, arguments);
          }

          return getUIPrefabRes;
        }()
        /**
         * 创建ui界面
         * @param path ui路径
         * @param cb 回调函数
         * @param parent 父节点
         */
        ;

        ResourceUtil.createUI = /*#__PURE__*/function () {
          var _createUI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(path, parent) {
            var pf, node;
            return _regeneratorRuntime().wrap(function _callee6$(_context6) {
              while (1) switch (_context6.prev = _context6.next) {
                case 0:
                  _context6.next = 2;
                  return this.getUIPrefabRes(path);

                case 2:
                  pf = _context6.sent;
                  node = instantiate(pf);
                  node.setPosition(0, 0, 0);

                  if (!parent) {
                    parent = find("Canvas");
                  }

                  parent.addChild(node);
                  return _context6.abrupt("return", node);

                case 8:
                case "end":
                  return _context6.stop();
              }
            }, _callee6, this);
          }));

          function createUI(_x6, _x7) {
            return _createUI.apply(this, arguments);
          }

          return createUI;
        }();

        ResourceUtil.loadUI = /*#__PURE__*/function () {
          var _loadUI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(path) {
            var pf, node;
            return _regeneratorRuntime().wrap(function _callee7$(_context7) {
              while (1) switch (_context7.prev = _context7.next) {
                case 0:
                  _context7.next = 2;
                  return this.getUIPrefabRes(path);

                case 2:
                  pf = _context7.sent;
                  node = instantiate(pf);
                  node.setPosition(0, 0, 0);
                  return _context7.abrupt("return", node);

                case 6:
                case "end":
                  return _context7.stop();
              }
            }, _callee7, this);
          }));

          function loadUI(_x8) {
            return _loadUI.apply(this, arguments);
          }

          return loadUI;
        }()
        /**
         * 获取json数据
         * @param fileName 文件名
         * @param cb 回调函数 
         */
        ;

        ResourceUtil.getJsonData = /*#__PURE__*/function () {
          var _getJsonData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(fileName) {
            var content;
            return _regeneratorRuntime().wrap(function _callee8$(_context8) {
              while (1) switch (_context8.prev = _context8.next) {
                case 0:
                  _context8.next = 2;
                  return this.loadRes(Constant.RESOURCES_FILE_NAME.DATA + "/" + fileName, null);

                case 2:
                  content = _context8.sent;

                  if (!content.json) {
                    _context8.next = 7;
                    break;
                  }

                  return _context8.abrupt("return", content.json);

                case 7:
                  return _context8.abrupt("return", 'failed!!!');

                case 8:
                case "end":
                  return _context8.stop();
              }
            }, _callee8, this);
          }));

          function getJsonData(_x9) {
            return _getJsonData.apply(this, arguments);
          }

          return getJsonData;
        }()
        /**
         * 获取文本数据
         * @param fileName 文件名
         */
        ;

        ResourceUtil.getTextData = /*#__PURE__*/function () {
          var _getTextData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(fileName) {
            var content, text;
            return _regeneratorRuntime().wrap(function _callee9$(_context9) {
              while (1) switch (_context9.prev = _context9.next) {
                case 0:
                  _context9.next = 2;
                  return this.loadRes(Constant.RESOURCES_FILE_NAME.DATA + "/" + fileName, null);

                case 2:
                  content = _context9.sent;
                  text = content.text;
                  return _context9.abrupt("return", text);

                case 5:
                case "end":
                  return _context9.stop();
              }
            }, _callee9, this);
          }));

          function getTextData(_x10) {
            return _getTextData.apply(this, arguments);
          }

          return getTextData;
        }()
        /**
         * 批量加载路径下的资源
         */
        ;

        ResourceUtil.loadDirRes = function loadDirRes(path, type, callback) {
          resources.loadDir(path, type, function (err, assets) {
            if (err) {
              console.error(err);
            } else {
              callback(null, assets);
            }
          });
        }
        /**
         * 设置精灵贴图
         * @param path 资源路径
         * @param sprite 精灵
         */
        ;

        ResourceUtil.setSpriteFrame = /*#__PURE__*/function () {
          var _setSpriteFrame = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(path, sprite) {
            var sf;
            return _regeneratorRuntime().wrap(function _callee10$(_context10) {
              while (1) switch (_context10.prev = _context10.next) {
                case 0:
                  _context10.next = 2;
                  return this.loadRes(path + '/spriteFrame', SpriteFrame);

                case 2:
                  sf = _context10.sent;

                  if (sprite && isValid(sprite)) {
                    sprite.spriteFrame = sf;
                  }

                case 4:
                case "end":
                  return _context10.stop();
              }
            }, _callee10, this);
          }));

          function setSpriteFrame(_x11, _x12) {
            return _setSpriteFrame.apply(this, arguments);
          }

          return setSpriteFrame;
        }();

        return ResourceUtil;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ReviveMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './clientEvent.ts', './constant.ts', './RevivePanel.ts', './ModuleType.ts', './Mediator.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Button, ClientEvent, Constant, RevivePanel, MediatorName, ModuleName, ProxyName, Mediator, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
    }, null, null, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      RevivePanel = module.RevivePanel;
    }, function (module) {
      MediatorName = module.MediatorName;
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
    }, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b30f0bcBVNMhKEH+1/NpERd", "ReviveMediator", undefined);
      /**
       * File: ReviveMediator
       * Description: 
       * Created on: 2024-11-13 10:09:40
       */


      var ReviveMediator = exports('ReviveMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(ReviveMediator, _Mediator);

        function ReviveMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UI;
          _this._skin = "revive/revivePanel";
          _this._playerProxy = void 0;
          return _this;
        }

        var _proto = ReviveMediator.prototype;

        _proto.onClickBtnRevive = function onClickBtnRevive() {
          this.hide();
          ClientEvent.dispatchEvent(Constant.EVENT_TYPE.ON_REVIVE);
        };

        _proto.onClickBtnSkip = function onClickBtnSkip() {
          this.close();
        };

        _proto.close = function close() {
          this._showParam && this._showParam();
          this.hide();
          this.getModule().hideView(MediatorName.FightHud);
          this.getModule().showView(MediatorName.FightSettlement);
        };

        _proto.onInit = function onInit() {
          _Mediator.prototype.onInit.call(this);

          this._playerProxy = this.facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
        };

        _proto.onShow = function onShow() {
          _Mediator.prototype.onShow.call(this);

          var view = this.getComponent(RevivePanel);
          view == null ? void 0 : view.show(this._playerProxy.level.toString(), this.close.bind(this));
        };

        _proto.addListeners = function addListeners() {
          _Mediator.prototype.addListeners.call(this);

          var view = this.getComponent(RevivePanel);
          view.btnSkip.node.on(Button.EventType.CLICK, this.onClickBtnSkip, this);
          view.btnRevive.node.on(Button.EventType.CLICK, this.onClickBtnRevive, this);
        };

        _proto.removeListeners = function removeListeners() {
          _Mediator.prototype.removeListeners.call(this);

          var view = this.getComponent(RevivePanel);
          view.btnSkip.node.off(Button.EventType.CLICK, this.onClickBtnSkip, this);
          view.btnRevive.node.off(Button.EventType.CLICK, this.onClickBtnRevive, this);
        };

        _proto.onHide = function onHide() {
          _Mediator.prototype.onHide.call(this);
        };

        return ReviveMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/RevivePanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './LanguageData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, Sprite, Label, Node, Button, UITransform, Component, _updateSceneRenderers;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Sprite = module.Sprite;
      Label = module.Label;
      Node = module.Node;
      Button = module.Button;
      UITransform = module.UITransform;
      Component = module.Component;
    }, function (module) {
      _updateSceneRenderers = module.updateSceneRenderers;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "100b86cV85P+aL0UUCrBBLi", "RevivePanel", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var RevivePanel = exports('RevivePanel', (_dec = ccclass("RevivePanel"), _dec2 = menu("_game/module/fight/RevivePanel"), _dec3 = property(Sprite), _dec4 = property(Label), _dec5 = property(Node), _dec6 = property(Label), _dec7 = property(Button), _dec8 = property(Button), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(RevivePanel, _Component);

        function RevivePanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spPayIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbLevel", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ndMask", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbCountDown", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnSkip", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnRevive", _descriptor6, _assertThisInitialized(_this));

          _this.countDownCallback = void 0;
          _this._countDown = 10;
          _this._maxMaskHeight = 190;
          _this._curMaskHeight = 0;
          return _this;
        }

        var _proto = RevivePanel.prototype;

        _proto.show = function show(level, callback) {
          _updateSceneRenderers();

          this._countDown = 10;
          this._curMaskHeight = 0;
          this.lbLevel.string = level;
          this.countDownCallback = callback;
        };

        _proto.update = function update(deltaTime) {
          if (this.countDown > 0) {
            this.countDown -= deltaTime;
          }
        };

        _createClass(RevivePanel, [{
          key: "countDown",
          get: function get() {
            return this._countDown;
          },
          set: function set(value) {
            var _this$ndMask$getCompo;

            this._countDown = value;
            this.lbCountDown.string = String(Math.floor(this._countDown));
            this._curMaskHeight += this._maxMaskHeight / (this._countDown * 120);
            this._curMaskHeight = this._curMaskHeight >= this._maxMaskHeight ? this._maxMaskHeight : this._curMaskHeight;
            (_this$ndMask$getCompo = this.ndMask.getComponent(UITransform)) == null ? void 0 : _this$ndMask$getCompo.setContentSize(260, this._curMaskHeight);

            if (value < 0) {
              this.countDownCallback && this.countDownCallback();
            }
          }
        }]);

        return RevivePanel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spPayIcon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbLevel", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "ndMask", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbCountDown", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnSkip", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "btnRevive", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/reward.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './effectManager.ts', './util.ts', './constant.ts', './clientEvent.ts', './gameManager.ts', './resourceUtil.ts', './audioManager.ts', './poolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, Enum, _decorator, Vec3, Quat, tween, clamp, Component, EffectManager, Util, Constant, ClientEvent, GameManager, ResourceUtil, AudioManager, PoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Enum = module.Enum;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      Quat = module.Quat;
      tween = module.tween;
      clamp = module.clamp;
      Component = module.Component;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      Util = module.Util;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      PoolManager = module.PoolManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "4b12d072FhMU41q2basHIT2", "reward", undefined); //奖品(奖励)脚本：金币和爱心
      //奖励类型


      var REWARD_TYPE = Enum({
        GOLD: 1,
        //金币
        HEART: 2 //爱心

      });
      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var Reward = exports('Reward', (_dec = ccclass('Reward'), _dec2 = property({
        type: REWARD_TYPE,
        displayOrder: 1
      }), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Reward, _Component);

        function Reward() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "rewardType", _descriptor, _assertThisInitialized(_this));

          _this._isDropOver = false; //是否已经落在地上

          _this._trialScale = new Vec3(3, 3, 3); //拖尾缩放

          _this._trialPos = new Vec3(0, -0.1, 0); //拖尾位置

          _this._tweenBounce = null; //tween

          _this._curQuat = new Quat(); //旋转

          _this._isAutoRotate = false; //是否自动旋转

          _this._isInhaling = false; //是否正在吸入中

          _this._oriScale = null; //原始缩放大小

          _this._ndParent = null; //父亲节点

          _this._ndTrial = null; //拖尾节点

          _this._endTargetPos = new Vec3(); //最终目标位置

          _this._midTargetPos = new Vec3(); //中间位置

          _this._stepTargetPos = new Vec3(); //下一次的位置

          _this._upSpeedY = 0.2; //上升最大速度

          _this._downSpeedY = 0.2; //下降最大速度

          _this._curSpeedY = 0; //当前速度

          _this._oriWorPos = new Vec3(); //初始奖品世界坐标

          _this._isArriveMinPos = false; //已经到达中间位置

          _this._rewardWorPos = new Vec3(); //当前奖品世界坐标

          _this._playerWorPos = new Vec3(); //目标(主角)位置

          _this._nextWorPos = new Vec3(); //下一个位置

          _this._offsetPos = new Vec3(); //奖品和玩家之间的向量差

          _this._targetWorPos = new Vec3(); //

          _this._totalFlyTime = 0; //奖品总飞行时间

          _this._curFlyTime = 0; //奖品当前飞行时间

          _this._raiseTimes = 1; //

          _this._bouncePos = new Vec3(0, 0.618, 0); //回收缓动高度

          _this._bounceScale = new Vec3(0.2, 0.2, 0.2);
          return _this;
        }

        var _proto = Reward.prototype; //回收缓动缩放

        _proto.onEnable = function onEnable() {
          ClientEvent.on(Constant.EVENT_TYPE.INHALE_REWARD, this._inhaleReward, this);
        };

        _proto.onDisable = function onDisable() {
          ClientEvent.off(Constant.EVENT_TYPE.INHALE_REWARD, this._inhaleReward, this);
        };

        _proto.start = function start() {};

        _proto.init = function init(time, ndParent) {
          var _this2 = this;

          this._ndParent = ndParent;

          if (this._oriScale) {
            this.node.setScale(this._oriScale);
          } else {
            this._oriScale = this.node.getScale();
          }

          this._isAutoRotate = false;
          this._isInhaling = false;
          this._curSpeedY = this._upSpeedY;

          this._oriWorPos.set(this.node.getWorldPosition().x, 1.65, this.node.getWorldPosition().z);

          this._isArriveMinPos = false;
          this.isDropOver = false;
          this._totalFlyTime = 0;
          this._curFlyTime = 0;
          this._raiseTimes = 1; //依次弹出奖品

          this.scheduleOnce(function () {
            _this2.show();
          }, time);

          if (!this._ndTrial) {
            ResourceUtil.loadEffectRes("trail/coinTrail").then(function (pf) {
              _this2._ndTrial = PoolManager.instance.getNode(pf, _this2.node);
              _this2._ndTrial.active = false;

              _this2._ndTrial.setScale(_this2._trialScale);

              _this2._ndTrial.setPosition(_this2._trialPos);
            });
          } else {
            this._ndTrial.active = false;
          }
        };

        _proto.show = function show() {
          this.node.active = true;
          var x = Math.random() * 6 - 3; //-3~3

          var y = 4; //最高的高度4~4.5;

          var z = Math.random() * 6 - 3; //-3~3

          this._endTargetPos = this._endTargetPos.set(this._oriWorPos).add3f(x, 0, z);
          this._midTargetPos = this._midTargetPos.set(this._oriWorPos).add3f(x / 2, y, z / 2); // console.log("终点位置", this._endTargetPos, "中间位置", this._midTargetPos);

          AudioManager.instance.playSound(Constant.SOUND.GOLD_DROP);
        }
        /**
         * 检查所有怪物是否已经击败，且奖品是否都全部掉落完毕
         *
         * @protected
         * @memberof Reward
         */
        ;

        _proto._checkMonsterClearOver = function _checkMonsterClearOver() {
          var ndTarget = GameManager.getNearestMonster();

          if (!ndTarget) {
            var arrReward = this._ndParent.children.filter(function (ndChild) {
              return ndChild.name === "gold" || ndChild.name === "heart";
            });

            var isAllDropOver = arrReward.every(function (ndReward) {
              var scriptReward = ndReward.getComponent(Reward);
              return scriptReward.isDropOver === true;
            });

            if (isAllDropOver) {
              console.log("###所有的奖品都已经掉落到地上了");
              ClientEvent.dispatchEvent(Constant.EVENT_TYPE.INHALE_REWARD);
            }
          }
        }
        /**
         * 玩家吸入奖品
         *
         * @protected
         * @memberof Reward
         */
        ;

        _proto._inhaleReward = function _inhaleReward() {
          var _this3 = this; //先弹跳


          this._closeTween();

          this._tweenBounce = tween(this.node).by(0.3, {
            position: this._bouncePos,
            scale: this._bounceScale
          }, {
            easing: "bounceInOut"
          }).call(function () {
            //播放粒子特效，不要勾选粒子的prewarm属性，免得出现概率性没有播放拖尾
            _this3._ndTrial.active = true;
            var options = {
              ndEffect: _this3._ndTrial
            };
            EffectManager.instance.playParticle(options); //再吸入

            _this3._isInhaling = true;
          }).start();
        };

        _proto._closeTween = function _closeTween() {
          if (this._tweenBounce) {
            this._tweenBounce.stop();

            this._tweenBounce = null;
          }
        }
        /**
         *  检查所有奖品是否吸收完毕
         *
         * @protected
         * @memberof Reward
         */
        ;

        _proto._checkInhaleOver = function _checkInhaleOver() {
          var arrReward = this._ndParent.children.filter(function (ndChild) {
            return ndChild.name === "gold" || ndChild.name === "heart";
          });

          if (!arrReward.length) {
            console.log("###已吸入全部奖品");
            AudioManager.instance.playSound(Constant.SOUND.GOLD_COLLECT);
            ClientEvent.dispatchEvent(Constant.EVENT_TYPE.SHOW_WARP_GATE);
          }
        };

        _proto.update = function update(deltaTime) {
          //奖品上下弹跳
          if (!this.isDropOver) {
            this._rewardWorPos.set(this.node.position); //先抬高


            if (!this._isArriveMinPos) {
              this._stepTargetPos = this._rewardWorPos.lerp(this._midTargetPos, 0.03);
              this._curSpeedY = Util.lerp(this._upSpeedY, this._curSpeedY, 0.03);
              this._nextWorPos = this._nextWorPos.set(this._stepTargetPos).add3f(0, this._curSpeedY, 0);
              this._nextWorPos.y = clamp(this._nextWorPos.y, 0, this._midTargetPos.y);
              this.node.setPosition(this._nextWorPos); // if (pos.equals(this._midTargetPos, 0.2)) {

              if (this._nextWorPos.y >= this._midTargetPos.y) {
                this._isArriveMinPos = true;
                this._curSpeedY = 0; // console.log("到达中间位置");
              }
            } else {
              //后降落
              this._stepTargetPos = this._rewardWorPos.lerp(this._endTargetPos, 0.02);
              this._curSpeedY = Util.lerp(this._downSpeedY, this._curSpeedY, 0.05); // console.log("_upSpeedY", this._curSpeedY);

              this._nextWorPos = this._nextWorPos.set(this._stepTargetPos).add3f(0, -this._curSpeedY, 0);
              this._nextWorPos.y = clamp(this._nextWorPos.y, this._endTargetPos.y, this._midTargetPos.y);
              this.node.setPosition(this._nextWorPos);

              if (this._nextWorPos.equals(this._endTargetPos, 0.3)) {
                this.isDropOver = true; // console.log("到达地板上");

                this._isAutoRotate = true;

                this._checkMonsterClearOver();
              }
            }
          } //奖品落地后自动旋转


          if (this._isAutoRotate) {
            Quat.fromEuler(this._curQuat, 0, 120 * deltaTime, 0);
            this.node.rotate(this._curQuat);
          } //奖品被玩家吸入


          if (this._isInhaling) {
            //位置靠近玩家
            this._playerWorPos.set(GameManager.scriptPlayer.node.worldPosition);

            this._rewardWorPos.set(this.node.worldPosition); //向量差


            Vec3.subtract(this._offsetPos, this._playerWorPos, this._rewardWorPos);

            if (!this._totalFlyTime) {
              this._totalFlyTime = this._offsetPos.length() / 2;
            } // 由慢到快


            this._raiseTimes += deltaTime;
            var offset = Math.pow(this._raiseTimes, 0.5) - 1;
            this._curFlyTime += deltaTime + offset;
            this._curFlyTime = this._curFlyTime >= this._totalFlyTime ? this._totalFlyTime : this._curFlyTime;
            var percent = Number((this._curFlyTime / this._totalFlyTime).toFixed(2)); // console.log("percent", percent);

            this._targetWorPos.set(this._rewardWorPos.x + this._offsetPos.x * percent, this._playerWorPos.y, this._rewardWorPos.z + this._offsetPos.z * percent);

            this.node.setWorldPosition(this._targetWorPos);
            var length = Util.getTwoPosXZLength(this._targetWorPos.x, this._targetWorPos.z, this._playerWorPos.x, this._playerWorPos.z); // if (this._targetWorPos.equals(this._playerWorPos, 0.1)) {

            if (length <= 0.1) {
              this._isInhaling = false;
              this._ndTrial.active = false;
              PoolManager.instance.putNode(this.node);

              if (this.rewardType === REWARD_TYPE.GOLD) {
                GameManager.addGold();
              } else if (this.rewardType === REWARD_TYPE.HEART) {
                //回复5%的血量
                var bloodNum = GameManager.scriptPlayer.curHpLimit * 0.05;
                GameManager.scriptPlayer.addBlood(bloodNum);
              }

              this._checkInhaleOver(); // console.log("吸收奖品");

            }
          }
        };

        _createClass(Reward, [{
          key: "isDropOver",
          get: function get() {
            return this._isDropOver;
          },
          set: function set(v) {
            this._isDropOver = v;
          }
        }]);

        return Reward;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "rewardType", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return REWARD_TYPE.GOLD;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SceneRegUtils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy, Node, Widget, find, director;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      Node = module.Node;
      Widget = module.Widget;
      find = module.find;
      director = module.director;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b2e3cgKlqBEN6veWy2UsuXT", "SceneRegUtils", undefined);
      /**
       * time: 2023/01/18 19:57:01
       * desc: 管理场景的层级和适配
       */


      var SceneRegUtils = exports('SceneRegUtils', /*#__PURE__*/function () {
        function SceneRegUtils() {}

        SceneRegUtils.add = function add(key, zOrder) {
          if (!key) {
            console.warn("SceneRegUtils---add---invalid object--->", key);
            return;
          }

          if (this._map.has(key)) {
            console.warn("SceneRegUtils---add---repeat add--->", key);
            return;
          }

          var node = new Node(key);
          node.setSiblingIndex(zOrder);
          var w = node.addComponent(Widget);
          w.top = w.bottom = w.left = w.right = 0;
          w.isAlignTop = w.isAlignBottom = w.isAlignLeft = w.isAlignRight = true;

          this._map.set(key, node);

          this.root.addChild(node);
          w.target = this.root;
        };

        SceneRegUtils.tryAdd = function tryAdd(key, child) {
          var map = this._map;
          var node = map.get(key);

          if (node) {
            node.addChild(child);
            return true;
          }

          console.warn("SceneRegUtils---tryAddChild---no this layer--->", key);
          return false;
        };

        _createClass(SceneRegUtils, null, [{
          key: "root",
          get: function get() {
            if (this._root == null) {
              var canvasNode = find("uiRoot");

              if (!canvasNode) {
                console.error("没有找到 uiRoot 节点!!!");
              }

              if (canvasNode) {
                this._root = canvasNode;
                director.addPersistRootNode(canvasNode);
              }
            }

            console.log("SceneReg---root--->", this._root.isValid);
            return this._root;
          }
        }]);

        return SceneRegUtils;
      }());
      SceneRegUtils._root = void 0;
      SceneRegUtils._map = new Map();

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/schema.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _inheritsLoose, _createClass, _createForOfIteratorHelperLoose, cclegacy;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
      _createClass = module.createClass;
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports({
        battle: void 0,
        common: void 0,
        fish: void 0,
        item: void 0,
        test: void 0
      });

      cclegacy._RF.push({}, "418584E9DhMWogM+nDZ60zZ", "schema", undefined); //------------------------------------------------------------------------------
      // <auto-generated>
      //     This code was generated by a tool.
      //     Changes to this file may cause incorrect behavior and will be lost if
      //     the code is regenerated.
      // </auto-generated>
      //------------------------------------------------------------------------------


      var fish;

      (function (_fish) {
        var ERarity = /*#__PURE__*/function (ERarity) {
          ERarity[ERarity["Common"] = 1] = "Common";
          ERarity[ERarity["Intermediate"] = 2] = "Intermediate";
          ERarity[ERarity["Advanced"] = 3] = "Advanced";
          ERarity[ERarity["Rare"] = 4] = "Rare";
          ERarity[ERarity["Epic"] = 5] = "Epic";
          return ERarity;
        }({});

        _fish.ERarity = ERarity;
      })(fish || (fish = exports('fish', {})));

      var item;

      (function (_item) {
        var EQuality = /*#__PURE__*/function (EQuality) {
          EQuality[EQuality["WHITE"] = 1] = "WHITE";
          EQuality[EQuality["BLUE"] = 2] = "BLUE";
          EQuality[EQuality["PURPLE"] = 3] = "PURPLE";
          EQuality[EQuality["RED"] = 4] = "RED";
          return EQuality;
        }({});

        _item.EQuality = EQuality;
      })(item || (item = exports('item', {})));

      var test;

      (function (_test) {
        var AccessFlag = /*#__PURE__*/function (AccessFlag) {
          AccessFlag[AccessFlag["WRITE"] = 1] = "WRITE";
          AccessFlag[AccessFlag["READ"] = 2] = "READ";
          AccessFlag[AccessFlag["TRUNCATE"] = 4] = "TRUNCATE";
          AccessFlag[AccessFlag["NEW"] = 8] = "NEW";
          AccessFlag[AccessFlag["READ_WRITE"] = 3] = "READ_WRITE";
          return AccessFlag;
        }({});

        _test.AccessFlag = AccessFlag;
      })(test || (test = exports('test', {})));

      var battle;

      (function (_battle) {
        var Checkpoint = /*#__PURE__*/function () {
          function Checkpoint(_json_) {
            /**
             * 关卡id
             */
            this.id = void 0;
            /**
             * 随机关卡地图
             */

            this.mapName = void 0;
            /**
             * 攻击加成
             */

            this.attackAddition = void 0;
            /**
             * 防御加成
             */

            this.defenseAddition = void 0;
            /**
             * 生命加成
             */

            this.hpAddition = void 0;
            /**
             * 移速加成
             */

            this.moveSpeedAddition = void 0;
            /**
             * 攻速加成
             */

            this.attackSpeedAddition = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.mapName === undefined) {
              throw new Error();
            }

            this.mapName = _json_.mapName;

            if (_json_.attackAddition === undefined) {
              throw new Error();
            }

            this.attackAddition = _json_.attackAddition;

            if (_json_.defenseAddition === undefined) {
              throw new Error();
            }

            this.defenseAddition = _json_.defenseAddition;

            if (_json_.hpAddition === undefined) {
              throw new Error();
            }

            this.hpAddition = _json_.hpAddition;

            if (_json_.moveSpeedAddition === undefined) {
              throw new Error();
            }

            this.moveSpeedAddition = _json_.moveSpeedAddition;

            if (_json_.attackSpeedAddition === undefined) {
              throw new Error();
            }

            this.attackSpeedAddition = _json_.attackSpeedAddition;
          }

          var _proto100 = Checkpoint.prototype;

          _proto100.resolve = function resolve(tables) {};

          return Checkpoint;
        }();

        _battle.Checkpoint = Checkpoint;
      })(battle || (battle = exports('battle', {})));

      (function (_battle2) {
        var MapItem001 = /*#__PURE__*/function () {
          function MapItem001(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto2 = MapItem001.prototype;

          _proto2.resolve = function resolve(tables) {};

          return MapItem001;
        }();

        _battle2.MapItem001 = MapItem001;
      })(battle || (battle = exports('battle', {})));

      (function (_battle3) {
        var MapItem002 = /*#__PURE__*/function () {
          function MapItem002(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle === undefined) {
              throw new Error();
            }

            this.angle = _json_.angle;

            if (_json_.scale === undefined) {
              throw new Error();
            }

            this.scale = _json_.scale;

            if (_json_.skill === undefined) {
              throw new Error();
            }

            this.skill = _json_.skill;

            if (_json_.movePattern === undefined) {
              throw new Error();
            }

            this.movePattern = _json_.movePattern;
          }

          var _proto4 = MapItem002.prototype;

          _proto4.resolve = function resolve(tables) {};

          return MapItem002;
        }();

        _battle3.MapItem002 = MapItem002;
      })(battle || (battle = exports('battle', {})));

      (function (_battle4) {
        var MapItem003 = /*#__PURE__*/function () {
          function MapItem003(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto6 = MapItem003.prototype;

          _proto6.resolve = function resolve(tables) {};

          return MapItem003;
        }();

        _battle4.MapItem003 = MapItem003;
      })(battle || (battle = exports('battle', {})));

      (function (_battle5) {
        var MapItem004 = /*#__PURE__*/function () {
          function MapItem004(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto8 = MapItem004.prototype;

          _proto8.resolve = function resolve(tables) {};

          return MapItem004;
        }();

        _battle5.MapItem004 = MapItem004;
      })(battle || (battle = exports('battle', {})));

      (function (_battle6) {
        var MapItem005 = /*#__PURE__*/function () {
          function MapItem005(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto10 = MapItem005.prototype;

          _proto10.resolve = function resolve(tables) {};

          return MapItem005;
        }();

        _battle6.MapItem005 = MapItem005;
      })(battle || (battle = exports('battle', {})));

      (function (_battle7) {
        var MapItem006 = /*#__PURE__*/function () {
          function MapItem006(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto12 = MapItem006.prototype;

          _proto12.resolve = function resolve(tables) {};

          return MapItem006;
        }();

        _battle7.MapItem006 = MapItem006;
      })(battle || (battle = exports('battle', {})));

      (function (_battle8) {
        var MapItem007 = /*#__PURE__*/function () {
          function MapItem007(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto14 = MapItem007.prototype;

          _proto14.resolve = function resolve(tables) {};

          return MapItem007;
        }();

        _battle8.MapItem007 = MapItem007;
      })(battle || (battle = exports('battle', {})));

      (function (_battle9) {
        var MapItem009 = /*#__PURE__*/function () {
          function MapItem009(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto16 = MapItem009.prototype;

          _proto16.resolve = function resolve(tables) {};

          return MapItem009;
        }();

        _battle9.MapItem009 = MapItem009;
      })(battle || (battle = exports('battle', {})));

      (function (_battle10) {
        var MapItem010 = /*#__PURE__*/function () {
          function MapItem010(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto18 = MapItem010.prototype;

          _proto18.resolve = function resolve(tables) {};

          return MapItem010;
        }();

        _battle10.MapItem010 = MapItem010;
      })(battle || (battle = exports('battle', {})));

      (function (_battle11) {
        var MapItem011 = /*#__PURE__*/function () {
          function MapItem011(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto20 = MapItem011.prototype;

          _proto20.resolve = function resolve(tables) {};

          return MapItem011;
        }();

        _battle11.MapItem011 = MapItem011;
      })(battle || (battle = exports('battle', {})));

      (function (_battle12) {
        var MapItem101 = /*#__PURE__*/function () {
          function MapItem101(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto22 = MapItem101.prototype;

          _proto22.resolve = function resolve(tables) {};

          return MapItem101;
        }();

        _battle12.MapItem101 = MapItem101;
      })(battle || (battle = exports('battle', {})));

      (function (_battle13) {
        var MapItem102 = /*#__PURE__*/function () {
          function MapItem102(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto24 = MapItem102.prototype;

          _proto24.resolve = function resolve(tables) {};

          return MapItem102;
        }();

        _battle13.MapItem102 = MapItem102;
      })(battle || (battle = exports('battle', {})));

      (function (_battle14) {
        var MapItem103 = /*#__PURE__*/function () {
          function MapItem103(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto26 = MapItem103.prototype;

          _proto26.resolve = function resolve(tables) {};

          return MapItem103;
        }();

        _battle14.MapItem103 = MapItem103;
      })(battle || (battle = exports('battle', {})));

      (function (_battle15) {
        var MapItem104 = /*#__PURE__*/function () {
          function MapItem104(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto28 = MapItem104.prototype;

          _proto28.resolve = function resolve(tables) {};

          return MapItem104;
        }();

        _battle15.MapItem104 = MapItem104;
      })(battle || (battle = exports('battle', {})));

      (function (_battle16) {
        var MapItem105 = /*#__PURE__*/function () {
          function MapItem105(_json_) {
            /**
             * 对应资源编号(敌人、物件)
             */
            this.id = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放
             */

            this.scale = void 0;
            /**
             * 技能(本层该敌人所使用的技能，1个或以上，该属性对障碍无效）
             */

            this.skill = void 0;
            /**
             * 移动模式
             */

            this.movePattern = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle != undefined) {
              this.angle = _json_.angle;
            } else {
              this.angle = undefined;
            }

            if (_json_.scale != undefined) {
              this.scale = _json_.scale;
            } else {
              this.scale = undefined;
            }

            if (_json_.skill != undefined) {
              this.skill = _json_.skill;
            } else {
              this.skill = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }
          }

          var _proto30 = MapItem105.prototype;

          _proto30.resolve = function resolve(tables) {};

          return MapItem105;
        }();

        _battle16.MapItem105 = MapItem105;
      })(battle || (battle = exports('battle', {})));

      (function (_battle17) {
        var MonsterSkill = /*#__PURE__*/function () {
          function MonsterSkill(_json_) {
            /**
             * 技能ID
             */
            this.id = void 0;
            /**
             * 名称
             */

            this.name = void 0;
            /**
             * 说明
             */

            this.desc = void 0;
            /**
             * 技能类型(1单发2抛投型3范围覆盖4散射5S型6坠落型7六角形)
             */

            this.type = void 0;
            /**
             * 资源名称
             */

            this.resName = void 0;
            /**
             * 技能起点
             */

            this.startPos = void 0;
            /**
             * 是否穿透
             */

            this.penetrate = void 0;
            /**
             * 飞行速度
             */

            this.flySpeed = void 0;
            /**
             * 技能预警(warningLine直线warningStrip直线范围warningCircle圆形范围)
             */

            this.warning = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.name === undefined) {
              throw new Error();
            }

            this.name = _json_.name;

            if (_json_.desc === undefined) {
              throw new Error();
            }

            this.desc = _json_.desc;

            if (_json_.type === undefined) {
              throw new Error();
            }

            this.type = _json_.type;

            if (_json_.resName === undefined) {
              throw new Error();
            }

            this.resName = _json_.resName;

            if (_json_.startPos === undefined) {
              throw new Error();
            }

            this.startPos = _json_.startPos;

            if (_json_.penetrate === undefined) {
              throw new Error();
            }

            this.penetrate = _json_.penetrate;

            if (_json_.flySpeed === undefined) {
              throw new Error();
            }

            this.flySpeed = _json_.flySpeed;

            if (_json_.warning === undefined) {
              throw new Error();
            }

            this.warning = _json_.warning;
          }

          var _proto32 = MonsterSkill.prototype;

          _proto32.resolve = function resolve(tables) {};

          return MonsterSkill;
        }();

        _battle17.MonsterSkill = MonsterSkill;
      })(battle || (battle = exports('battle', {})));

      (function (_battle18) {
        var PlayerSkill = /*#__PURE__*/function () {
          function PlayerSkill(_json_) {
            /**
             * 技能ID(第一位用途(1形态2数值3buff4触发)第二三位分类第四五位等级)
             */
            this.id = void 0;
            /**
             * 名称
             */

            this.name = void 0;
            /**
             * 说明
             */

            this.desc = void 0;
            /**
             * 技能等级
             */

            this.range = void 0;
            /**
             * 预制体名称
             */

            this.resName = void 0;
            /**
             * 技能icon名称
             */

            this.icon = void 0;
            /**
             * 技能数值提升
             */

            this.value = void 0;
            /**
             * 价格
             */

            this.price = void 0;
            /**
             * 飞行速度
             */

            this.speed = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.name === undefined) {
              throw new Error();
            }

            this.name = _json_.name;

            if (_json_.desc === undefined) {
              throw new Error();
            }

            this.desc = _json_.desc;

            if (_json_.range === undefined) {
              throw new Error();
            }

            this.range = _json_.range;

            if (_json_.resName === undefined) {
              throw new Error();
            }

            this.resName = _json_.resName;

            if (_json_.icon === undefined) {
              throw new Error();
            }

            this.icon = _json_.icon;

            if (_json_.value === undefined) {
              throw new Error();
            }

            this.value = _json_.value;

            if (_json_.price === undefined) {
              throw new Error();
            }

            this.price = _json_.price;

            if (_json_.speed === undefined) {
              throw new Error();
            }

            this.speed = _json_.speed;
          }

          var _proto34 = PlayerSkill.prototype;

          _proto34.resolve = function resolve(tables) {};

          return PlayerSkill;
        }();

        _battle18.PlayerSkill = PlayerSkill;
      })(battle || (battle = exports('battle', {})));

      (function (_battle19) {
        var PlayerSkillEn = /*#__PURE__*/function () {
          function PlayerSkillEn(_json_) {
            /**
             * 技能ID(第一位用途(1形态2数值3buff4触发)第二三位分类第四五位等级)
             */
            this.id = void 0;
            /**
             * 名称
             */

            this.name = void 0;
            /**
             * 说明
             */

            this.desc = void 0;
            /**
             * 技能等级
             */

            this.range = void 0;
            /**
             * 预制体名称
             */

            this.resName = void 0;
            /**
             * 技能icon名称
             */

            this.icon = void 0;
            /**
             * 技能数值提升
             */

            this.value = void 0;
            /**
             * 价格
             */

            this.price = void 0;
            /**
             * 飞行速度
             */

            this.speed = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.name === undefined) {
              throw new Error();
            }

            this.name = _json_.name;

            if (_json_.desc === undefined) {
              throw new Error();
            }

            this.desc = _json_.desc;

            if (_json_.range === undefined) {
              throw new Error();
            }

            this.range = _json_.range;

            if (_json_.resName === undefined) {
              throw new Error();
            }

            this.resName = _json_.resName;

            if (_json_.icon === undefined) {
              throw new Error();
            }

            this.icon = _json_.icon;

            if (_json_.value === undefined) {
              throw new Error();
            }

            this.value = _json_.value;

            if (_json_.price === undefined) {
              throw new Error();
            }

            this.price = _json_.price;

            if (_json_.speed === undefined) {
              throw new Error();
            }

            this.speed = _json_.speed;
          }

          var _proto36 = PlayerSkillEn.prototype;

          _proto36.resolve = function resolve(tables) {};

          return PlayerSkillEn;
        }();

        _battle19.PlayerSkillEn = PlayerSkillEn;
      })(battle || (battle = exports('battle', {})));

      (function (_battle20) {
        var Props = /*#__PURE__*/function () {
          function Props(_json_) {
            /**
             * 编号
             */
            this.id = void 0;
            /**
             * 角色物品类型
             */

            this.type = void 0;
            /**
             * 名称
             */

            this.name = void 0;
            /**
             * 资源名称
             */

            this.resName = void 0;
            /**
             * 位置
             */

            this.position = void 0;
            /**
             * 角度
             */

            this.angle = void 0;
            /**
             * 缩放倍数
             */

            this.scale = void 0;
            /**
             * 生命值
             */

            this.hp = void 0;
            /**
             * 攻击力
             */

            this.attackPower = void 0;
            /**
             * 防御力
             */

            this.defensePower = void 0;
            /**
             * 攻速(技能释放速度)
             */

            this.attackSpeed = void 0;
            /**
             * 移速
             */

            this.moveSpeed = void 0;
            /**
             * 移动频率(怪物属性,两次移动间隔,为0表示一直移动)
             */

            this.moveFrequency = void 0;
            /**
             * 闪避率
             */

            this.dodgeRate = void 0;
            /**
             * 暴击率(0为不暴击)
             */

            this.criticalHitRate = void 0;
            /**
             * 暴击伤害
             */

            this.criticalHitDamage = void 0;
            /**
             * 移动方式(怪物属性1走2飞行)
             */

            this.moveMode = void 0;
            /**
             * 移动模式(怪物属性3原地不动1随机移动2朝向主角)
             */

            this.movePattern = void 0;
            /**
             * 金币掉落数量(怪物属性,为0时死亡不会掉落金币)
             */

            this.goldNum = void 0;
            /**
             * 爱心掉落概率(怪物属性)
             */

            this.heartDropRate = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.type === undefined) {
              throw new Error();
            }

            this.type = _json_.type;

            if (_json_.name === undefined) {
              throw new Error();
            }

            this.name = _json_.name;

            if (_json_.resName === undefined) {
              throw new Error();
            }

            this.resName = _json_.resName;

            if (_json_.position === undefined) {
              throw new Error();
            }

            this.position = _json_.position;

            if (_json_.angle === undefined) {
              throw new Error();
            }

            this.angle = _json_.angle;

            if (_json_.scale === undefined) {
              throw new Error();
            }

            this.scale = _json_.scale;

            if (_json_.hp != undefined) {
              this.hp = _json_.hp;
            } else {
              this.hp = undefined;
            }

            if (_json_.attackPower != undefined) {
              this.attackPower = _json_.attackPower;
            } else {
              this.attackPower = undefined;
            }

            if (_json_.defensePower != undefined) {
              this.defensePower = _json_.defensePower;
            } else {
              this.defensePower = undefined;
            }

            if (_json_.attackSpeed != undefined) {
              this.attackSpeed = _json_.attackSpeed;
            } else {
              this.attackSpeed = undefined;
            }

            if (_json_.moveSpeed != undefined) {
              this.moveSpeed = _json_.moveSpeed;
            } else {
              this.moveSpeed = undefined;
            }

            if (_json_.moveFrequency != undefined) {
              this.moveFrequency = _json_.moveFrequency;
            } else {
              this.moveFrequency = undefined;
            }

            if (_json_.dodgeRate != undefined) {
              this.dodgeRate = _json_.dodgeRate;
            } else {
              this.dodgeRate = undefined;
            }

            if (_json_.criticalHitRate != undefined) {
              this.criticalHitRate = _json_.criticalHitRate;
            } else {
              this.criticalHitRate = undefined;
            }

            if (_json_.criticalHitDamage != undefined) {
              this.criticalHitDamage = _json_.criticalHitDamage;
            } else {
              this.criticalHitDamage = undefined;
            }

            if (_json_.moveMode != undefined) {
              this.moveMode = _json_.moveMode;
            } else {
              this.moveMode = undefined;
            }

            if (_json_.movePattern != undefined) {
              this.movePattern = _json_.movePattern;
            } else {
              this.movePattern = undefined;
            }

            if (_json_.goldNum != undefined) {
              this.goldNum = _json_.goldNum;
            } else {
              this.goldNum = undefined;
            }

            if (_json_.heartDropRate != undefined) {
              this.heartDropRate = _json_.heartDropRate;
            } else {
              this.heartDropRate = undefined;
            }
          }

          var _proto38 = Props.prototype;

          _proto38.resolve = function resolve(tables) {};

          return Props;
        }();

        _battle20.Props = Props;
      })(battle || (battle = exports('battle', {})));

      var common;

      (function (_common) {
        var Constant = /*#__PURE__*/function () {
          function Constant(_json_) {
            /**
             * 测试测试测试 字符串；
             */
            this.test0 = void 0;
            /**
             * 测试测试测试 整数；
             */

            this.test1 = void 0;
            /**
             * 测试测试测试 小数；
             */

            this.test2 = void 0;
            /**
             * 测试测试测试 字符串数组；
             */

            this.test3 = void 0;
            /**
             * 测试测试测试 字符串数组 分号作为分隔符；
             */

            this.test4 = void 0;
            /**
             * 测试测试测试 小数数组；
             */

            this.test5 = void 0;
            /**
             * 初始体力值
             */

            this.enerageInit = void 0;
            /**
             * 体力上限制
             */

            this.enerageMax = void 0;
            /**
             * 恢复1点体力花费的时间（单位秒）
             */

            this.enerageRestore = void 0;
            /**
             * 每次挑战消耗的体力；
             */

            this.fishEnerageCost = void 0;
            /**
             * 初始金币
             */

            this.coin = void 0;
            /**
             * 初始钻石
             */

            this.pearl = void 0;

            if (_json_.test0 === undefined) {
              throw new Error();
            }

            this.test0 = _json_.test0;

            if (_json_.test1 === undefined) {
              throw new Error();
            }

            this.test1 = _json_.test1;

            if (_json_.test2 === undefined) {
              throw new Error();
            }

            this.test2 = _json_.test2;

            if (_json_.test3 === undefined) {
              throw new Error();
            }

            {
              this.test3 = [];

              for (var _iterator89 = _createForOfIteratorHelperLoose(_json_.test3), _step89; !(_step89 = _iterator89()).done;) {
                var _ele0 = _step89.value;

                var _e0 = void 0;

                _e0 = _ele0;
                this.test3.push(_e0);
              }
            }

            if (_json_.test4 === undefined) {
              throw new Error();
            }

            {
              this.test4 = [];

              for (var _iterator90 = _createForOfIteratorHelperLoose(_json_.test4), _step90; !(_step90 = _iterator90()).done;) {
                var _ele = _step90.value;

                var _e = void 0;

                _e = _ele;
                this.test4.push(_e);
              }
            }

            if (_json_.test5 === undefined) {
              throw new Error();
            }

            {
              this.test5 = [];

              for (var _iterator91 = _createForOfIteratorHelperLoose(_json_.test5), _step91; !(_step91 = _iterator91()).done;) {
                var _ele2 = _step91.value;

                var _e2 = void 0;

                _e2 = _ele2;
                this.test5.push(_e2);
              }
            }

            if (_json_.enerageInit === undefined) {
              throw new Error();
            }

            this.enerageInit = _json_.enerageInit;

            if (_json_.enerageMax === undefined) {
              throw new Error();
            }

            this.enerageMax = _json_.enerageMax;

            if (_json_.enerageRestore === undefined) {
              throw new Error();
            }

            this.enerageRestore = _json_.enerageRestore;

            if (_json_.fishEnerageCost === undefined) {
              throw new Error();
            }

            this.fishEnerageCost = _json_.fishEnerageCost;

            if (_json_.coin === undefined) {
              throw new Error();
            }

            this.coin = _json_.coin;

            if (_json_.pearl === undefined) {
              throw new Error();
            }

            this.pearl = _json_.pearl;
          }

          var _proto101 = Constant.prototype;

          _proto101.resolve = function resolve(tables) {};

          return Constant;
        }();

        _common.Constant = Constant;
      })(common || (common = exports('common', {})));

      (function (_common2) {
        var LangItem = /*#__PURE__*/function () {
          function LangItem(_json_) {
            /**
             * key
             */
            this.key = void 0;
            /**
             * 中文
             */

            this.zh = void 0;
            /**
             * 英文
             */

            this.en = void 0;

            if (_json_.key === undefined) {
              throw new Error();
            }

            this.key = _json_.key;

            if (_json_.zh === undefined) {
              throw new Error();
            }

            this.zh = _json_.zh;

            if (_json_.en === undefined) {
              throw new Error();
            }

            this.en = _json_.en;
          }

          var _proto40 = LangItem.prototype;

          _proto40.resolve = function resolve(tables) {};

          return LangItem;
        }();

        _common2.LangItem = LangItem;
      })(common || (common = exports('common', {})));

      (function (_item2) {
        var ItemExchange = /*#__PURE__*/function () {
          function ItemExchange(_json_) {
            /**
             * 道具id
             */
            this.id = void 0;
            /**
             * 道具数量
             */

            this.num = void 0;

            if (_json_.id === undefined) {
              throw new Error();
            }

            this.id = _json_.id;

            if (_json_.num === undefined) {
              throw new Error();
            }

            this.num = _json_.num;
          }

          var _proto42 = ItemExchange.prototype;

          _proto42.resolve = function resolve(tables) {};

          return ItemExchange;
        }();

        _item2.ItemExchange = ItemExchange;
      })(item || (item = exports('item', {})));

      (function (_test2) {
        var Shape = /*#__PURE__*/function () {
          Shape.constructorFrom = function constructorFrom(_json_) {
            switch (_json_["$type"]) {
              case 'Circle':
                return new test.Circle(_json_);

              case 'Rectangle':
                return new test.Rectangle(_json_);

              default:
                throw new Error();
            }
          };

          function Shape(_json_) {}

          var _proto44 = Shape.prototype;

          _proto44.resolve = function resolve(tables) {};

          return Shape;
        }();

        _test2.Shape = Shape;
      })(test || (test = exports('test', {})));

      (function (_test3) {
        var Circle = /*#__PURE__*/function (_test$Shape2) {
          _inheritsLoose(Circle, _test$Shape2);

          function Circle(_json_) {
            var _this2;

            _this2 = _test$Shape2.call(this, _json_) || this;
            /**
             * 半径
             */

            _this2.radius = void 0;

            if (_json_.radius === undefined) {
              throw new Error();
            }

            _this2.radius = _json_.radius;
            return _this2;
          }

          var _proto46 = Circle.prototype;

          _proto46.resolve = function resolve(tables) {
            _test$Shape2.prototype.resolve.call(this, tables);
          };

          return Circle;
        }(test.Shape);

        _test3.Circle = Circle;
      })(test || (test = exports('test', {})));

      (function (_test4) {
        var Rectangle = /*#__PURE__*/function (_test$Shape4) {
          _inheritsLoose(Rectangle, _test$Shape4);

          function Rectangle(_json_) {
            var _this4;

            _this4 = _test$Shape4.call(this, _json_) || this;
            /**
             * 宽度
             */

            _this4.width = void 0;
            /**
             * 高度
             */

            _this4.height = void 0;

            if (_json_.width === undefined) {
              throw new Error();
            }

            _this4.width = _json_.width;

            if (_json_.height === undefined) {
              throw new Error();
            }

            _this4.height = _json_.height;
            return _this4;
          }

          var _proto48 = Rectangle.prototype;

          _proto48.resolve = function resolve(tables) {
            _test$Shape4.prototype.resolve.call(this, tables);
          };

          return Rectangle;
        }(test.Shape);

        _test4.Rectangle = Rectangle;
      })(test || (test = exports('test', {})));

      (function (_test5) {
        var TestExcelBean1 = /*#__PURE__*/function () {
          function TestExcelBean1(_json_) {
            /**
             * 最高品质
             */
            this.x1 = void 0;
            /**
             * 黑色的
             */

            this.x2 = void 0;
            /**
             * 蓝色的
             */

            this.x3 = void 0;
            /**
             * 最差品质
             */

            this.x4 = void 0;

            if (_json_.x1 === undefined) {
              throw new Error();
            }

            this.x1 = _json_.x1;

            if (_json_.x2 === undefined) {
              throw new Error();
            }

            this.x2 = _json_.x2;

            if (_json_.x3 === undefined) {
              throw new Error();
            }

            this.x3 = _json_.x3;

            if (_json_.x4 === undefined) {
              throw new Error();
            }

            this.x4 = _json_.x4;
          }

          var _proto50 = TestExcelBean1.prototype;

          _proto50.resolve = function resolve(tables) {};

          return TestExcelBean1;
        }();

        _test5.TestExcelBean1 = TestExcelBean1;
      })(test || (test = exports('test', {})));

      (function (_test6) {
        var TestExcelBean2 = /*#__PURE__*/function () {
          function TestExcelBean2(_json_) {
            /**
             * 最高品质
             */
            this.y1 = void 0;
            /**
             * 黑色的
             */

            this.y2 = void 0;
            /**
             * 蓝色的
             */

            this.y3 = void 0;

            if (_json_.y1 === undefined) {
              throw new Error();
            }

            this.y1 = _json_.y1;

            if (_json_.y2 === undefined) {
              throw new Error();
            }

            this.y2 = _json_.y2;

            if (_json_.y3 === undefined) {
              throw new Error();
            }

            this.y3 = _json_.y3;
          }

          var _proto52 = TestExcelBean2.prototype;

          _proto52.resolve = function resolve(tables) {};

          return TestExcelBean2;
        }();

        _test6.TestExcelBean2 = TestExcelBean2;
      })(test || (test = exports('test', {})));

      var vector2 = exports('vector2', /*#__PURE__*/function () {
        function vector2(_json_) {
          this.x = void 0;
          this.y = void 0;

          if (_json_.x === undefined) {
            throw new Error();
          }

          this.x = _json_.x;

          if (_json_.y === undefined) {
            throw new Error();
          }

          this.y = _json_.y;
        }

        var _proto53 = vector2.prototype;

        _proto53.resolve = function resolve(tables) {};

        return vector2;
      }());
      var vector3 = exports('vector3', /*#__PURE__*/function () {
        function vector3(_json_) {
          this.x = void 0;
          this.y = void 0;
          this.z = void 0;

          if (_json_.x === undefined) {
            throw new Error();
          }

          this.x = _json_.x;

          if (_json_.y === undefined) {
            throw new Error();
          }

          this.y = _json_.y;

          if (_json_.z === undefined) {
            throw new Error();
          }

          this.z = _json_.z;
        }

        var _proto54 = vector3.prototype;

        _proto54.resolve = function resolve(tables) {};

        return vector3;
      }());
      var vector4 = exports('vector4', /*#__PURE__*/function () {
        function vector4(_json_) {
          this.x = void 0;
          this.y = void 0;
          this.z = void 0;
          this.w = void 0;

          if (_json_.x === undefined) {
            throw new Error();
          }

          this.x = _json_.x;

          if (_json_.y === undefined) {
            throw new Error();
          }

          this.y = _json_.y;

          if (_json_.z === undefined) {
            throw new Error();
          }

          this.z = _json_.z;

          if (_json_.w === undefined) {
            throw new Error();
          }

          this.w = _json_.w;
        }

        var _proto55 = vector4.prototype;

        _proto55.resolve = function resolve(tables) {};

        return vector4;
      }());

      (function (_common3) {
        var TbLang = /*#__PURE__*/function () {
          function TbLang(_json_) {
            this._dataMap = void 0;
            this._dataList = void 0;
            this._dataMap = new Map();
            this._dataList = [];

            for (var _iterator3 = _createForOfIteratorHelperLoose(_json_), _step3; !(_step3 = _iterator3()).done;) {
              var _json2_ = _step3.value;

              var _v = void 0;

              _v = new common.LangItem(_json2_);

              this._dataList.push(_v);

              this._dataMap.set(_v.key, _v);
            }
          }

          var _proto57 = TbLang.prototype;

          _proto57.getDataMap = function getDataMap() {
            return this._dataMap;
          };

          _proto57.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto57.get = function get(key) {
            return this._dataMap.get(key);
          };

          _proto57.resolve = function resolve(tables) {
            for (var _iterator4 = _createForOfIteratorHelperLoose(this._dataList), _step4; !(_step4 = _iterator4()).done;) {
              var data = _step4.value;
              data.resolve(tables);
            }
          };

          return TbLang;
        }();

        _common3.TbLang = TbLang;
      })(common || (common = exports('common', {})));

      (function (_common4) {
        var TbConstant = /*#__PURE__*/function () {
          function TbConstant(_json_) {
            this._dataMap = void 0;
            this._dataList = void 0;
            this._dataMap = new Map();
            this._dataList = [];

            for (var _iterator7 = _createForOfIteratorHelperLoose(_json_), _step7; !(_step7 = _iterator7()).done;) {
              var _json2_ = _step7.value;

              var _v = void 0;

              _v = new common.Constant(_json2_);

              this._dataList.push(_v);

              this._dataMap.set(_v.test0, _v);
            }
          }

          var _proto59 = TbConstant.prototype;

          _proto59.getDataMap = function getDataMap() {
            return this._dataMap;
          };

          _proto59.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto59.get = function get(key) {
            return this._dataMap.get(key);
          };

          _proto59.resolve = function resolve(tables) {
            for (var _iterator8 = _createForOfIteratorHelperLoose(this._dataList), _step8; !(_step8 = _iterator8()).done;) {
              var data = _step8.value;
              data.resolve(tables);
            }
          };

          return TbConstant;
        }();

        _common4.TbConstant = TbConstant;
      })(common || (common = exports('common', {})));

      (function (_battle21) {
        var TbBase = /*#__PURE__*/function () {
          function TbBase(_json_) {
            this._dataMap = void 0;
            this._dataList = void 0;
            this._dataMap = new Map();
            this._dataList = [];

            for (var _iterator11 = _createForOfIteratorHelperLoose(_json_), _step11; !(_step11 = _iterator11()).done;) {
              var _json2_ = _step11.value;

              var _v = void 0;

              _v = new battle.Props(_json2_);

              this._dataList.push(_v);

              this._dataMap.set(_v.id, _v);
            }
          }

          var _proto61 = TbBase.prototype;

          _proto61.getDataMap = function getDataMap() {
            return this._dataMap;
          };

          _proto61.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto61.get = function get(key) {
            return this._dataMap.get(key);
          };

          _proto61.resolve = function resolve(tables) {
            for (var _iterator12 = _createForOfIteratorHelperLoose(this._dataList), _step12; !(_step12 = _iterator12()).done;) {
              var data = _step12.value;
              data.resolve(tables);
            }
          };

          return TbBase;
        }();

        _battle21.TbBase = TbBase;
      })(battle || (battle = exports('battle', {})));

      (function (_battle22) {
        var TbCheckpoint = /*#__PURE__*/function () {
          function TbCheckpoint(_json_) {
            this._dataMap = void 0;
            this._dataList = void 0;
            this._dataMap = new Map();
            this._dataList = [];

            for (var _iterator15 = _createForOfIteratorHelperLoose(_json_), _step15; !(_step15 = _iterator15()).done;) {
              var _json2_ = _step15.value;

              var _v = void 0;

              _v = new battle.Checkpoint(_json2_);

              this._dataList.push(_v);

              this._dataMap.set(_v.id, _v);
            }
          }

          var _proto63 = TbCheckpoint.prototype;

          _proto63.getDataMap = function getDataMap() {
            return this._dataMap;
          };

          _proto63.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto63.get = function get(key) {
            return this._dataMap.get(key);
          };

          _proto63.resolve = function resolve(tables) {
            for (var _iterator16 = _createForOfIteratorHelperLoose(this._dataList), _step16; !(_step16 = _iterator16()).done;) {
              var data = _step16.value;
              data.resolve(tables);
            }
          };

          return TbCheckpoint;
        }();

        _battle22.TbCheckpoint = TbCheckpoint;
      })(battle || (battle = exports('battle', {})));

      (function (_battle23) {
        var TbMap001 = /*#__PURE__*/function () {
          function TbMap001(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator19 = _createForOfIteratorHelperLoose(_json_), _step19; !(_step19 = _iterator19()).done;) {
              var _json2_ = _step19.value;

              var _v = void 0;

              _v = new battle.MapItem001(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto65 = TbMap001.prototype;

          _proto65.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto65.get = function get(index) {
            return this._dataList[index];
          };

          _proto65.resolve = function resolve(tables) {
            for (var _iterator20 = _createForOfIteratorHelperLoose(this._dataList), _step20; !(_step20 = _iterator20()).done;) {
              var data = _step20.value;
              data.resolve(tables);
            }
          };

          return TbMap001;
        }();

        _battle23.TbMap001 = TbMap001;
      })(battle || (battle = exports('battle', {})));

      (function (_battle24) {
        var TbMap002 = /*#__PURE__*/function () {
          function TbMap002(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator23 = _createForOfIteratorHelperLoose(_json_), _step23; !(_step23 = _iterator23()).done;) {
              var _json2_ = _step23.value;

              var _v = void 0;

              _v = new battle.MapItem002(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto67 = TbMap002.prototype;

          _proto67.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto67.get = function get(index) {
            return this._dataList[index];
          };

          _proto67.resolve = function resolve(tables) {
            for (var _iterator24 = _createForOfIteratorHelperLoose(this._dataList), _step24; !(_step24 = _iterator24()).done;) {
              var data = _step24.value;
              data.resolve(tables);
            }
          };

          return TbMap002;
        }();

        _battle24.TbMap002 = TbMap002;
      })(battle || (battle = exports('battle', {})));

      (function (_battle25) {
        var TbMap003 = /*#__PURE__*/function () {
          function TbMap003(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator27 = _createForOfIteratorHelperLoose(_json_), _step27; !(_step27 = _iterator27()).done;) {
              var _json2_ = _step27.value;

              var _v = void 0;

              _v = new battle.MapItem003(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto69 = TbMap003.prototype;

          _proto69.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto69.get = function get(index) {
            return this._dataList[index];
          };

          _proto69.resolve = function resolve(tables) {
            for (var _iterator28 = _createForOfIteratorHelperLoose(this._dataList), _step28; !(_step28 = _iterator28()).done;) {
              var data = _step28.value;
              data.resolve(tables);
            }
          };

          return TbMap003;
        }();

        _battle25.TbMap003 = TbMap003;
      })(battle || (battle = exports('battle', {})));

      (function (_battle26) {
        var TbMap004 = /*#__PURE__*/function () {
          function TbMap004(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator31 = _createForOfIteratorHelperLoose(_json_), _step31; !(_step31 = _iterator31()).done;) {
              var _json2_ = _step31.value;

              var _v = void 0;

              _v = new battle.MapItem004(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto71 = TbMap004.prototype;

          _proto71.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto71.get = function get(index) {
            return this._dataList[index];
          };

          _proto71.resolve = function resolve(tables) {
            for (var _iterator32 = _createForOfIteratorHelperLoose(this._dataList), _step32; !(_step32 = _iterator32()).done;) {
              var data = _step32.value;
              data.resolve(tables);
            }
          };

          return TbMap004;
        }();

        _battle26.TbMap004 = TbMap004;
      })(battle || (battle = exports('battle', {})));

      (function (_battle27) {
        var TbMap005 = /*#__PURE__*/function () {
          function TbMap005(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator35 = _createForOfIteratorHelperLoose(_json_), _step35; !(_step35 = _iterator35()).done;) {
              var _json2_ = _step35.value;

              var _v = void 0;

              _v = new battle.MapItem005(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto73 = TbMap005.prototype;

          _proto73.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto73.get = function get(index) {
            return this._dataList[index];
          };

          _proto73.resolve = function resolve(tables) {
            for (var _iterator36 = _createForOfIteratorHelperLoose(this._dataList), _step36; !(_step36 = _iterator36()).done;) {
              var data = _step36.value;
              data.resolve(tables);
            }
          };

          return TbMap005;
        }();

        _battle27.TbMap005 = TbMap005;
      })(battle || (battle = exports('battle', {})));

      (function (_battle28) {
        var TbMap006 = /*#__PURE__*/function () {
          function TbMap006(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator39 = _createForOfIteratorHelperLoose(_json_), _step39; !(_step39 = _iterator39()).done;) {
              var _json2_ = _step39.value;

              var _v = void 0;

              _v = new battle.MapItem006(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto75 = TbMap006.prototype;

          _proto75.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto75.get = function get(index) {
            return this._dataList[index];
          };

          _proto75.resolve = function resolve(tables) {
            for (var _iterator40 = _createForOfIteratorHelperLoose(this._dataList), _step40; !(_step40 = _iterator40()).done;) {
              var data = _step40.value;
              data.resolve(tables);
            }
          };

          return TbMap006;
        }();

        _battle28.TbMap006 = TbMap006;
      })(battle || (battle = exports('battle', {})));

      (function (_battle29) {
        var TbMap007 = /*#__PURE__*/function () {
          function TbMap007(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator43 = _createForOfIteratorHelperLoose(_json_), _step43; !(_step43 = _iterator43()).done;) {
              var _json2_ = _step43.value;

              var _v = void 0;

              _v = new battle.MapItem007(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto77 = TbMap007.prototype;

          _proto77.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto77.get = function get(index) {
            return this._dataList[index];
          };

          _proto77.resolve = function resolve(tables) {
            for (var _iterator44 = _createForOfIteratorHelperLoose(this._dataList), _step44; !(_step44 = _iterator44()).done;) {
              var data = _step44.value;
              data.resolve(tables);
            }
          };

          return TbMap007;
        }();

        _battle29.TbMap007 = TbMap007;
      })(battle || (battle = exports('battle', {})));

      (function (_battle30) {
        var TbMap009 = /*#__PURE__*/function () {
          function TbMap009(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator47 = _createForOfIteratorHelperLoose(_json_), _step47; !(_step47 = _iterator47()).done;) {
              var _json2_ = _step47.value;

              var _v = void 0;

              _v = new battle.MapItem009(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto79 = TbMap009.prototype;

          _proto79.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto79.get = function get(index) {
            return this._dataList[index];
          };

          _proto79.resolve = function resolve(tables) {
            for (var _iterator48 = _createForOfIteratorHelperLoose(this._dataList), _step48; !(_step48 = _iterator48()).done;) {
              var data = _step48.value;
              data.resolve(tables);
            }
          };

          return TbMap009;
        }();

        _battle30.TbMap009 = TbMap009;
      })(battle || (battle = exports('battle', {})));

      (function (_battle31) {
        var TbMap010 = /*#__PURE__*/function () {
          function TbMap010(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator51 = _createForOfIteratorHelperLoose(_json_), _step51; !(_step51 = _iterator51()).done;) {
              var _json2_ = _step51.value;

              var _v = void 0;

              _v = new battle.MapItem010(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto81 = TbMap010.prototype;

          _proto81.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto81.get = function get(index) {
            return this._dataList[index];
          };

          _proto81.resolve = function resolve(tables) {
            for (var _iterator52 = _createForOfIteratorHelperLoose(this._dataList), _step52; !(_step52 = _iterator52()).done;) {
              var data = _step52.value;
              data.resolve(tables);
            }
          };

          return TbMap010;
        }();

        _battle31.TbMap010 = TbMap010;
      })(battle || (battle = exports('battle', {})));

      (function (_battle32) {
        var TbMap011 = /*#__PURE__*/function () {
          function TbMap011(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator55 = _createForOfIteratorHelperLoose(_json_), _step55; !(_step55 = _iterator55()).done;) {
              var _json2_ = _step55.value;

              var _v = void 0;

              _v = new battle.MapItem011(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto83 = TbMap011.prototype;

          _proto83.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto83.get = function get(index) {
            return this._dataList[index];
          };

          _proto83.resolve = function resolve(tables) {
            for (var _iterator56 = _createForOfIteratorHelperLoose(this._dataList), _step56; !(_step56 = _iterator56()).done;) {
              var data = _step56.value;
              data.resolve(tables);
            }
          };

          return TbMap011;
        }();

        _battle32.TbMap011 = TbMap011;
      })(battle || (battle = exports('battle', {})));

      (function (_battle33) {
        var TbMap101 = /*#__PURE__*/function () {
          function TbMap101(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator59 = _createForOfIteratorHelperLoose(_json_), _step59; !(_step59 = _iterator59()).done;) {
              var _json2_ = _step59.value;

              var _v = void 0;

              _v = new battle.MapItem101(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto85 = TbMap101.prototype;

          _proto85.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto85.get = function get(index) {
            return this._dataList[index];
          };

          _proto85.resolve = function resolve(tables) {
            for (var _iterator60 = _createForOfIteratorHelperLoose(this._dataList), _step60; !(_step60 = _iterator60()).done;) {
              var data = _step60.value;
              data.resolve(tables);
            }
          };

          return TbMap101;
        }();

        _battle33.TbMap101 = TbMap101;
      })(battle || (battle = exports('battle', {})));

      (function (_battle34) {
        var TbMap102 = /*#__PURE__*/function () {
          function TbMap102(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator63 = _createForOfIteratorHelperLoose(_json_), _step63; !(_step63 = _iterator63()).done;) {
              var _json2_ = _step63.value;

              var _v = void 0;

              _v = new battle.MapItem102(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto87 = TbMap102.prototype;

          _proto87.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto87.get = function get(index) {
            return this._dataList[index];
          };

          _proto87.resolve = function resolve(tables) {
            for (var _iterator64 = _createForOfIteratorHelperLoose(this._dataList), _step64; !(_step64 = _iterator64()).done;) {
              var data = _step64.value;
              data.resolve(tables);
            }
          };

          return TbMap102;
        }();

        _battle34.TbMap102 = TbMap102;
      })(battle || (battle = exports('battle', {})));

      (function (_battle35) {
        var TbMap103 = /*#__PURE__*/function () {
          function TbMap103(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator67 = _createForOfIteratorHelperLoose(_json_), _step67; !(_step67 = _iterator67()).done;) {
              var _json2_ = _step67.value;

              var _v = void 0;

              _v = new battle.MapItem103(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto89 = TbMap103.prototype;

          _proto89.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto89.get = function get(index) {
            return this._dataList[index];
          };

          _proto89.resolve = function resolve(tables) {
            for (var _iterator68 = _createForOfIteratorHelperLoose(this._dataList), _step68; !(_step68 = _iterator68()).done;) {
              var data = _step68.value;
              data.resolve(tables);
            }
          };

          return TbMap103;
        }();

        _battle35.TbMap103 = TbMap103;
      })(battle || (battle = exports('battle', {})));

      (function (_battle36) {
        var TbMap104 = /*#__PURE__*/function () {
          function TbMap104(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator71 = _createForOfIteratorHelperLoose(_json_), _step71; !(_step71 = _iterator71()).done;) {
              var _json2_ = _step71.value;

              var _v = void 0;

              _v = new battle.MapItem104(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto91 = TbMap104.prototype;

          _proto91.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto91.get = function get(index) {
            return this._dataList[index];
          };

          _proto91.resolve = function resolve(tables) {
            for (var _iterator72 = _createForOfIteratorHelperLoose(this._dataList), _step72; !(_step72 = _iterator72()).done;) {
              var data = _step72.value;
              data.resolve(tables);
            }
          };

          return TbMap104;
        }();

        _battle36.TbMap104 = TbMap104;
      })(battle || (battle = exports('battle', {})));

      (function (_battle37) {
        var TbMap105 = /*#__PURE__*/function () {
          function TbMap105(_json_) {
            this._dataList = void 0;
            this._dataList = [];

            for (var _iterator75 = _createForOfIteratorHelperLoose(_json_), _step75; !(_step75 = _iterator75()).done;) {
              var _json2_ = _step75.value;

              var _v = void 0;

              _v = new battle.MapItem105(_json2_);

              this._dataList.push(_v);
            }
          }

          var _proto93 = TbMap105.prototype;

          _proto93.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto93.get = function get(index) {
            return this._dataList[index];
          };

          _proto93.resolve = function resolve(tables) {
            for (var _iterator76 = _createForOfIteratorHelperLoose(this._dataList), _step76; !(_step76 = _iterator76()).done;) {
              var data = _step76.value;
              data.resolve(tables);
            }
          };

          return TbMap105;
        }();

        _battle37.TbMap105 = TbMap105;
      })(battle || (battle = exports('battle', {})));

      (function (_battle38) {
        var TbMonsterSkill = /*#__PURE__*/function () {
          function TbMonsterSkill(_json_) {
            this._dataMap = void 0;
            this._dataList = void 0;
            this._dataMap = new Map();
            this._dataList = [];

            for (var _iterator79 = _createForOfIteratorHelperLoose(_json_), _step79; !(_step79 = _iterator79()).done;) {
              var _json2_ = _step79.value;

              var _v = void 0;

              _v = new battle.MonsterSkill(_json2_);

              this._dataList.push(_v);

              this._dataMap.set(_v.id, _v);
            }
          }

          var _proto95 = TbMonsterSkill.prototype;

          _proto95.getDataMap = function getDataMap() {
            return this._dataMap;
          };

          _proto95.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto95.get = function get(key) {
            return this._dataMap.get(key);
          };

          _proto95.resolve = function resolve(tables) {
            for (var _iterator80 = _createForOfIteratorHelperLoose(this._dataList), _step80; !(_step80 = _iterator80()).done;) {
              var data = _step80.value;
              data.resolve(tables);
            }
          };

          return TbMonsterSkill;
        }();

        _battle38.TbMonsterSkill = TbMonsterSkill;
      })(battle || (battle = exports('battle', {})));

      (function (_battle39) {
        var TbPlayerSkill = /*#__PURE__*/function () {
          function TbPlayerSkill(_json_) {
            this._dataMap = void 0;
            this._dataList = void 0;
            this._dataMap = new Map();
            this._dataList = [];

            for (var _iterator83 = _createForOfIteratorHelperLoose(_json_), _step83; !(_step83 = _iterator83()).done;) {
              var _json2_ = _step83.value;

              var _v = void 0;

              _v = new battle.PlayerSkill(_json2_);

              this._dataList.push(_v);

              this._dataMap.set(_v.id, _v);
            }
          }

          var _proto97 = TbPlayerSkill.prototype;

          _proto97.getDataMap = function getDataMap() {
            return this._dataMap;
          };

          _proto97.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto97.get = function get(key) {
            return this._dataMap.get(key);
          };

          _proto97.resolve = function resolve(tables) {
            for (var _iterator84 = _createForOfIteratorHelperLoose(this._dataList), _step84; !(_step84 = _iterator84()).done;) {
              var data = _step84.value;
              data.resolve(tables);
            }
          };

          return TbPlayerSkill;
        }();

        _battle39.TbPlayerSkill = TbPlayerSkill;
      })(battle || (battle = exports('battle', {})));

      (function (_battle40) {
        var TbPlayerSkillEn = /*#__PURE__*/function () {
          function TbPlayerSkillEn(_json_) {
            this._dataMap = void 0;
            this._dataList = void 0;
            this._dataMap = new Map();
            this._dataList = [];

            for (var _iterator87 = _createForOfIteratorHelperLoose(_json_), _step87; !(_step87 = _iterator87()).done;) {
              var _json2_ = _step87.value;

              var _v = void 0;

              _v = new battle.PlayerSkillEn(_json2_);

              this._dataList.push(_v);

              this._dataMap.set(_v.id, _v);
            }
          }

          var _proto99 = TbPlayerSkillEn.prototype;

          _proto99.getDataMap = function getDataMap() {
            return this._dataMap;
          };

          _proto99.getDataList = function getDataList() {
            return this._dataList;
          };

          _proto99.get = function get(key) {
            return this._dataMap.get(key);
          };

          _proto99.resolve = function resolve(tables) {
            for (var _iterator88 = _createForOfIteratorHelperLoose(this._dataList), _step88; !(_step88 = _iterator88()).done;) {
              var data = _step88.value;
              data.resolve(tables);
            }
          };

          return TbPlayerSkillEn;
        }();

        _battle40.TbPlayerSkillEn = TbPlayerSkillEn;
      })(battle || (battle = exports('battle', {})));

      var Tables = exports('Tables', /*#__PURE__*/function () {
        function Tables(loader) {
          this._TbLang = void 0;
          this._TbConstant = void 0;
          this._TbBase = void 0;
          this._TbCheckpoint = void 0;
          this._TbMap001 = void 0;
          this._TbMap002 = void 0;
          this._TbMap003 = void 0;
          this._TbMap004 = void 0;
          this._TbMap005 = void 0;
          this._TbMap006 = void 0;
          this._TbMap007 = void 0;
          this._TbMap009 = void 0;
          this._TbMap010 = void 0;
          this._TbMap011 = void 0;
          this._TbMap101 = void 0;
          this._TbMap102 = void 0;
          this._TbMap103 = void 0;
          this._TbMap104 = void 0;
          this._TbMap105 = void 0;
          this._TbMonsterSkill = void 0;
          this._TbPlayerSkill = void 0;
          this._TbPlayerSkillEn = void 0;
          this._TbLang = new common.TbLang(loader('common_tblang'));
          this._TbConstant = new common.TbConstant(loader('common_tbconstant'));
          this._TbBase = new battle.TbBase(loader('battle_tbbase'));
          this._TbCheckpoint = new battle.TbCheckpoint(loader('battle_tbcheckpoint'));
          this._TbMap001 = new battle.TbMap001(loader('battle_tbmap001'));
          this._TbMap002 = new battle.TbMap002(loader('battle_tbmap002'));
          this._TbMap003 = new battle.TbMap003(loader('battle_tbmap003'));
          this._TbMap004 = new battle.TbMap004(loader('battle_tbmap004'));
          this._TbMap005 = new battle.TbMap005(loader('battle_tbmap005'));
          this._TbMap006 = new battle.TbMap006(loader('battle_tbmap006'));
          this._TbMap007 = new battle.TbMap007(loader('battle_tbmap007'));
          this._TbMap009 = new battle.TbMap009(loader('battle_tbmap009'));
          this._TbMap010 = new battle.TbMap010(loader('battle_tbmap010'));
          this._TbMap011 = new battle.TbMap011(loader('battle_tbmap011'));
          this._TbMap101 = new battle.TbMap101(loader('battle_tbmap101'));
          this._TbMap102 = new battle.TbMap102(loader('battle_tbmap102'));
          this._TbMap103 = new battle.TbMap103(loader('battle_tbmap103'));
          this._TbMap104 = new battle.TbMap104(loader('battle_tbmap104'));
          this._TbMap105 = new battle.TbMap105(loader('battle_tbmap105'));
          this._TbMonsterSkill = new battle.TbMonsterSkill(loader('battle_tbmonsterskill'));
          this._TbPlayerSkill = new battle.TbPlayerSkill(loader('battle_tbplayerskill'));
          this._TbPlayerSkillEn = new battle.TbPlayerSkillEn(loader('battle_tbplayerskillen'));

          this._TbLang.resolve(this);

          this._TbConstant.resolve(this);

          this._TbBase.resolve(this);

          this._TbCheckpoint.resolve(this);

          this._TbMap001.resolve(this);

          this._TbMap002.resolve(this);

          this._TbMap003.resolve(this);

          this._TbMap004.resolve(this);

          this._TbMap005.resolve(this);

          this._TbMap006.resolve(this);

          this._TbMap007.resolve(this);

          this._TbMap009.resolve(this);

          this._TbMap010.resolve(this);

          this._TbMap011.resolve(this);

          this._TbMap101.resolve(this);

          this._TbMap102.resolve(this);

          this._TbMap103.resolve(this);

          this._TbMap104.resolve(this);

          this._TbMap105.resolve(this);

          this._TbMonsterSkill.resolve(this);

          this._TbPlayerSkill.resolve(this);

          this._TbPlayerSkillEn.resolve(this);
        }

        _createClass(Tables, [{
          key: "TbLang",
          get: function get() {
            return this._TbLang;
          }
        }, {
          key: "TbConstant",
          get: function get() {
            return this._TbConstant;
          }
        }, {
          key: "TbBase",
          get: function get() {
            return this._TbBase;
          }
        }, {
          key: "TbCheckpoint",
          get: function get() {
            return this._TbCheckpoint;
          }
        }, {
          key: "TbMap001",
          get: function get() {
            return this._TbMap001;
          }
        }, {
          key: "TbMap002",
          get: function get() {
            return this._TbMap002;
          }
        }, {
          key: "TbMap003",
          get: function get() {
            return this._TbMap003;
          }
        }, {
          key: "TbMap004",
          get: function get() {
            return this._TbMap004;
          }
        }, {
          key: "TbMap005",
          get: function get() {
            return this._TbMap005;
          }
        }, {
          key: "TbMap006",
          get: function get() {
            return this._TbMap006;
          }
        }, {
          key: "TbMap007",
          get: function get() {
            return this._TbMap007;
          }
        }, {
          key: "TbMap009",
          get: function get() {
            return this._TbMap009;
          }
        }, {
          key: "TbMap010",
          get: function get() {
            return this._TbMap010;
          }
        }, {
          key: "TbMap011",
          get: function get() {
            return this._TbMap011;
          }
        }, {
          key: "TbMap101",
          get: function get() {
            return this._TbMap101;
          }
        }, {
          key: "TbMap102",
          get: function get() {
            return this._TbMap102;
          }
        }, {
          key: "TbMap103",
          get: function get() {
            return this._TbMap103;
          }
        }, {
          key: "TbMap104",
          get: function get() {
            return this._TbMap104;
          }
        }, {
          key: "TbMap105",
          get: function get() {
            return this._TbMap105;
          }
        }, {
          key: "TbMonsterSkill",
          get: function get() {
            return this._TbMonsterSkill;
          }
        }, {
          key: "TbPlayerSkill",
          get: function get() {
            return this._TbPlayerSkill;
          }
        }, {
          key: "TbPlayerSkillEn",
          get: function get() {
            return this._TbPlayerSkillEn;
          }
        }]);

        return Tables;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SellType.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "68630f3rE5PErQF8cUh2CAA", "SellType", undefined);

      var SellType = exports('SellType', /*#__PURE__*/function (SellType) {
        SellType["EnterAquarium"] = "EnterAquarium";
        return SellType;
      }({}));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Setting.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './audioManager.ts', './ModuleType.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteFrame, Node, Vec3, Sprite, Label, profiler, Component, facade, AudioManager, ModuleName, MediatorName, ProxyName;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteFrame = module.SpriteFrame;
      Node = module.Node;
      Vec3 = module.Vec3;
      Sprite = module.Sprite;
      Label = module.Label;
      profiler = module.profiler;
      Component = module.Component;
    }, function (module) {
      facade = module.facade;
    }, null, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      ModuleName = module.ModuleName;
      MediatorName = module.MediatorName;
      ProxyName = module.ProxyName;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "62addxjtsBIbZq0Ppg7IJvS", "Setting", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu;
      var Setting = exports('Setting', (_dec = ccclass("Setting"), _dec2 = menu("_game/module/Setting"), _dec3 = property(SpriteFrame), _dec4 = property(SpriteFrame), _dec5 = property(Node), _dec6 = property(Node), _dec7 = property(Node), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Setting, _Component);

        function Setting() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "sfOn", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfOff", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "audio", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "debug", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "vibration", _descriptor5, _assertThisInitialized(_this));

          _this._proxy = null;
          _this._mediator = null;
          _this._dotPos = new Vec3();
          return _this;
        }

        var _proto = Setting.prototype;

        _proto.onLoad = function onLoad() {
          var _facade$retrieveModul;

          this._mediator = (_facade$retrieveModul = facade.retrieveModule(ModuleName.Home)) == null ? void 0 : _facade$retrieveModul.retrieveMediator(MediatorName.Setting);
          var proxy = facade.retrieveProxy(ModuleName.Game, ProxyName.Game);
          var audioEnabled = proxy.audioEnabled,
              debugEnabled = proxy.debugEnabled,
              vibrationEnabled = proxy.vibrationEnabled;
          this._proxy = proxy;
          this.turnSwitch(this.audio, audioEnabled);
          this.turnSwitch(this.debug, debugEnabled);
          this.turnSwitch(this.vibration, vibrationEnabled);
        };

        _proto.turnSwitch = function turnSwitch(node, isOpen) {
          var _nodeDot$getChildByNa;

          var sp = node.getComponent(Sprite);
          var nodeDot = node.getChildByName("dot");
          var lbl = (_nodeDot$getChildByNa = nodeDot.getChildByName("txt")) == null ? void 0 : _nodeDot$getChildByNa.getComponent(Label);
          var pos = nodeDot.position;
          sp.spriteFrame = isOpen ? this.sfOn : this.sfOff;
          lbl.string = isOpen ? "on" : "off";
          nodeDot.setPosition(this._dotPos.set(isOpen ? 24 : -24, pos.y, pos.z));
        };

        _proto.onBtnVibrationClick = function onBtnVibrationClick() {
          this._proxy.enableVibration();

          this.turnSwitch(this.vibration, this._proxy.vibrationEnabled);
        };

        _proto.onBtnMusicClick = function onBtnMusicClick() {
          var enabled = this._proxy.audioEnabled;

          this._proxy.enableAudio();

          this.turnSwitch(this.audio, enabled);
          var gameProxy = facade.retrieveProxy(ModuleName.Game, ProxyName.Game);
          gameProxy.switchAudioSetting(enabled);
          AudioManager.instance.switchSound(enabled);
          AudioManager.instance.switchMusic(enabled);
        };

        _proto.onBtnCloseClick = function onBtnCloseClick() {
          this._mediator.hide();
        };

        _proto.onBtnDebugClick = function onBtnDebugClick() {
          var enabled = this._proxy.debugEnabled;

          this._proxy.enableDebug();

          this.turnSwitch(this.debug, enabled);
          enabled ? profiler.showStats() : profiler.hideStats();
        };

        return Setting;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "sfOn", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "sfOff", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "audio", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "debug", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "vibration", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SettingMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './Mediator.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Mediator, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, null, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d1195bVEqxBSLHGKg65owiQ", "SettingMediator", undefined);
      /**
       * File: SettingMediator
       * Description: 
       * Created on: 2024-11-13 10:09:40
       */


      var SettingMediator = exports('SettingMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(SettingMediator, _Mediator);

        function SettingMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UIPopup;
          _this._skin = "setting/settingPanel";
          return _this;
        }

        var _proto = SettingMediator.prototype;

        _proto.onInit = function onInit() {
          _Mediator.prototype.onInit.call(this);
        };

        _proto.onShow = function onShow(param) {
          _Mediator.prototype.onShow.call(this);
        };

        _proto.addListeners = function addListeners() {
          _Mediator.prototype.addListeners.call(this);
        };

        _proto.removeListeners = function removeListeners() {
          _Mediator.prototype.removeListeners.call(this);
        };

        _proto.onHide = function onHide() {
          _Mediator.prototype.onHide.call(this);
        };

        return SettingMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SettlementMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './gameManager.ts', './clientEvent.ts', './constant.ts', './ViewMgr.ts', './SettlementPanel.ts', './ModuleType.ts', './Mediator.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Button, GameManager, ClientEvent, Constant, ViewMgr, SettlementPanel, ModuleName, MediatorName, ProxyName, Mediator, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
    }, null, null, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      ViewMgr = module.ViewMgr;
    }, function (module) {
      SettlementPanel = module.SettlementPanel;
    }, function (module) {
      ModuleName = module.ModuleName;
      MediatorName = module.MediatorName;
      ProxyName = module.ProxyName;
    }, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "e22f67x/GJFCKVEBKq85xfC", "SettlementMediator", undefined);
      /**
       * File: SettlementMediator
       * Description: 
       * Created on: 2024-11-13 10:09:40
       */


      var SettlementMediator = exports('SettlementMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(SettlementMediator, _Mediator);

        function SettlementMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UI;
          _this._skin = "settlement/settlementPanel";
          _this._playerProxy = null;
          return _this;
        }

        var _proto = SettlementMediator.prototype;

        _proto.onClickBtnHome = function onClickBtnHome() {
          if (!GameManager.isWin) {
            var _this$_playerProxy; //失败的时候清空技能和层级


            (_this$_playerProxy = this._playerProxy) == null ? void 0 : _this$_playerProxy.clearLevelAndSkill();
          }

          this.hide();
          ViewMgr.ins.show(ModuleName.Home, MediatorName.Home);
        };

        _proto.onClickBtnPlayAgain = function onClickBtnPlayAgain() {
          var _this2 = this;

          ClientEvent.dispatchEvent(Constant.EVENT_TYPE.ON_GAME_INIT, function () {
            _this2.hide();

            _this2.getModule().showView(MediatorName.FightHud);
          });
        };

        _proto.onInit = function onInit() {
          _Mediator.prototype.onInit.call(this);

          this._playerProxy = this.facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
        };

        _proto.onShow = function onShow() {
          var _this$getComponent;

          _Mediator.prototype.onShow.call(this);

          var _ref = this._playerProxy,
              level = _ref.level,
              arrSkill = _ref.playerInfo.arrSkill;
          (_this$getComponent = this.getComponent(SettlementPanel)) == null ? void 0 : _this$getComponent.show(level.toString(), arrSkill);
        };

        _proto.addListeners = function addListeners() {
          _Mediator.prototype.addListeners.call(this);

          var view = this.getComponent(SettlementPanel);
          view.btnHome.node.on(Button.EventType.CLICK, this.onClickBtnHome, this);
          view.btnPlayAgain.node.on(Button.EventType.CLICK, this.onClickBtnPlayAgain, this);
        };

        _proto.removeListeners = function removeListeners() {
          _Mediator.prototype.removeListeners.call(this);

          var view = this.getComponent(SettlementPanel);
          view.btnHome.node.off(Button.EventType.CLICK, this.onClickBtnHome, this);
          view.btnPlayAgain.node.off(Button.EventType.CLICK, this.onClickBtnPlayAgain, this);
        };

        _proto.onHide = function onHide() {
          _Mediator.prototype.onHide.call(this);
        };

        return SettlementMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SettlementPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameManager.ts', './SkillList.ts', './LanguageData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteFrame, Sprite, Label, Button, Component, GameManager, SkillList, _updateSceneRenderers;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteFrame = module.SpriteFrame;
      Sprite = module.Sprite;
      Label = module.Label;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      SkillList = module.SkillList;
    }, function (module) {
      _updateSceneRenderers = module.updateSceneRenderers;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _dec9, _dec10, _dec11, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;

      cclegacy._RF.push({}, "1401cEGX45NZo4bG6QqgEXu", "SettlementPanel", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SettlementPanel = exports('SettlementPanel', (_dec = ccclass("SettlementPanel"), _dec2 = menu("_game/module/fight/SettlementPanel"), _dec3 = property(Node), _dec4 = property(Node), _dec5 = property(SpriteFrame), _dec6 = property(SpriteFrame), _dec7 = property(Sprite), _dec8 = property(Label), _dec9 = property(Node), _dec10 = property(Button), _dec11 = property(Button), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SettlementPanel, _Component);

        function SettlementPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "winNode", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "failNode", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfTitleWin", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfTitleFail", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spTitle", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbLevel", _descriptor6, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ndSkillList", _descriptor7, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnHome", _descriptor8, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnPlayAgain", _descriptor9, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SettlementPanel.prototype;

        _proto.show = function show(level, skillArr) {
          _updateSceneRenderers();

          this.lbLevel.string = level;
          this.winNode.active = GameManager.isWin;
          this.failNode.active = !GameManager.isWin;
          var scriptSkillList = this.ndSkillList.getComponent(SkillList);
          scriptSkillList.init(skillArr);
        };

        return SettlementPanel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "winNode", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "failNode", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "sfTitleWin", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "sfTitleFail", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "spTitle", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "lbLevel", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, "ndSkillList", [_dec9], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, "btnHome", [_dec10], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, "btnPlayAgain", [_dec11], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SHA1.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "b3eb3XmndVOa7GhCckfFr0J", "SHA1", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ShopItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './audioManager.ts', './constant.ts', './resourceUtil.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteComponent, LabelComponent, Button, Color, Component, AudioManager, Constant, ResourceUtil;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteComponent = module.SpriteComponent;
      LabelComponent = module.LabelComponent;
      Button = module.Button;
      Color = module.Color;
      Component = module.Component;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "979feygUR1Ki7zlpS1qvtE7", "ShopItem", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property; //商品脚本

      var ShopItem = exports('ShopItem', (_dec = ccclass("ShopItem"), _dec2 = menu("_game/module/fight/shop/ShopItem"), _dec3 = property(SpriteComponent), _dec4 = property(LabelComponent), _dec5 = property(LabelComponent), _dec6 = property(LabelComponent), _dec7 = property(Button), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ShopItem, _Component);

        function ShopItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spSkillIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbDesc", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbGold", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnCom", _descriptor5, _assertThisInitialized(_this));

          _this._callback = void 0;
          _this._itemInfo = null;
          _this._colorRed = new Color(255, 0, 0, 255);
          _this._colorBlack = new Color(0, 0, 0, 255);
          _this._isMoneyEnough = false;
          return _this;
        }

        var _proto = ShopItem.prototype; //是否有足够的钱购买技能

        _proto.init = function init(itemInfo, isMoneyEnough, callback) {
          this._itemInfo = itemInfo;
          this._callback = callback;
          this.lbName.string = itemInfo.name;
          this.lbDesc.string = itemInfo.desc;
          this.lbGold.string = itemInfo.price.toString();
          this._isMoneyEnough = this.btnCom.interactable = isMoneyEnough;
          this.lbGold.color = this._isMoneyEnough ? this._colorBlack : this._colorRed;
          ResourceUtil.setSpriteFrame("texture/skillIcon/" + itemInfo.icon, this.spSkillIcon);
        };

        _proto.onBtnItemClick = function onBtnItemClick() {
          AudioManager.instance.playSound(Constant.SOUND.SELL);
          if (!this._isMoneyEnough) return;
          this._callback && this._callback(this._itemInfo);
        };

        return ShopItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spSkillIcon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbDesc", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "lbGold", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnCom", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ShopMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './ShopPanel.ts', './gameManager.ts', './effectManager.ts', './ModuleType.ts', './Mediator.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Button, ShopPanel, GameManager, EffectManager, MediatorName, ModuleName, ProxyName, Mediator, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
    }, null, null, function (module) {
      ShopPanel = module.ShopPanel;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      MediatorName = module.MediatorName;
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
    }, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "71a6bfCR0pF5LsgavTJJDVY", "ShopMediator", undefined);
      /**
       * File: ShopMediator
       * Description: 
       * Created on: 2024-11-13 10:09:40
       */


      var ShopMediator = exports('ShopMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(ShopMediator, _Mediator);

        function ShopMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UI;
          _this._skin = "shop/shopPanel";
          _this._playerProxy = null;
          return _this;
        }

        var _proto = ShopMediator.prototype;

        _proto.updateView = function updateView() {
          var proxy = this._playerProxy;
          var arrLock = proxy.getLockPlyerSkillShuffle();
          var gold = proxy.playerInfo.gold;
          this.getComponent(ShopPanel).show(gold, arrLock, this.onClickItem.bind(this));
        };

        _proto.onClickBtnRefresh = function onClickBtnRefresh() {
          this.updateView();
        };

        _proto.onClickItem = function onClickItem(item) {
          this.closeView();

          this._playerProxy.addPlayerSkill(item);

          GameManager.addGold(-item.price);
          var options = {
            effectPath: "levelUp/levelUp",
            ndTarget: GameManager.ndPlayer,
            isPlayAnimation: false,
            speed: GameManager.gameSpeed,
            isRecycle: true
          };
          EffectManager.instance.loadAndPlayEffect(options);
        };

        _proto.closeView = function closeView() {
          this._showParam && this._showParam();
          this.hide();
          this.getModule().showView(MediatorName.FightHud);
        };

        _proto.onClickBtnClose = function onClickBtnClose() {
          this.closeView();
        };

        _proto.onInit = function onInit() {
          _Mediator.prototype.onInit.call(this);

          this._playerProxy = this.facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
        };

        _proto.onShow = function onShow() {
          _Mediator.prototype.onShow.call(this);

          this.updateView();
        };

        _proto.addListeners = function addListeners() {
          _Mediator.prototype.addListeners.call(this);

          var view = this.getComponent(ShopPanel);
          view.btnClose.node.on(Button.EventType.CLICK, this.onClickBtnClose, this);
          view.btnRefresh.node.on(Button.EventType.CLICK, this.onClickBtnRefresh, this);
        };

        _proto.removeListeners = function removeListeners() {
          _Mediator.prototype.removeListeners.call(this);

          var view = this.getComponent(ShopPanel);
          view.btnClose.node.off(Button.EventType.CLICK, this.onClickBtnClose, this);
          view.btnRefresh.node.off(Button.EventType.CLICK, this.onClickBtnRefresh, this);
        };

        _proto.onHide = function onHide() {
          _Mediator.prototype.onHide.call(this);
        };

        return ShopMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ShopPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './ShopItem.ts', './LanguageData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, Sprite, Button, Component, ShopItem, _updateSceneRenderers;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      Sprite = module.Sprite;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      ShopItem = module.ShopItem;
    }, function (module) {
      _updateSceneRenderers = module.updateSceneRenderers;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4;

      cclegacy._RF.push({}, "23f74FCn0tIgbDeJbCTGIQo", "ShopPanel", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var ShopPanel = exports('ShopPanel', (_dec = ccclass("ShopPanel"), _dec2 = menu("_game/module/fight/shop/ShopPanel"), _dec3 = property(Node), _dec4 = property(Sprite), _dec5 = property(Button), _dec6 = property(Button), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(ShopPanel, _Component);

        function ShopPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ndSkills", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spRefreshIcon", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnRefresh", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnClose", _descriptor4, _assertThisInitialized(_this));

          _this._callback = null;
          return _this;
        }

        var _proto = ShopPanel.prototype;

        _proto.show = function show(gold, arrLock, callback) {
          _updateSceneRenderers();

          this.ndSkills.children.forEach(function (ndChild, idx) {
            var info = arrLock[idx];

            if (info) {
              ndChild.active = true;
              var scriptItem = ndChild.getComponent(ShopItem);
              scriptItem.init(info, gold >= info.price, callback);
            } else {
              ndChild.active = false;
            }
          });
        };

        return ShopPanel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ndSkills", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spRefreshIcon", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "btnRefresh", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnClose", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SimpleCommand.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Notifier.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Notifier;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Notifier = module.Notifier;
    }],
    execute: function () {
      cclegacy._RF.push({}, "55b19A9OAtCTJrAdY+xinml", "SimpleCommand", undefined);
      /** @public */


      var SimpleCommand = exports('SimpleCommand', /*#__PURE__*/function (_Notifier) {
        _inheritsLoose(SimpleCommand, _Notifier);

        function SimpleCommand() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Notifier.call.apply(_Notifier, [this].concat(args)) || this;
          _this._module = void 0;
          return _this;
        }

        var _proto = SimpleCommand.prototype;

        _proto.execute = function execute(n) {};

        _proto.setModule = function setModule(module) {
          this._module = module;
        };

        _proto.retrieveProxy = function retrieveProxy(proxyName) {
          return this._module.retrieveProxy(proxyName);
        };

        return SimpleCommand;
      }(Notifier));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Singleton.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      exports('Singleton', Singleton);

      cclegacy._RF.push({}, "edfcd3L0DhP5LBtcvOnOm2w", "Singleton", undefined);
      /** @public */


      function Singleton() {
        var _class;

        return _class = /*#__PURE__*/function () {
          function SingletonBase() {}

          _createClass(SingletonBase, null, [{
            key: "ins",
            get: function get() {
              if (!SingletonBase.__$ins) {
                SingletonBase.__$ins = new this();
              }

              return SingletonBase.__$ins;
            }
          }]);

          return SingletonBase;
        }(), _class.__$ins = void 0, _class;
      }

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillIcon.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './clientEvent.ts', './constant.ts', './resourceUtil.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Button, SpriteComponent, Node, Component, ClientEvent, Constant, ResourceUtil;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Button = module.Button;
      SpriteComponent = module.SpriteComponent;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      ClientEvent = module.ClientEvent;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "8173fQaqUhBU5q5YIayoRCf", "SkillIcon", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property,
          menu = _decorator.menu; //技能图标脚本

      var SkillIcon = exports('SkillIcon', (_dec = ccclass("SkillIcon"), _dec2 = menu("_game/module/fight/SkillIcon"), _dec3 = property(Button), _dec4 = property(SpriteComponent), _dec5 = property(Node), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SkillIcon, _Component);

        function SkillIcon() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "btnCom", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spIcon", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "ndBg", _descriptor3, _assertThisInitialized(_this));

          _this._callback = null;
          _this._itemInfo = null;
          _this._isSelected = false;
          return _this;
        }

        var _proto = SkillIcon.prototype;

        _proto.onEnable = function onEnable() {
          ClientEvent.on(Constant.EVENT_TYPE.HIDE_SKILL_ICON_SELECTED, this._hideSelected, this);
        };

        _proto.onDisable = function onDisable() {
          ClientEvent.off(Constant.EVENT_TYPE.HIDE_SKILL_ICON_SELECTED, this._hideSelected, this);
        };

        _proto.init = function init(idx, itemInfo, callback) {
          this._itemInfo = itemInfo;
          this._callback = callback;
          this._isSelected = false;

          if (idx === 0 && this._callback) {
            this._showSelected();

            this._callback(this._itemInfo);
          } else {
            this._hideSelected();
          }

          if (callback) {
            this.btnCom.transition = Button.Transition.SCALE;
          } else {
            this.btnCom.transition = Button.Transition.NONE;
          }

          ResourceUtil.setSpriteFrame("texture/skillIcon/" + itemInfo.icon, this.spIcon);
        };

        _proto.onItemClick = function onItemClick() {
          if (!this._isSelected && this._callback) {
            ClientEvent.dispatchEvent(Constant.EVENT_TYPE.HIDE_SKILL_ICON_SELECTED);

            this._callback(this._itemInfo);

            this._showSelected();
          }
        };

        _proto._showSelected = function _showSelected() {
          this._isSelected = true;
          this.ndBg.active = true;
        };

        _proto._hideSelected = function _hideSelected() {
          this._isSelected = false;
          this.ndBg.active = false;
        };

        return SkillIcon;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "btnCom", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spIcon", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "ndBg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillItem.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './resourceUtil.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, SpriteComponent, LabelComponent, Component, ResourceUtil;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      SpriteComponent = module.SpriteComponent;
      LabelComponent = module.LabelComponent;
      Component = module.Component;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "89a81DvAqxCQLZIPvRcmv1p", "SkillItem", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SkillItem = exports('SkillItem', (_dec = ccclass("SkillItem"), _dec2 = menu("_game/module/fight/skill/SkillItem"), _dec3 = property(SpriteComponent), _dec4 = property(LabelComponent), _dec5 = property(LabelComponent), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SkillItem, _Component);

        function SkillItem() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "spIcon", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbName", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbDesc", _descriptor3, _assertThisInitialized(_this));

          _this._callback = void 0;
          _this._itemInfo = null;
          return _this;
        }

        var _proto = SkillItem.prototype;

        _proto.init = function init(itemInfo, callback) {
          this._itemInfo = itemInfo;
          this._callback = callback;
          this.lbName.string = itemInfo.name;
          this.lbDesc.string = itemInfo.desc;
          ResourceUtil.setSpriteFrame("texture/skillIcon/" + itemInfo.icon, this.spIcon);
        };

        _proto.onBtnItemClick = function onBtnItemClick() {
          this._callback && this._callback(this._itemInfo);
        };

        return SkillItem;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "spIcon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "lbName", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbDesc", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillList.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Utils.ts', './constant.ts', './poolManager.ts', './SkillIcon.ts', './ConfigUtils.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Prefab, Component, Constant, PoolManager, SkillIcon, ConfigUtils;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Prefab = module.Prefab;
      Component = module.Component;
    }, null, function (module) {
      Constant = module.Constant;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, function (module) {
      SkillIcon = module.SkillIcon;
    }, function (module) {
      ConfigUtils = module.ConfigUtils;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "20512Q6I/lC4IzWAzFTbJbt", "SkillList", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property; //技能列表脚本

      var SkillList = exports('SkillList', (_dec = ccclass("SkillList"), _dec2 = menu("_game/module/fight/SkillList"), _dec3 = property(Prefab), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SkillList, _Component);

        function SkillList() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "pbSkillIcon", _descriptor, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SkillList.prototype;

        _proto.init = function init(skills, callback) {
          var _this2 = this;

          var arrUnLockSkill = skills.concat();
          this.node.children.forEach(function (ndChild) {
            ndChild.active = false;
          });

          if (arrUnLockSkill.length > Constant.MAX_SKILL_ICON_NUM) {
            arrUnLockSkill.length = Constant.MAX_SKILL_ICON_NUM;
          }

          arrUnLockSkill.forEach(function (skillId, idx) {
            var ndChild;

            if (idx >= _this2.node.children.length) {
              ndChild = PoolManager.instance.getNode(_this2.pbSkillIcon, _this2.node);
            } else {
              ndChild = _this2.node.children[idx];
            }

            ndChild.active = true;
            var itemInfo = ConfigUtils.get("TbPlayerSkill", skillId);
            if (!itemInfo) return;
            var scriptSkillIcon = ndChild.getComponent(SkillIcon);
            scriptSkillIcon.init(idx, itemInfo, callback);
          });
        };

        return SkillList;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "pbSkillIcon", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillMediator.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './PureMVC.ts', './Constant2.ts', './gameManager.ts', './audioManager.ts', './constant.ts', './effectManager.ts', './SkillPanel.ts', './ModuleType.ts', './Mediator.ts', './GameConfig.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Button, GameManager, AudioManager, Constant, EffectManager, SkillPanel, MediatorName, ModuleName, ProxyName, Mediator, EViewLayer;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      Button = module.Button;
    }, null, null, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      SkillPanel = module.SkillPanel;
    }, function (module) {
      MediatorName = module.MediatorName;
      ModuleName = module.ModuleName;
      ProxyName = module.ProxyName;
    }, function (module) {
      Mediator = module.Mediator;
    }, function (module) {
      EViewLayer = module.EViewLayer;
    }],
    execute: function () {
      cclegacy._RF.push({}, "78911BUrBBBAoQuNB9cryWQ", "SkillMediator", undefined);
      /**
       * File: SkillMediator
       * Description:
       * Created on: 2024-11-13 10:09:40
       */


      var SkillMediator = exports('SkillMediator', /*#__PURE__*/function (_Mediator) {
        _inheritsLoose(SkillMediator, _Mediator);

        function SkillMediator() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Mediator.call.apply(_Mediator, [this].concat(args)) || this;
          _this._defaultParent = EViewLayer.UI;
          _this._skin = "skill/skillPanel";
          _this._playerProxy = null;
          return _this;
        }

        var _proto = SkillMediator.prototype;

        _proto.updateView = function updateView() {
          var _this$getComponent;

          var proxy = this._playerProxy;
          var gold = proxy.skillSellGold;
          var skills = proxy.getLockPlyerSkillShuffle();
          (_this$getComponent = this.getComponent(SkillPanel)) == null ? void 0 : _this$getComponent.show(gold, skills, this.onClickSkillItem.bind(this));
        };

        _proto.onClickBtnGiveUp = function onClickBtnGiveUp() {
          AudioManager.instance.playSound(Constant.SOUND.SELL);
          GameManager.addGold(this._playerProxy.skillSellGold);
          this.closeView();
        };

        _proto.onClickBtnRefresh = function onClickBtnRefresh() {
          this.updateView();
        };

        _proto.closeView = function closeView() {
          this._showParam && this._showParam();
          this.hide();
          this.getModule().showView(MediatorName.FightHud);
        };

        _proto.onClickSkillItem = function onClickSkillItem(skill) {
          AudioManager.instance.playSound(Constant.SOUND.GET_SKILL);

          this._playerProxy.addPlayerSkill(skill);

          var options = {
            effectPath: "levelUp/levelUp",
            ndTarget: GameManager.ndPlayer,
            isPlayAnimation: false,
            speed: GameManager.gameSpeed,
            isRecycle: true
          };
          EffectManager.instance.loadAndPlayEffect(options);
          this.closeView();
        };

        _proto.onInit = function onInit() {
          _Mediator.prototype.onInit.call(this);

          this._playerProxy = this.facade.retrieveProxy(ModuleName.Player, ProxyName.Player);
        };

        _proto.onShow = function onShow() {
          _Mediator.prototype.onShow.call(this);

          this.updateView();
        };

        _proto.addListeners = function addListeners() {
          _Mediator.prototype.addListeners.call(this);

          var view = this.getComponent(SkillPanel);
          view.btnGiveUp.node.on(Button.EventType.CLICK, this.onClickBtnGiveUp, this);
          view.btnRefresh.node.on(Button.EventType.CLICK, this.onClickBtnRefresh, this);
        };

        _proto.removeListeners = function removeListeners() {
          _Mediator.prototype.removeListeners.call(this);

          var view = this.getComponent(SkillPanel);
          view.btnGiveUp.node.off(Button.EventType.CLICK, this.onClickBtnGiveUp, this);
          view.btnRefresh.node.off(Button.EventType.CLICK, this.onClickBtnRefresh, this);
        };

        _proto.onHide = function onHide() {
          _Mediator.prototype.onHide.call(this);
        };

        return SkillMediator;
      }(Mediator));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SkillPanel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './constant.ts', './SkillItem.ts', './LanguageData.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, SpriteComponent, LabelComponent, Button, Component, Constant, SkillItem, _updateSceneRenderers, _language;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      SpriteComponent = module.SpriteComponent;
      LabelComponent = module.LabelComponent;
      Button = module.Button;
      Component = module.Component;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      SkillItem = module.SkillItem;
    }, function (module) {
      _updateSceneRenderers = module.updateSceneRenderers;
      _language = module._language;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;

      cclegacy._RF.push({}, "d72c5vhHKlIwqZkbe3RjUQs", "SkillPanel", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SkillPanel = exports('SkillPanel', (_dec = ccclass("SkillPanel"), _dec2 = menu("_game/module/fight/skill/SkillPanel"), _dec3 = property(Node), _dec4 = property(SpriteComponent), _dec5 = property(LabelComponent), _dec6 = property(Button), _dec7 = property(Button), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(SkillPanel, _Component);

        function SkillPanel() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "ndSkills", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spRefreshIcon", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "lbGold", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnRefresh", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "btnGiveUp", _descriptor5, _assertThisInitialized(_this));

          return _this;
        }

        var _proto = SkillPanel.prototype;

        _proto.show = function show(gold, arrLock, callback) {
          _updateSceneRenderers();

          if (_language === Constant.I18_LANGUAGE.CHINESE) {
            this.lbGold.string = "\u83B7\u5F97 " + gold;
          } else {
            this.lbGold.string = "get " + gold;
          }

          this.ndSkills.children.forEach(function (ndChild, idx, arr) {
            if (arrLock[idx]) {
              var info = arrLock[idx];
              ndChild.active = true;
              var scriptItem = ndChild.getComponent(SkillItem);
              scriptItem.init(info, callback);
            } else {
              ndChild.active = false;
            }
          });
        };

        return SkillPanel;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "ndSkills", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spRefreshIcon", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "lbGold", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "btnRefresh", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "btnGiveUp", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SocketConst.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      // import { com } from "../../dedokit/utils/proto/proto_bundle.js";
      cclegacy._RF.push({}, "26f8dv7v6dBU4CnxamCaz1n", "SocketConst", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SocketMerge.ts", ['cc'], function () {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      // import { Socket } from "cc";
      cclegacy._RF.push({}, "8eea1ERd4lNsJbcOfl7j3jc", "SocketMerge", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/SocketUtils.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './proto_bundle.mjs_cjs=&original=.js', './proto_bundle.js'], function (exports) {
  var _createClass, cclegacy, _cjsExports;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, null, function (module) {
      _cjsExports = module.default;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2a56fkmM3hLUIj08c9Sg2XX", "SocketUtils", undefined);

      var ws = null;
      var heartbeatTimer;
      var heartbeatResTimeoutTimer;
      var msgCache = [];
      var handlers = {};
      var bindedObj = {};
      var openOrClose = {
        open: "state_open",
        close: "state_close"
      };

      function encode(dataBuf) {
        var msgSize = dataBuf.length;
        var totalSize = msgSize + 4 + 1; // 消息长度：4位 + isZip：1位

        var isZip = 0; // if(len > 2000){
        // isZip = 1;
        // var gzip = new Zlib.Gzip(data);
        // data = gzip.compress();
        // }
        // todo DataView 优化

        var buffer = new Uint8Array(totalSize);
        var view = new DataView(buffer.buffer);
        view.setUint32(0, msgSize, false);
        var index = 4;
        buffer[index++] = isZip & 0xff;
        copyArray(buffer, index, dataBuf, 0, dataBuf.length);
        return buffer;
      }

      function copyArray(dest, doffset, src, soffset, length) {
        for (var index = 0; index < length; index++) {
          dest[doffset++] = src[soffset++];
        }
      }
      /**
       * File: SocketUtils.ts
       * Description: 网络链接【socket模块】
       * Created on: 2024-11-07 15:49:23
       */


      var SocketUtils = exports('SocketUtils', /*#__PURE__*/function () {
        function SocketUtils() {}
        /**
         * 链接websocket服务器
         */


        SocketUtils.connect = function connect(url, token) {
          var _this = this;

          SocketUtils.disconnect();
          ws = new WebSocket(url);
          ws.binaryType = "arraybuffer";

          ws.onopen = function () {
            console.log("ws.onopen--->");
            setInterval(_this.read, 10);
          };

          ws.onerror = function () {
            console.log("ws.onerror--->");
          };

          ws.onclose = function () {
            console.log("ws.onclose--->");
            SocketUtils.disconnect();
            msgCache.push({
              cmd: "state_close",
              response: null
            });
          };

          ws.onmessage = function (event) {
            console.log("ws.onmessage--->", event.data);

            _this.handleMsg(new Uint8Array(event.data));
          };
        }
        /**
         * 断开链接
         * @param clearMsg 是否清空消息队列，一般情况均为true
         */
        ;

        SocketUtils.disconnect = function disconnect(clearMsg) {
          if (clearMsg === void 0) {
            clearMsg = true;
          }

          if (ws) {
            ws.onopen = null;
            ws.onclose = null;
            ws.onerror = null;
            ws.onmessage = null;
            ws.close();
            ws = null;
            clearInterval(heartbeatTimer);
            clearInterval(heartbeatResTimeoutTimer);
            heartbeatTimer = heartbeatResTimeoutTimer = undefined;
          }

          clearMsg && (msgCache.length = 0);
        }
        /**
         * 发送消息
         * @param cmd
         * @param data
         */
        ;

        SocketUtils.send = function send(cmd, msg) {
          if (!ws || ws.readyState !== 1) {
            console.warn("SocketUtils---send--->ws is not ready");
            return;
          }

          var msgWriter = this.SocketMsgMap[cmd].req.encode(msg);

          var reqWriter = _cjsExports.com.proto.CMsg.encode({
            cmd: Number(cmd),
            body: msgWriter.finish()
          });

          ws.send(encode(reqWriter.finish()).buffer);
        }
        /**
         * 读取消息
         */
        ;

        SocketUtils.read = function read() {
          if (msgCache.length <= 0) return;
          var tmp = msgCache.shift();

          if (handlers[tmp.cmd]) {
            handlers[tmp.cmd](tmp.response);
          }
        }
        /**
         * 添加网络连接成功的消息监听
         * @param cb
         * @param self
         */
        ;

        SocketUtils.onOpen = function onOpen(cb, self) {
          handlers[openOrClose.open] = cb.bind(self);
          bindedObj[openOrClose.open] = self;
        }
        /**
         * 移除网络连接成功的消息监听
         */
        ;

        SocketUtils.offOpen = function offOpen() {
          delete handlers[openOrClose.open];
          delete bindedObj[openOrClose.open];
        }
        /**
         * 添加网络断开的消息监听
         * @param cb
         * @param self
         */
        ;

        SocketUtils.onClose = function onClose(cb, self) {
          handlers[openOrClose.close] = cb.bind(self);
          bindedObj[openOrClose.close] = self;
        }
        /**
         * 移除网络断开的消息监听
         */
        ;

        SocketUtils.offClose = function offClose() {
          delete handlers[openOrClose.close];
          delete bindedObj[openOrClose.close];
        }
        /**
         * 添加消息监听
         * @param cmd
         * @param cb
         * @param self
         */
        // SocketMsgMapKey | "state_open" | "state_close"; response: SocketMsgMapRep<SocketMsgMapKey>
        ;

        SocketUtils.on = function on(cmd, cb, self) {
          handlers[cmd] = cb.bind(self);
          bindedObj[cmd] = self;
        }
        /**
         * 移除绑定的消息监听
         * @param self
         */
        ;

        SocketUtils.offAll = function offAll(self) {
          for (var _cmd in bindedObj) {
            if (bindedObj[_cmd] === self) {
              delete bindedObj[_cmd];
              delete handlers[_cmd];
            }
          }
        }
        /**
         * 处理socket服务器发送过来的消息
         * @param msgBuf
         */
        ;

        SocketUtils.handleMsg = function handleMsg(msgBuf) {
          try {
            var isCmd = function isCmd(instance) {
              if (SocketUtils.SocketMsgMap[instance] != null) {
                return true;
              }

              return false;
            };

            var index = 0;
            var protoSize = msgBuf[index] << 24 | msgBuf[index + 1] << 16 | msgBuf[index + 2] << 8 | msgBuf[index + 3];
            var isZip = msgBuf[4];
            var protoBuf = new Uint8Array(protoSize);
            copyArray(protoBuf, 0, msgBuf, 5, protoSize);
            index = 5;

            var _msg = _cjsExports.com.proto.CMsg.decode(protoBuf);

            console.log("handleMsg===========", protoSize, isZip, _msg);

            var cmd = _msg.cmd.toString();

            if (!isCmd(cmd)) {
              // todo map中没有对应的cmd字段
              return;
            }

            var msgWriter = this.SocketMsgMap[cmd].rep.decode(_msg.body);
            console.log("handleMsg===========proto---> ", msgWriter);
            msgCache.push({
              cmd: cmd,
              response: msgWriter
            }); // while (index < msgBuf.length) {
            //     let msgLen = (msgBuf[index] << 24) | (msgBuf[index + 1] << 16) | (msgBuf[index + 2] << 8) | msgBuf[index + 3];
            //     console.log("handleMsg===========", msgLen);
            //     if (msgBuf[index + 4] === 1) {
            //         // [opcode = 1 游戏逻辑]
            //         msgCache.push({
            //             id: route[(msgBuf[index + 5] << 8) | msgBuf[index + 6]],
            //             data: JSON.parse(strdecode(msgBuf.subarray(index + 7, index + 4 + msgLen))),
            //         });
            //     } else if (msgBuf[index + 4] === 2) {
            //         // [opcode = 2 握手]
            //         handshakeOver(JSON.parse(strdecode(msgBuf.subarray(index + 5, index + 4 + msgLen))));
            //         // todo  需要移除
            //         setInterval(SocketUtils.read, 10);
            //     } else if (msgBuf[index + 4] === 3) {
            //         // [opcode = 3 心跳回包] 移除心跳异常监听
            //         clearTimeout(heartbeatResTimeoutTimer);
            //         heartbeatResTimeoutTimer = undefined;
            //         console.log("心跳---返回--->");
            //     }
            //     index += msgLen + 4;
            // }
          } catch (error) {
            console.warn("SocketUtils---handleMsg--->error: ", error);
          }
        };

        _createClass(SocketUtils, null, [{
          key: "SocketMsgMap",
          get: function get() {
            return {
              "2001": {
                req: _cjsExports.com.proto.Msg_2001,
                rep: _cjsExports.com.proto.Msg_2001_
              },
              "2003": {
                req: _cjsExports.com.proto.Msg_2001,
                rep: _cjsExports.com.proto.Msg_2003_
              },
              "3004": {
                req: _cjsExports.com.proto.Msg_3004,
                rep: _cjsExports.com.proto.Msg_3004_
              }
            };
          }
        }]);

        return SocketUtils;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/StringUtils.ts", ['cc'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "d99dcUrDlJBTKfRKb5qg1q+", "StringUtils", undefined);
      /**
       * time: 2023/12/07 19:45:28
       * desc: 
       */


      var StringUtils = exports('StringUtils', /*#__PURE__*/function () {
        function StringUtils() {}
        /**
         * 转换成百分比
         * @param decimal 小数
         * @param precision 精度位数 默认两位
         */


        StringUtils.percent = function percent(decimal, precision) {
          if (precision === void 0) {
            precision = 2;
          }

          return (decimal * 100).toFixed(precision) + "%";
        };

        return StringUtils;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/test.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, Node, ParticleSystemComponent, Vec3, Component;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Node = module.Node;
      ParticleSystemComponent = module.ParticleSystemComponent;
      Vec3 = module.Vec3;
      Component = module.Component;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor, _descriptor2, _descriptor3;

      cclegacy._RF.push({}, "2b6adRTWCtEz5SjJi1RaOm5", "test", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //测试武器飞行脚本

      var Test = exports('Test', (_dec = ccclass('Test'), _dec2 = property([Node]), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Test, _Component);

        function Test() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "speed", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "range", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "arrNdTarget", _descriptor3, _assertThisInitialized(_this));

          _this._arrOriPos = [];
          _this._arrArriveEnd = [];
          return _this;
        }

        var _proto = Test.prototype;

        _proto.start = function start() {
          var _this2 = this; // [3]


          this._arrOriPos = [];
          this._arrArriveEnd = [];
          this.arrNdTarget.forEach(function (ndItem) {
            _this2._arrOriPos.push(ndItem.worldPosition.clone());
          });
        };

        _proto._resetAllPos = function _resetAllPos() {
          var _this3 = this;

          this.arrNdTarget.forEach(function (ndItem, idx) {
            ndItem.setWorldPosition(_this3._arrOriPos[idx]); //清除拖尾特效残留

            var arrParticle = ndItem.getComponentsInChildren(ParticleSystemComponent);
            arrParticle.forEach(function (item) {
              item.simulationSpeed = 1;
              item == null ? void 0 : item.clear();
              item == null ? void 0 : item.stop();
              item == null ? void 0 : item.play();
            });
          });
          this._arrArriveEnd = [];
        };

        _proto.update = function update(deltaTime) {
          // [4]
          if (this.arrNdTarget.length) {
            for (var idx = 0; idx < this.arrNdTarget.length; idx++) {
              var ndItem = this.arrNdTarget[idx];
              var pos = ndItem.worldPosition.clone();

              if (pos.length() >= this.range) {
                if (this._arrArriveEnd.indexOf(idx) === -1) {
                  this._arrArriveEnd.push(idx);
                }

                if (this._arrArriveEnd.length >= this.arrNdTarget.length) {
                  this._resetAllPos();

                  break;
                }
              } else {
                ndItem.translate(new Vec3(0, 0, -deltaTime * this.speed), Node.NodeSpace.LOCAL);
              }
            }
          }
        };

        return Test;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "speed", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 10;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "range", [property], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return 30;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "arrNdTarget", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return [];
        }
      })), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/tips.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './poolManager.ts', './util.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, cclegacy, _decorator, LabelComponent, SpriteComponent, UIOpacityComponent, SpriteFrame, Vec3, UITransform, isValid, Color, tween, Component, PoolManager, Util;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      LabelComponent = module.LabelComponent;
      SpriteComponent = module.SpriteComponent;
      UIOpacityComponent = module.UIOpacityComponent;
      SpriteFrame = module.SpriteFrame;
      Vec3 = module.Vec3;
      UITransform = module.UITransform;
      isValid = module.isValid;
      Color = module.Color;
      tween = module.tween;
      Component = module.Component;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, function (module) {
      Util = module.Util;
    }],
    execute: function () {
      var _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _dec7, _dec8, _class, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6;

      cclegacy._RF.push({}, "7399eanD05Fvq77XvAivscI", "tips", undefined);

      var menu = _decorator.menu,
          ccclass = _decorator.ccclass,
          property = _decorator.property; //提示脚本

      var tips = exports('tips', (_dec = ccclass('tips'), _dec2 = menu("_game/module/fight/hud/tips"), _dec3 = property(LabelComponent), _dec4 = property(SpriteComponent), _dec5 = property(SpriteComponent), _dec6 = property(UIOpacityComponent), _dec7 = property(SpriteFrame), _dec8 = property(SpriteFrame), _dec(_class = _dec2(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(tips, _Component);

        function tips() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "lbTips", _descriptor, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spIcon", _descriptor2, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "spBg", _descriptor3, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "UIOpacityBg", _descriptor4, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfGold", _descriptor5, _assertThisInitialized(_this));

          _initializerDefineProperty(_this, "sfHeart", _descriptor6, _assertThisInitialized(_this));

          _this._movePos = new Vec3();
          _this._curTipPos = new Vec3();
          _this._uiTipTargetPos = new Vec3(0, 230, 0);
          return _this;
        }

        var _proto = tips.prototype; //文字提示目标位置

        _proto.show = function show(content, type, targetPos, scale, callback) {
          var _this$lbTips,
              _this$lbTips$node,
              _this$lbTips$node$get,
              _this2 = this;

          if (callback === void 0) {
            callback = function callback() {};
          }

          this.node.setScale(scale, scale, scale);
          var size = (_this$lbTips = this.lbTips) == null ? void 0 : (_this$lbTips$node = _this$lbTips.node) == null ? void 0 : (_this$lbTips$node$get = _this$lbTips$node.getComponent(UITransform)) == null ? void 0 : _this$lbTips$node$get.contentSize;

          if (!isValid(size)) {
            //size不存在，自我销毁
            PoolManager.instance.putNode(this.node);
            return;
          }

          this.lbTips.string = content;
          this.lbTips.color = new Color(214, 132, 53, 255);

          if (type === 'gold' || type === 'heart') {
            this.spBg.enabled = false;

            this._movePos.set(0, 0, 0);

            this._curTipPos.set(0, 0, 0);

            this.UIOpacityBg.opacity = 50;

            if (type === 'gold') {
              this.spIcon.spriteFrame = this.sfGold;
            } else if (type === 'heart') {
              this.spIcon.spriteFrame = this.sfHeart;
            }

            this.lbTips.color = new Color(255, 255, 255, 255);
            this.lbTips.string = Util.formatValue(Number(content));
            tween(this.node).to(1.2, {
              scale: new Vec3(scale, scale, scale)
            }, {
              easing: 'smooth'
            }).start();
            tween(this.UIOpacityBg).to(0.8, {
              opacity: 255
            }, {
              easing: 'smooth'
            }).to(0.4, {
              opacity: 0
            }, {
              easing: 'smooth'
            }).call(function () {
              callback && callback();
              PoolManager.instance.putNode(_this2.node);
            }).start();
          } else {
            //纯文字提示
            this.spBg.enabled = true;
            this.UIOpacityBg.opacity = 255;
            this.node.setPosition(targetPos);
            this.spIcon.node.active = false;
            this.scheduleOnce(function () {
              tween(_this2.node).to(1.1, {
                position: _this2._uiTipTargetPos
              }, {
                easing: 'smooth'
              }).call(function () {
                callback && callback();
                PoolManager.instance.putNode(_this2.node);
              }).start();
              tween(_this2.UIOpacityBg).to(0.7, {
                opacity: 220
              }, {
                easing: 'smooth'
              }).to(0.4, {
                opacity: 0
              }, {
                easing: 'smooth'
              }).call(function () {}).start();
            }, 0.8);
          }
        };

        return tips;
      }(Component), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, "lbTips", [_dec3], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, "spIcon", [_dec4], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, "spBg", [_dec5], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, "UIOpacityBg", [_dec6], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, "sfGold", [_dec7], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, "sfHeart", [_dec8], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      })), _class2)) || _class) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/tornado.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameManager.ts', './effectManager.ts', './util.ts', './constant.ts', './audioManager.ts', './poolManager.ts'], function (exports) {
  var _applyDecoratedDescriptor, _inheritsLoose, _initializerDefineProperty, _assertThisInitialized, _createClass, cclegacy, _decorator, AnimationComponent, Vec3, Node, Component, GameManager, EffectManager, Util, Constant, AudioManager, PoolManager;

  return {
    setters: [function (module) {
      _applyDecoratedDescriptor = module.applyDecoratedDescriptor;
      _inheritsLoose = module.inheritsLoose;
      _initializerDefineProperty = module.initializerDefineProperty;
      _assertThisInitialized = module.assertThisInitialized;
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      AnimationComponent = module.AnimationComponent;
      Vec3 = module.Vec3;
      Node = module.Node;
      Component = module.Component;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      EffectManager = module.EffectManager;
    }, function (module) {
      Util = module.Util;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      AudioManager = module.AudioManager;
    }, function (module) {
      PoolManager = module.PoolManager;
    }],
    execute: function () {
      var _dec, _dec2, _class, _class2, _descriptor;

      cclegacy._RF.push({}, "c5fdbt9RkFOCaHUSrwAIUTs", "tornado", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //台风S型脚本

      var Tornado = exports('Tornado', (_dec = ccclass('Tornado'), _dec2 = property(AnimationComponent), _dec(_class = (_class2 = /*#__PURE__*/function (_Component) {
        _inheritsLoose(Tornado, _Component);

        function Tornado() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;

          _initializerDefineProperty(_this, "aniMove", _descriptor, _assertThisInitialized(_this));

          _this._baseInfo = null; //敌人基本信息

          _this._skillInfo = null; //技能信息

          _this._offsetPos = new Vec3(); //当前坐标和玩家坐标的向量差

          _this._oriWorPos = new Vec3(); //初始位置

          _this._targetSpeed = 0; //目标速度

          _this._curSpeed = 0; //当前速度

          _this._targetWorPos = new Vec3(); //目标位置

          _this._curWorPos = new Vec3(); //当前位置

          _this._disappearRange = 25;
          return _this;
        }

        var _proto = Tornado.prototype; //箭节点超过玩家这个范围则隐藏

        _proto.init = function init(skillInfo, baseInfo, scriptParent) {
          var _scriptParent$scriptW;

          this.skillInfo = skillInfo;
          this.baseInfo = baseInfo;
          scriptParent == null ? void 0 : (_scriptParent$scriptW = scriptParent.scriptWarning) == null ? void 0 : _scriptParent$scriptW.hideWarning();

          this._oriWorPos.set(this.node.worldPosition);

          this._curWorPos.set(this.node.worldPosition);

          Vec3.subtract(this._offsetPos, this._curWorPos, GameManager.ndPlayer.worldPosition);

          this._offsetPos.normalize().negative();

          Vec3.add(this._curWorPos, this._curWorPos, this._offsetPos.multiplyScalar(2));
          this.node.setWorldPosition(this._curWorPos);
          var options = {
            ndEffect: this.node
          };
          EffectManager.instance.playParticle(options);
          this._targetSpeed = skillInfo.flySpeed;
          this._curSpeed = this._targetSpeed * 0.5;
          this.aniMove.getState("tornado").time = 0;
          this.aniMove.getState("tornado").sample();
          this.aniMove.play();
          AudioManager.instance.playSound(Constant.SOUND.TORNADO);
        };

        _proto.update = function update(deltaTime) {
          if (GameManager.ndPlayer) {
            //朝forward方向飞行
            this._curSpeed = Util.lerp(this._targetSpeed, this._curSpeed, 0.25);

            this._targetWorPos.set(0, 0, -deltaTime * this._curSpeed);

            this.node.translate(this._targetWorPos, Node.NodeSpace.LOCAL);

            this._curWorPos.set(this.node.worldPosition); //超过玩家一定范围则隐藏


            Vec3.subtract(this._offsetPos, this._curWorPos, GameManager.ndPlayer.worldPosition);

            if (this._offsetPos && this._offsetPos.length() >= this._disappearRange) {
              PoolManager.instance.putNode(this.node);
            }
          }
        };

        _createClass(Tornado, [{
          key: "baseInfo",
          get: function get() {
            return this._baseInfo;
          },
          set: function set(v) {
            this._baseInfo = v;
          }
        }, {
          key: "skillInfo",
          get: function get() {
            return this._skillInfo;
          },
          set: function set(v) {
            this._skillInfo = v;
          }
        }]);

        return Tornado;
      }(Component), _descriptor = _applyDecoratedDescriptor(_class2.prototype, "aniMove", [_dec2], {
        configurable: true,
        enumerable: true,
        writable: true,
        initializer: function initializer() {
          return null;
        }
      }), _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/uiManager.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './resourceUtil.ts', './poolManager.ts', './constant.ts', './playerBloodBar.ts', './monsterBloodBar.ts', './FightFloatLabel.ts', './tips.ts'], function (exports) {
  var _createClass, cclegacy, _decorator, Vec3, isValid, find, CameraComponent, ResourceUtil, PoolManager, Constant, PlayerBloodBar, MonsterBloodBar, FightFloatLabel, tips;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Vec3 = module.Vec3;
      isValid = module.isValid;
      find = module.find;
      CameraComponent = module.CameraComponent;
    }, function (module) {
      ResourceUtil = module.ResourceUtil;
    }, function (module) {
      PoolManager = module.PoolManager;
    }, function (module) {
      Constant = module.Constant;
    }, function (module) {
      PlayerBloodBar = module.PlayerBloodBar;
    }, function (module) {
      MonsterBloodBar = module.MonsterBloodBar;
    }, function (module) {
      FightFloatLabel = module.FightFloatLabel;
    }, function (module) {
      tips = module.tips;
    }],
    execute: function () {
      var _dec, _class, _class2;

      cclegacy._RF.push({}, "f9384FYDp5GqoW+CtrCla3U", "uiManager", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property;
      var SHOW_STR_INTERVAL_TIME = 800;
      var v3_playerBloodOffsetPos = new Vec3(-10, 100, 0); //血条距离玩家节点位置

      var v3_playerBloodScale = new Vec3(1.5, 1.5, 1.5); //玩家血条缩放大小

      var v3_monsterBloodOffsetPos = new Vec3(-10, 100, 0); //血条距离小怪节点位置

      var UIManager = exports('UIManager', (_dec = ccclass("UIManager"), _dec(_class = (_class2 = /*#__PURE__*/function () {
        function UIManager() {
          this._dictSharedPanel = {};
          this._dictLoading = {};
          this._arrPopupDialog = [];
          this._showTipsTime = 0;
        }

        var _proto = UIManager.prototype;
        /**
         * 检查当前界面是否正在展示
         * @param panelPath 
         */

        _proto.isDialogVisible = function isDialogVisible(panelPath) {
          if (!this._dictSharedPanel.hasOwnProperty(panelPath)) {
            return false;
          }

          var panel = this._dictSharedPanel[panelPath];
          return isValid(panel) && panel.active && isValid(panel.parent);
        }
        /**
         * 显示单例界面
         * @param {String} panelPath 
         * @param {Array} args 
         * @param {Function} cb 回调函数，创建完毕后回调
         */
        ;

        _proto.showDialog = function showDialog(panelPath, args, cb, panelPriority) {
          var _this = this;

          if (panelPriority === void 0) {
            panelPriority = Constant.PRIORITY.NORMAL;
          }

          if (this._dictLoading[panelPath]) {
            return;
          }

          var idxSplit = panelPath.lastIndexOf('/');
          var scriptName = panelPath.slice(idxSplit + 1);

          if (!args) {
            args = [];
          }

          if (this._dictSharedPanel.hasOwnProperty(panelPath)) {
            var panel = this._dictSharedPanel[panelPath];

            if (isValid(panel)) {
              panel.parent = find("Canvas");
              panel.active = true;
              var script = panel.getComponent(scriptName);
              var script2 = panel.getComponent(scriptName.charAt(0).toUpperCase() + scriptName.slice(1));

              if (script && script.show) {
                script.show.apply(script, args);
                cb && cb(script);
              } else if (script2 && script2.show) {
                script2.show.apply(script2, args);
                cb && cb(script2);
              } else {
                throw "\u67E5\u627E\u4E0D\u5230\u811A\u672C\u6587\u4EF6" + scriptName;
              }

              return;
            }
          }

          this._dictLoading[panelPath] = true;
          ResourceUtil.createUI(panelPath).then(function (node) {
            //判断是否有可能在显示前已经被关掉了？
            var isCloseBeforeShow = false;

            if (!_this._dictLoading[panelPath]) {
              //已经被关掉
              isCloseBeforeShow = true;
            }

            _this._dictLoading[panelPath] = false; // node.getComponent(UITransform).priority = panelPriority;

            node.setSiblingIndex(panelPriority);
            _this._dictSharedPanel[panelPath] = node;
            var script = node.getComponent(scriptName);
            var script2 = node.getComponent(scriptName.charAt(0).toUpperCase() + scriptName.slice(1));

            if (script && script.show) {
              script.show.apply(script, args);
              cb && cb(script);
            } else if (script2 && script2.show) {
              script2.show.apply(script2, args);
              cb && cb(script2);
            } else {
              throw "\u67E5\u627E\u4E0D\u5230\u811A\u672C\u6587\u4EF6" + scriptName;
            }

            if (isCloseBeforeShow) {
              //如果在显示前又被关闭，则直接触发关闭掉
              _this.hideDialog(panelPath);
            }
          });
        }
        /**
         * 隐藏单例界面
         * @param {String} panelPath 
         * @param {fn} callback
         */
        ;

        _proto.hideDialog = function hideDialog(panelPath, callback) {
          if (this._dictSharedPanel.hasOwnProperty(panelPath)) {
            var panel = this._dictSharedPanel[panelPath];

            if (panel && isValid(panel)) {
              var ani = panel.getComponent('animationUI');

              if (ani) {
                ani.close(function () {
                  panel.parent = null;

                  if (callback && typeof callback === 'function') {
                    callback();
                  }
                });
              } else {
                panel.parent = null;

                if (callback && typeof callback === 'function') {
                  callback();
                }
              }
            } else if (callback && typeof callback === 'function') {
              callback();
            }
          }

          this._dictLoading[panelPath] = false;
        }
        /**
         * 将弹窗加入弹出窗队列
         * @param {string} panelPath 
         * @param {string} scriptName 
         * @param {*} param 
         */
        ;

        _proto.pushToPopupSeq = function pushToPopupSeq(panelPath, scriptName, param) {
          var popupDialog = {
            panelPath: panelPath,
            scriptName: scriptName,
            param: param,
            isShow: false
          };

          this._arrPopupDialog.push(popupDialog);

          this._checkPopupSeq();
        }
        /**
         * 将弹窗加入弹出窗队列
         * @param {number} index 
         * @param {string} panelPath 
         * @param {string} scriptName 
         * @param {*} param 
         */
        ;

        _proto.insertToPopupSeq = function insertToPopupSeq(index, panelPath, param) {
          var popupDialog = {
            panelPath: panelPath,
            param: param,
            isShow: false
          };

          this._arrPopupDialog.splice(index, 0, popupDialog); //this._checkPopupSeq();

        }
        /**
         * 将弹窗从弹出窗队列中移除
         * @param {string} panelPath 
         */
        ;

        _proto.shiftFromPopupSeq = function shiftFromPopupSeq(panelPath) {
          var _this2 = this;

          this.hideDialog(panelPath, function () {
            if (_this2._arrPopupDialog[0] && _this2._arrPopupDialog[0].panelPath === panelPath) {
              _this2._arrPopupDialog.shift();

              _this2._checkPopupSeq();
            }
          });
        }
        /**
         * 检查当前是否需要弹窗
         */
        ;

        _proto._checkPopupSeq = function _checkPopupSeq() {
          if (this._arrPopupDialog.length > 0) {
            var first = this._arrPopupDialog[0];

            if (!first.isShow) {
              this.showDialog(first.panelPath, first.param);
              this._arrPopupDialog[0].isShow = true;
            }
          }
        }
        /**
         * 显示提示
         * @param {String} content 
         * @param {Function} cb 
         */
        ;

        _proto.showTips = function showTips(content, type, targetPos, scale, callback) {
          var _this3 = this;

          if (type === void 0) {
            type = 'txt';
          }

          if (targetPos === void 0) {
            targetPos = new Vec3();
          }

          if (scale === void 0) {
            scale = 1;
          }

          if (callback === void 0) {
            callback = function callback() {};
          }

          var str = String(content);

          var next = function next() {
            _this3._showTipsAni(str, type, targetPos, scale, callback);
          };

          var now = Date.now();

          if (now - this._showTipsTime < SHOW_STR_INTERVAL_TIME && type !== 'gold' && type !== 'heart') {
            var spareTime = SHOW_STR_INTERVAL_TIME - (now - this._showTipsTime);
            setTimeout(function () {
              next();
            }, spareTime);
            this._showTipsTime = now + spareTime;
          } else {
            next();
            this._showTipsTime = now;
          }
        }
        /**
         * 内部函数
         * @param {String} content 
         * @param {Function} cb 
         */
        ;

        _proto._showTipsAni = function _showTipsAni(content, type, targetPos, scale, callback) {
          ResourceUtil.getUIPrefabRes('common/tips').then(function (prefab) {
            var tipsNode = PoolManager.instance.getNode(prefab, find("Canvas"));
            var tipScript = tipsNode.getComponent(tips);
            tipScript.show(content, type, targetPos, scale, callback);
          });
        }
        /**
         * 展示玩家血条
         *
         * @param {*} scriptParent 条使用者绑定的节点，如玩家或者小怪
         * @param {number} totalBlood 总血量
         * @param {number} curBlood 当前血量
         * @param {Function} [callback=()=>{}]
         * @param {Vec3} [offsetPos=v3_playerBloodOffsetPos] 血条位置偏差
         * @param {Vec3} [scale=v3_playerBloodScale] 血条缩放大小
         * @memberof UIManager
         */
        ;

        _proto.showPlayerBloodBar = function showPlayerBloodBar(scriptParent, totalBlood, curBlood, callback, offsetPos, scale) {
          if (callback === void 0) {
            callback = function callback() {};
          }

          if (offsetPos === void 0) {
            offsetPos = v3_playerBloodOffsetPos;
          }

          if (scale === void 0) {
            scale = v3_playerBloodScale;
          }

          ResourceUtil.getUIPrefabRes('fight/playerBloodBar').then(function (prefab) {
            var ndBloodBar = PoolManager.instance.getNode(prefab, find("Canvas"));
            ndBloodBar.setSiblingIndex(0);
            var scriptBloodBar = ndBloodBar.getComponent(PlayerBloodBar);
            scriptParent.scriptBloodBar = scriptBloodBar;
            scriptBloodBar.show(scriptParent, totalBlood, curBlood, offsetPos, scale, callback);
          });
        }
        /**
         * 展示小怪血条
         *  
         * @param {*} scriptParent 
         * @param {number} totalBlood
         * @param {number} bloodBarType
         * @param {Function} [callback=()=>{}]
         * @param {Vec3} [offsetPos=MONSTER_BLOOD_OFFSET_POS]
         * @param {Vec3} [scale=MONSTER_BLOOD_SCALE]
         * @memberof uiManager
         */
        ;

        _proto.showMonsterBloodBar = function showMonsterBloodBar(scriptParent, totalBlood, hpAddition, callback, offsetPos) {
          if (callback === void 0) {
            callback = function callback() {};
          }

          if (offsetPos === void 0) {
            offsetPos = v3_monsterBloodOffsetPos;
          }

          ResourceUtil.getUIPrefabRes('fight/monsterBloodBar').then(function (prefab) {
            var ndBloodBar = PoolManager.instance.getNode(prefab, find("Canvas"));
            var scriptBloodBar = ndBloodBar.getComponent(MonsterBloodBar);
            scriptParent.scriptBloodBar = scriptBloodBar;
            scriptBloodBar.show(scriptParent, totalBlood, offsetPos, hpAddition, callback);
          });
        }
        /**
         * 展示血量提示
         */
        ;

        _proto.showBloodTips = function showBloodTips(scriptParent, type, bloodNum, offset, callback) {
          ResourceUtil.getUIPrefabRes('common/fightTip').then(function (prefab) {
            var _find;

            var ndTip = PoolManager.instance.getNode(prefab, find("Canvas"));
            var cameraCom = (_find = find("Main Camera")) == null ? void 0 : _find.getComponent(CameraComponent);
            var pos = cameraCom == null ? void 0 : cameraCom.convertToUINode(scriptParent.node.worldPosition, find('Canvas'));
            pos.add(offset);
            ndTip.setPosition(pos);
            var scriptTip = ndTip.getComponent(FightFloatLabel);
            scriptTip.show(scriptParent, type, bloodNum, callback);
          });
        };

        _createClass(UIManager, null, [{
          key: "instance",
          get: function get() {
            if (this._instance) {
              return this._instance;
            }

            this._instance = new UIManager();
            return this._instance;
          }
        }]);

        return UIManager;
      }(), _class2._instance = void 0, _class2)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/util.ts", ['cc'], function (exports) {
  var cclegacy, _decorator;

  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "bc9e2JI2EpPK630gdKAzpjv", "util", undefined);

      var ccclass = _decorator.ccclass;
      var Util = exports('Util', (_dec = ccclass("Util"), _dec(_class = /*#__PURE__*/function () {
        function Util() {}
        /**
         * !#zh 拷贝object。
         */

        /**
         * 深度拷贝
         * @param {any} sObj 拷贝的对象
         * @returns 
         */


        Util.clone = function clone(sObj) {
          if (sObj === null || typeof sObj !== "object") {
            return sObj;
          }

          var s = {};

          if (sObj.constructor === Array) {
            s = [];
          }

          for (var i in sObj) {
            if (sObj.hasOwnProperty(i)) {
              s[i] = this.clone(sObj[i]);
            }
          }

          return s;
        }
        /**
         * 将object转化为数组
         * @param { any} srcObj  
         * @returns 
         */
        ;

        Util.objectToArray = function objectToArray(srcObj) {
          var resultArr = []; // to array

          for (var _key in srcObj) {
            if (!srcObj.hasOwnProperty(_key)) {
              continue;
            }

            resultArr.push(srcObj[_key]);
          }

          return resultArr;
        }
        /**
         * !#zh 将数组转化为object。
         */

        /**
         * 将数组转化为object。
         * @param { any} srcObj 
         * @param { string} objectKey 
         * @returns 
         */
        ;

        Util.arrayToObject = function arrayToObject(srcObj, objectKey) {
          var resultObj = {}; // to object

          for (var key in srcObj) {
            if (!srcObj.hasOwnProperty(key) || !srcObj[key][objectKey]) {
              continue;
            }

            resultObj[srcObj[key][objectKey]] = srcObj[key];
          }

          return resultObj;
        }
        /**
         * 根据权重,计算随机内容
         * @param {arrany} weightArr 
         * @param {number} totalWeight 权重
         * @returns 
         */
        ;

        Util.getWeightRandIndex = function getWeightRandIndex(weightArr, totalWeight) {
          var randWeight = Math.floor(Math.random() * totalWeight);
          var sum = 0;

          for (var weightIndex = 0; weightIndex < weightArr.length; weightIndex++) {
            sum += weightArr[weightIndex];

            if (randWeight < sum) {
              break;
            }
          }

          return weightIndex;
        }
        /**
         * 从n个数中获取m个随机数
         * @param {Number} n   总数
         * @param {Number} m    获取数
         * @returns {Array} array   获取数列
         */
        ;

        Util.getRandomNFromM = function getRandomNFromM(n, m) {
          var array = [];
          var intRd = 0;
          var count = 0;

          while (count < m) {
            if (count >= n + 1) {
              break;
            }

            intRd = this.getRandomInt(0, n);
            var flag = 0;

            for (var i = 0; i < count; i++) {
              if (array[i] === intRd) {
                flag = 1;
                break;
              }
            }

            if (flag === 0) {
              array[count] = intRd;
              count++;
            }
          }

          return array;
        }
        /**
         * 获取随机整数
         * @param {Number} min 最小值
         * @param {Number} max 最大值
         * @returns 
         */
        ;

        Util.getRandomInt = function getRandomInt(min, max) {
          var r = Math.random();
          var rr = r * (max - min + 1) + min;
          return Math.floor(rr);
        }
        /**
         * 获取随机数
         * @param {Number} min 最小值
         * @param {Number} max 最大值
         * @returns 
         */
        ;

        Util.getRandom = function getRandom(min, max) {
          return Math.random() * (max - min) + min;
        }
        /**
         * 获取字符串长度
         * @param {string} render 
         * @returns 
         */
        ;

        Util.getStringLength = function getStringLength(render) {
          var strArr = render;
          var len = 0;

          for (var i = 0, n = strArr.length; i < n; i++) {
            var val = strArr.charCodeAt(i);

            if (val <= 255) {
              len = len + 1;
            } else {
              len = len + 2;
            }
          }

          return Math.ceil(len / 2);
        }
        /**
         * 判断传入的参数是否为空的Object。数组或undefined会返回false
         * @param obj
         */
        ;

        Util.isEmptyObject = function isEmptyObject(obj) {
          var result = true;

          if (obj && obj.constructor === Object) {
            for (var key in obj) {
              if (obj.hasOwnProperty(key)) {
                result = false;
                break;
              }
            }
          } else {
            result = false;
          }

          return result;
        }
        /**
         * 判断是否是新的一天
         * @param {Object|Number} dateValue 时间对象 todo MessageCenter 与 pve 相关的时间存储建议改为 Date 类型
         * @returns {boolean}
         */
        ;

        Util.isNewDay = function isNewDay(dateValue) {
          // todo：是否需要判断时区？
          var oldDate = new Date(dateValue);
          var curDate = new Date(); //@ts-ignore

          var oldYear = oldDate.getYear();
          var oldMonth = oldDate.getMonth();
          var oldDay = oldDate.getDate(); //@ts-ignore

          var curYear = curDate.getYear();
          var curMonth = curDate.getMonth();
          var curDay = curDate.getDate();

          if (curYear > oldYear) {
            return true;
          } else {
            if (curMonth > oldMonth) {
              return true;
            } else {
              if (curDay > oldDay) {
                return true;
              }
            }
          }

          return false;
        }
        /**
         * 获取对象属性数量
         * @param {object}o 对象
         * @returns 
         */
        ;

        Util.getPropertyCount = function getPropertyCount(o) {
          var n,
              count = 0;

          for (n in o) {
            if (o.hasOwnProperty(n)) {
              count++;
            }
          }

          return count;
        }
        /**
         * 返回一个差异化数组（将array中diff里的值去掉）
         * @param array
         * @param diff
         */
        ;

        Util.difference = function difference(array, diff) {
          var result = [];

          if (array.constructor !== Array || diff.constructor !== Array) {
            return result;
          }

          var length = array.length;

          for (var i = 0; i < length; i++) {
            if (diff.indexOf(array[i]) === -1) {
              result.push(array[i]);
            }
          }

          return result;
        };

        Util._stringToArray = function _stringToArray(string) {
          // 用于判断emoji的正则们
          var rsAstralRange = "\\ud800-\\udfff";
          var rsZWJ = "\\u200d";
          var rsVarRange = "\\ufe0e\\ufe0f";
          var rsComboMarksRange = "\\u0300-\\u036f";
          var reComboHalfMarksRange = "\\ufe20-\\ufe2f";
          var rsComboSymbolsRange = "\\u20d0-\\u20ff";
          var rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;
          var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');
          var rsFitz = "\\ud83c[\\udffb-\\udfff]";
          var rsOptVar = '[' + rsVarRange + ']?';
          var rsCombo = '[' + rsComboRange + ']';
          var rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')';
          var reOptMod = rsModifier + '?';
          var rsAstral = '[' + rsAstralRange + ']';
          var rsNonAstral = '[^' + rsAstralRange + ']';
          var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
          var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
          var rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*';
          var rsSeq = rsOptVar + reOptMod + rsOptJoin;
          var rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';
          var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

          var hasUnicode = function hasUnicode(val) {
            return reHasUnicode.test(val);
          };

          var unicodeToArray = function unicodeToArray(val) {
            return val.match(reUnicode) || [];
          };

          var asciiToArray = function asciiToArray(val) {
            return val.split('');
          };

          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        } // 模拟传msg的uuid
        ;

        Util.simulationUUID = function simulationUUID() {
          function s4() {
            return Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
          }

          return s4() + s4() + '-' + s4() + '-' + s4() + '-' + s4() + '-' + s4() + s4() + s4();
        };

        Util.trim = function trim(str) {
          return str.replace(/(^\s*)|(\s*$)/g, "");
        }
        /**
         * 判断当前时间是否在有效时间内
         * @param {String|Number} start 起始时间。带有时区信息
         * @param {String|Number} end 结束时间。带有时区信息
         */
        ;

        Util.isNowValid = function isNowValid(start, end) {
          var startTime = new Date(start);
          var endTime = new Date(end);
          var result = false;

          if (startTime.getDate() + '' !== 'NaN' && endTime.getDate() + '' !== 'NaN') {
            var curDate = new Date();
            result = curDate < endTime && curDate > startTime;
          }

          return result;
        }
        /**
         * 返回相隔天数
         * @param start 
         * @param end 
         * @returns 
         */
        ;

        Util.getDeltaDays = function getDeltaDays(start, end) {
          start = new Date(start);
          end = new Date(end);
          var startYear = start.getFullYear();
          var startMonth = start.getMonth() + 1;
          var startDate = start.getDate();
          var endYear = end.getFullYear();
          var endMonth = end.getMonth() + 1;
          var endDate = end.getDate();
          start = new Date(startYear + '/' + startMonth + '/' + startDate + ' GMT+0800').getTime();
          end = new Date(endYear + '/' + endMonth + '/' + endDate + ' GMT+0800').getTime();
          var deltaTime = end - start;
          return Math.floor(deltaTime / (24 * 60 * 60 * 1000));
        }
        /**
         * 获取数组最小值
         * @param array 数组
         * @returns 
         */
        ;

        Util.getMin = function getMin(array) {
          var result = null;

          if (array.constructor === Array) {
            var length = array.length;

            for (var i = 0; i < length; i++) {
              if (i === 0) {
                result = Number(array[0]);
              } else {
                result = result > Number(array[i]) ? Number(array[i]) : result;
              }
            }
          }

          return result;
        }
        /**
         * 格式化两位小数点
         * @param time 
         * @returns 
         */
        ;

        Util.formatTwoDigits = function formatTwoDigits(time) {
          //@ts-ignore
          return (Array(2).join(0) + time).slice(-2);
        }
        /**
         * 根据格式返回时间
         * @param date  时间
         * @param fmt 格式
         * @returns 
         */
        ;

        Util.formatDate = function formatDate(date, fmt) {
          var o = {
            "M+": date.getMonth() + 1,
            //月份
            "d+": date.getDate(),
            //日
            "h+": date.getHours(),
            //小时
            "m+": date.getMinutes(),
            //分
            "s+": date.getSeconds(),
            //秒
            "q+": Math.floor((date.getMonth() + 3) / 3),
            //季度
            "S": date.getMilliseconds() //毫秒

          };
          if (/(y+)/.test(fmt)) fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));

          for (var k in o) //@ts-ignore
          if (new RegExp("(" + k + ")").test(fmt)) fmt = fmt.replace(RegExp.$1, RegExp.$1.length === 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));

          return fmt;
        }
        /**
         * 获取格式化后的日期（不含小时分秒）
         */
        ;

        Util.getDay = function getDay() {
          var date = new Date();
          return date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();
        }
        /**
         * 格式化名字，XXX...
         * @param {string} name 需要格式化的字符串 
         * @param {number}limit 
         * @returns {string} 返回格式化后的字符串XXX...
         */
        ;

        Util.formatName = function formatName(name, limit) {
          limit = limit || 6;

          var nameArray = this._stringToArray(name);

          var str = '';
          var length = nameArray.length;

          if (length > limit) {
            for (var i = 0; i < limit; i++) {
              str += nameArray[i];
            }

            str += '...';
          } else {
            str = name;
          }

          return str;
        }
        /**
         * 格式化钱数，超过10000 转换位 10K   10000K 转换为 10M
         * @param {number}money 需要被格式化的数值
         * @returns {string}返回 被格式化的数值
         */
        ;

        Util.formatMoney = function formatMoney(money) {
          var arrUnit = ['', 'K', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y', 'B', 'N', 'D'];
          var strValue = '';

          for (var idx = 0; idx < arrUnit.length; idx++) {
            if (money >= 10000) {
              money /= 1000;
            } else {
              strValue = Math.floor(money) + arrUnit[idx];
              break;
            }
          }

          if (strValue === '') {
            strValue = Math.floor(money) + 'U'; //超过最大值就加个U
          }

          return strValue;
        }
        /**
         * 格式化数值
         * @param {number}value 需要被格式化的数值
         * @returns {string}返回 被格式化的数值
         */
        ;

        Util.formatValue = function formatValue(value) {
          var arrUnit = [];
          var strValue = '';

          for (var i = 0; i < 26; i++) {
            arrUnit.push(String.fromCharCode(97 + i));
          }

          for (var idx = 0; idx < arrUnit.length; idx++) {
            if (value >= 10000) {
              value /= 1000;
            } else {
              strValue = Math.floor(value) + arrUnit[idx];
              break;
            }
          }

          return strValue;
        }
        /**
         * 根据剩余秒数格式化剩余时间 返回 HH:MM:SS
         * @param {Number} leftSec 
         */
        ;

        Util.formatTimeForSecond = function formatTimeForSecond(leftSec, withoutSeconds) {
          if (withoutSeconds === void 0) {
            withoutSeconds = false;
          }

          var timeStr = '';
          var sec = leftSec % 60;
          var leftMin = Math.floor(leftSec / 60);
          leftMin = leftMin < 0 ? 0 : leftMin;
          var hour = Math.floor(leftMin / 60);
          var min = leftMin % 60;

          if (hour > 0) {
            timeStr += hour > 9 ? hour.toString() : '0' + hour;
            timeStr += ':';
          } else {
            timeStr += '00:';
          }

          timeStr += min > 9 ? min.toString() : '0' + min;

          if (!withoutSeconds) {
            timeStr += ':';
            timeStr += sec > 9 ? sec.toString() : '0' + sec;
          }

          return timeStr;
        }
        /**
         *  根据剩余毫秒数格式化剩余时间 返回 HH:MM:SS
         *
         * @param {Number} ms
         */
        ;

        Util.formatTimeForMillisecond = function formatTimeForMillisecond(ms) {
          var second = Math.floor(ms / 1000 % 60);
          var minute = Math.floor(ms / 1000 / 60 % 60);
          var hour = Math.floor(ms / 1000 / 60 / 60);
          return {
            'hour': hour,
            'minute': minute,
            'second': second
          };
        }
        /**
         * 将数组内容进行随机排列
         * @param {Array}arr 需要被随机的数组 
         * @returns 
         */
        ;

        Util.rand = function rand(arr) {
          var arrClone = this.clone(arr); // 首先从最大的数开始遍历，之后递减

          for (var i = arrClone.length - 1; i >= 0; i--) {
            // 随机索引值randomIndex是从0-arrClone.length中随机抽取的
            var randomIndex = Math.floor(Math.random() * (i + 1)); // 下面三句相当于把从数组中随机抽取到的值与当前遍历的值互换位置

            var itemIndex = arrClone[randomIndex];
            arrClone[randomIndex] = arrClone[i];
            arrClone[i] = itemIndex;
          } // 每一次的遍历都相当于把从数组中随机抽取（不重复）的一个元素放到数组的最后面（索引顺序为：len-1,len-2,len-3......0）


          return arrClone;
        }
        /**
         * 获得开始和结束两者之间相隔分钟数
         *
         * @static
         * @param {number} start
         * @param {number} end
         * @memberof Util
         */
        ;

        Util.getOffsetMimutes = function getOffsetMimutes(start, end) {
          var offSetTime = end - start;
          var minute = Math.floor(offSetTime % (1000 * 60 * 60) / (1000 * 60));
          return minute;
        }
        /**
         * 返回指定小数位的数值
         * @param {number} num 
         * @param {number} idx 
         */
        ;

        Util.formatNumToFixed = function formatNumToFixed(num, idx) {
          if (idx === void 0) {
            idx = 0;
          }

          return Number(num.toFixed(idx));
        }
        /**
         * 用于数值到达另外一个目标数值之间进行平滑过渡运动效果
         * @param {number} targetValue 目标数值 
         * @param {number} curValue 当前数值
         * @param {number} ratio    过渡比率
         * @returns 
         */
        ;

        Util.lerp = function lerp(targetValue, curValue, ratio) {
          if (ratio === void 0) {
            ratio = 0.25;
          }

          var v = curValue;

          if (targetValue > curValue) {
            v = curValue + (targetValue - curValue) * ratio;
          } else if (targetValue < curValue) {
            v = curValue - (curValue - targetValue) * ratio;
          }

          return v;
        }
        /**
         * 数据解密
         * @param {String} str 
         */
        ;

        Util.decrypt = function decrypt(b64Data) {
          var n = 6;

          if (b64Data.length % 2 === 0) {
            n = 7;
          }

          var decodeData = '';

          for (var idx = 0; idx < b64Data.length - n; idx += 2) {
            decodeData += b64Data[idx + 1];
            decodeData += b64Data[idx];
          }

          decodeData += b64Data.slice(b64Data.length - n + 1);
          decodeData = this._base64Decode(decodeData);
          return decodeData;
        }
        /**
        * 数据加密
        * @param {String} str 
        */
        ;

        Util.encrypt = function encrypt(str) {
          var b64Data = this._base64encode(str);

          var n = 6;

          if (b64Data.length % 2 === 0) {
            n = 7;
          }

          var encodeData = '';

          for (var idx = 0; idx < (b64Data.length - n + 1) / 2; idx++) {
            encodeData += b64Data[2 * idx + 1];
            encodeData += b64Data[2 * idx];
          }

          encodeData += b64Data.slice(b64Data.length - n + 1);
          return encodeData;
        } //public method for encoding

        /**
         * base64加密
         * @param {string}input 
         * @returns 
         */
        ;

        Util._base64encode = function _base64encode(input) {
          var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          var output = "",
              chr1,
              chr2,
              chr3,
              enc1,
              enc2,
              enc3,
              enc4,
              i = 0;
          input = this._utf8Encode(input);

          while (i < input.length) {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);
            enc1 = chr1 >> 2;
            enc2 = (chr1 & 3) << 4 | chr2 >> 4;
            enc3 = (chr2 & 15) << 2 | chr3 >> 6;
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
              enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
              enc4 = 64;
            }

            output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) + keyStr.charAt(enc3) + keyStr.charAt(enc4);
          }

          return output;
        }
        /**
         * utf-8 加密
         * @param string 
         * @returns 
         */
        ;

        Util._utf8Encode = function _utf8Encode(string) {
          string = string.replace(/\r\n/g, "\n");
          var utftext = "";

          for (var n = 0; n < string.length; n++) {
            var c = string.charCodeAt(n);

            if (c < 128) {
              utftext += String.fromCharCode(c);
            } else if (c > 127 && c < 2048) {
              utftext += String.fromCharCode(c >> 6 | 192);
              utftext += String.fromCharCode(c & 63 | 128);
            } else {
              utftext += String.fromCharCode(c >> 12 | 224);
              utftext += String.fromCharCode(c >> 6 & 63 | 128);
              utftext += String.fromCharCode(c & 63 | 128);
            }
          }

          return utftext;
        }
        /**
         * utf-8解密
         * @param utftext 
         * @returns 
         */
        ;

        Util._utf8Decode = function _utf8Decode(utftext) {
          var string = "";
          var i = 0;
          var c = 0;
          var c2 = 0;
          var c3 = 0;

          while (i < utftext.length) {
            c = utftext.charCodeAt(i);

            if (c < 128) {
              string += String.fromCharCode(c);
              i++;
            } else if (c > 191 && c < 224) {
              c2 = utftext.charCodeAt(i + 1);
              string += String.fromCharCode((c & 31) << 6 | c2 & 63);
              i += 2;
            } else {
              c2 = utftext.charCodeAt(i + 1);
              c3 = utftext.charCodeAt(i + 2);
              string += String.fromCharCode((c & 15) << 12 | (c2 & 63) << 6 | c3 & 63);
              i += 3;
            }
          }

          return string;
        }
        /**
         * base64解密
         * @param {string}input 解密字符串
         * @returns 
         */
        ;

        Util._base64Decode = function _base64Decode(input) {
          var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
          var output = "";
          var chr1;
          var chr2;
          var chr3;
          var enc1;
          var enc2;
          var enc3;
          var enc4;
          var i = 0;
          input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

          while (i < input.length) {
            enc1 = keyStr.indexOf(input.charAt(i++));
            enc2 = keyStr.indexOf(input.charAt(i++));
            enc3 = keyStr.indexOf(input.charAt(i++));
            enc4 = keyStr.indexOf(input.charAt(i++));
            chr1 = enc1 << 2 | enc2 >> 4;
            chr2 = (enc2 & 15) << 4 | enc3 >> 2;
            chr3 = (enc3 & 3) << 6 | enc4;
            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
              output = output + String.fromCharCode(chr2);
            }

            if (enc4 != 64) {
              output = output + String.fromCharCode(chr3);
            }
          }

          output = this._utf8Decode(output);
          return output;
        }
        /**
         * 洗牌函数
         *
         * @static
         * @param {*} arr
         * @returns
         * @memberof util
         */
        ;

        Util.shuffle = function shuffle(arr) {
          if (Array.isArray(arr)) {
            var newArr = arr.concat();
            newArr.sort(function () {
              return 0.5 - Math.random();
            });
            return newArr;
          }
        }
        /**
         * 两个数值数组取相同的值，返回一个新数组
         *
         * @static
         * @param {number[]} arr1
         * @param {number[]} arr2
         * @returns
         * @memberof util
         */
        ;

        Util.filterDifferentValue = function filterDifferentValue(arr1, arr2) {
          var arr = [];
          arr = arr1.filter(function (item) {
            return arr2.indexOf(item) !== -1;
          });
          return arr;
        }
        /**
         * 获取性能等级
         * -Android
         * 设备性能等级，取值为：
         * -2 或 0（该设备无法运行小游戏）
         * -1（性能未知）
         * >=1（设备性能值，该值越高，设备性能越好，目前最高不到50)
         * -IOS
         * 微信不支持IO性能等级
         * iPhone 5s 及以下
         * 设定为超低端机 benchmarkLevel = 5
         * iPhone 6 ～ iPhone SE
         * 设定为超低端机 benchmarkLevel = 15
         * iPhone 7 ~ iPhone X
         * 设定为中端机 benchmarkLevel = 25
         * iPhone XS 及以上
         * 设定为高端机 benchmarkLevel = 40
         * -H5或其他
         * -1（性能未知）
         */

        /**
        * 获取当前机型性能是否为低端机
        */
        ;

        Util.checkIsLowPhone = function checkIsLowPhone() {
          // @ts-ignore
          if (window.wx) {
            // 微信性能数值参考:https://developers.weixin.qq.com/minigame/dev/guide/performance/perf-benchmarkLevel.html
            var nowBenchmarkLevel = -1; // nowBenchmarkLevel = -1性能未知
            // @ts-ignore

            var sys = window.wx.getSystemInfoSync();
            var isIOS = sys.system.indexOf('iOS') >= 0;

            if (isIOS) {
              // 微信不支持IO性能等级
              var model = sys.model;
              console.log("###model", model); // iPhone 5s 及以下 设定为超低端机

              var ultraLowPhoneType = ['iPhone1,1', 'iPhone1,2', 'iPhone2,1', 'iPhone3,1', 'iPhone3,3', 'iPhone4,1', 'iPhone5,1', 'iPhone5,2', 'iPhone5,3', 'iPhone5,4', 'iPhone6,1', 'iPhone6,2']; // iPhone 6 ~ iPhone SE 设定为超低端机

              var lowPhoneType = ['iPhone6,2', 'iPhone7,1', 'iPhone7,2', 'iPhone8,1', 'iPhone8,2', 'iPhone8,4']; // iPhone 7 ~ iPhone X 设定为中端机

              var middlePhoneType = ['iPhone9,1', 'iPhone9,2', 'iPhone9,3', 'iPhone9,4', 'iPhone10,1', 'iPhone10,2', 'iPhone10,3', 'iPhone10,4', 'iPhone10,5', 'iPhone10,6', "iPhone XS"]; // iPhone XS 及以上 设定为高端机

              var highPhoneType = ['iPhone11,2', 'iPhone11,4', 'iPhone11,6', 'iPhone11,8', 'iPhone12,1', 'iPhone12,3', 'iPhone12,5', 'iPhone12,8', "iPhone 13", "iPhone 14"];

              for (var i = 0; i < ultraLowPhoneType.length; i++) {
                if (model.indexOf(ultraLowPhoneType[i]) >= 0) {
                  nowBenchmarkLevel = 5;
                }
              }

              for (var _i = 0; _i < lowPhoneType.length; _i++) {
                if (model.indexOf(lowPhoneType[_i]) >= 0) {
                  nowBenchmarkLevel = 10;
                }
              }

              for (var _i2 = 0; _i2 < middlePhoneType.length; _i2++) {
                if (model.indexOf(middlePhoneType[_i2]) >= 0) {
                  nowBenchmarkLevel = 20;
                }
              }

              for (var _i3 = 0; _i3 < highPhoneType.length; _i3++) {
                if (model.indexOf(highPhoneType[_i3]) >= 0) {
                  nowBenchmarkLevel = 30;
                }
              }
            } else {
              nowBenchmarkLevel = sys.benchmarkLevel;
            }

            if (nowBenchmarkLevel < 20) {
              // 22的具体参数可参考微信官方
              return true;
            } else {
              return false;
            }
          } else {
            return false;
          }
        }
        /**
         * 获取数组中随机一个元素
         * @param arr 
         * @returns 
         */
        ;

        Util.getRandomItemFromArray = function getRandomItemFromArray(arr) {
          return arr[Math.floor(Math.random() * arr.length)];
        }
        /**
         * 解析数据表带有#或者,连接的数据
         *
         * @static
         * @param {string} str
         * @param {string} [symbol="#"]
         * @return {*} 
         * @memberof util
         */
        ;

        Util.parseStringData = function parseStringData(str, symbol) {
          if (symbol === void 0) {
            symbol = "#";
          }

          var arr = str.split(symbol);
          return arr.map(function (item) {
            return Number(item);
          });
        }
        /**
         * 返回精确到若干位数的数值
         *
         * @static
         * @param {number} v
         * @param {number} digit
         * @memberof util
         */
        ;

        Util.toFixed = function toFixed(v, digit) {
          if (digit === void 0) {
            digit = 2;
          }

          return Number(v.toFixed(digit));
        }
        /**
         * 获取两个节点的xz坐标的弧度
         *
         * @static
         * @param {Node} ndA
         * @param {Node} ndB
         * @param {boolean} [isLocal=false] 是否为本地坐标，反之为世界坐标
         * @return {*} 
         * @memberof util
         */
        ;

        Util.getTwoNodeXZRadius = function getTwoNodeXZRadius(ndA, ndB, isLocal) {
          if (isLocal === void 0) {
            isLocal = false;
          }

          var aX = isLocal ? ndA.position.x : ndA.worldPosition.x;
          var aZ = isLocal ? ndA.position.z : ndA.worldPosition.z;
          var bX = isLocal ? ndB.position.x : ndB.worldPosition.x;
          var bZ = isLocal ? ndB.position.z : ndB.worldPosition.z;
          var radius = this.getTwoPosXZRadius(aX, bX, aZ, bZ);
          return radius;
        }
        /**
         * 获取两个坐标zx分量的弧度
         *
         * @static
         * @param {number} aX
         * @param {number} aZ
         * @param {number} bX
         * @param {number} bZ
         * @returns
         * @memberof util
         */
        ;

        Util.getTwoPosXZRadius = function getTwoPosXZRadius(aX, aZ, bX, bZ) {
          return Math.atan2(aX - bX, aZ - bZ);
        }
        /**
         * 获取两个节点坐标在xz轴的距离
         *
         * @static
         * @param {Node} ndA
         * @param {Node} ndB
         * @param {boolean} [isLocal=false] 是否为本地坐标，反之为世界坐标
         * @return {*} 
         * @memberof util
         */
        ;

        Util.getTwoNodeXZLength = function getTwoNodeXZLength(ndA, ndB, isLocal) {
          if (isLocal === void 0) {
            isLocal = false;
          }

          var aX = isLocal ? ndA.position.x : ndA.worldPosition.x;
          var aZ = isLocal ? ndA.position.z : ndA.worldPosition.z;
          var bX = isLocal ? ndB.position.x : ndB.worldPosition.x;
          var bZ = isLocal ? ndB.position.z : ndB.worldPosition.z;
          return this.getTwoPosXZLength(aX, aZ, bX, bZ);
        }
        /**
         * 获取两个坐标在xz轴的距离
         * 
         * @static
         * @param {number} aX
         * @param {number} aZ
         * @param {number} bX
         * @param {number} bZ
         * @return {*} 
         * @memberof util
         */
        ;

        Util.getTwoPosXZLength = function getTwoPosXZLength(aX, aZ, bX, bZ) {
          var x = aX - bX;
          var z = aZ - bZ;
          return Math.sqrt(x * x + z * z);
        }
        /***
         * 返回随机方向
         */
        ;

        Util.getRandomDirector = function getRandomDirector() {
          var v = Math.random();
          return v > 0.5 ? 1 : -1;
        };

        return Util;
      }()) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/Utils.ts", ['cc', './SceneRegUtils.ts', './PromiseEx.ts', './StringUtils.ts', './LocalData.ts', './LocalStorageUtils.ts', './ConfigUtils.ts', './MD5.ts'], function (exports) {
  var cclegacy;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      exports('SceneReg', module.SceneRegUtils);
    }, function (module) {
      exports('PromiseEx', module.PromiseEx);
    }, function (module) {
      exports('Str', module.StringUtils);
    }, function (module) {
      exports('LocalData', module.LocalData);
    }, function (module) {
      exports('LocalStore', module.LocalStorageUtils);
    }, function (module) {
      exports('Cfg', module.ConfigUtils);
    }, function (module) {
      exports('md5', module.Md5Util);
    }],
    execute: function () {
      cclegacy._RF.push({}, "4815fjzS/xOBbsyaqdbW/Yg", "Utils", undefined);

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/View.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createForOfIteratorHelperLoose, cclegacy;

  return {
    setters: [function (module) {
      _createForOfIteratorHelperLoose = module.createForOfIteratorHelperLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "c3e7bvDaGlLC7xfIXGo7+q8", "View", undefined);

      var View = exports('View', /*#__PURE__*/function () {
        function View(module) {
          this._module = void 0;
          this._meditorMap = void 0;
          this._observerMap = void 0;
          this._mediatorClsMap = void 0;
          this._module = module;
          this._meditorMap = new Map();
          this._observerMap = new Map();
          this._mediatorClsMap = new Map();
        }

        var _proto = View.prototype;

        _proto.getModuleName = function getModuleName() {
          return this._module.getName();
        };

        _proto.registerObserver = function registerObserver(notificationName, observer) {
          var observers = this._observerMap.get(notificationName);

          if (observers) {
            observers.push(observer);
          } else {
            this._observerMap.set(notificationName, [observer]);
          }
        };

        _proto.removeObserver = function removeObserver(notificationName, notifyContext) {
          var observers = this._observerMap.get(notificationName);

          if (observers) {
            var i = observers.length;

            while (i--) {
              var observer = observers[i];

              if (observer.compareNotifyContext(notifyContext)) {
                observers.splice(i, 1);
                break;
              }
            }
          }
        };

        _proto.notifyObservers = function notifyObservers(notification) {
          var notificationName = notification.getName();

          var observers = this._observerMap.get(notificationName);

          if (observers) {
            for (var _iterator = _createForOfIteratorHelperLoose(observers), _step; !(_step = _iterator()).done;) {
              var observer = _step.value;
              observer.notifyObserve(notification);
            }
          }
        };

        _proto.registerMediator = function registerMediator(mediatorName, mediatorCls) {
          if (this._mediatorClsMap.has(mediatorName)) {
            console.warn("warning!!! registerMediator -- repeat register-------->", this.getModuleName(), mediatorName);
            return;
          }

          this._mediatorClsMap.set(mediatorName, mediatorCls);
        };

        _proto.retrieveMediator = function retrieveMediator(mediatorName, initIfRegiste) {
          if (initIfRegiste === void 0) {
            initIfRegiste = false;
          }

          var cls = this._mediatorClsMap.get(mediatorName);

          if (!cls) {
            console.warn("warning!!! retrieveMediator -- please register mediator first-------->", this.getModuleName(), mediatorName);
            return null;
          }

          var mediator = this._meditorMap.get(mediatorName);

          if (mediator) return mediator;

          if (initIfRegiste) {
            mediator = new cls();
            mediator.setModule(this._module);
            mediator.setName(mediatorName);

            this._meditorMap.set(mediatorName, mediator);
          }

          return mediator;
        };

        _proto.removeMediator = function removeMediator(mediatorName) {
          var mediator = this.retrieveMediator(mediatorName);
          if (!mediator) return;

          this._meditorMap["delete"](mediatorName);
        };

        _proto.hasMediator = function hasMediator(mediatorName) {
          return this._mediatorClsMap.has(mediatorName) && this._meditorMap.has(mediatorName);
        };

        return View;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/ViewMgr.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './Singleton.ts', './PureMVC.ts', './Mediator.ts'], function (exports) {
  var _inheritsLoose, cclegacy, Singleton, facade, Mediator;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      Singleton = module.Singleton;
    }, function (module) {
      facade = module.facade;
    }, function (module) {
      Mediator = module.Mediator;
    }],
    execute: function () {
      cclegacy._RF.push({}, "2ab68Gbx71LZa3/eKe+G4RB", "ViewMgr", undefined); // interface IViewState {
      //     time: number;// destroy time
      //     view: BaseView;
      // }

      /**
       * todo
       * 1.show and hide时发送事件；
       */


      var ViewMgr = exports('ViewMgr', /*#__PURE__*/function (_Singleton) {
        _inheritsLoose(ViewMgr, _Singleton);

        function ViewMgr() {
          return _Singleton.apply(this, arguments) || this;
        }

        ViewMgr.showEvent = function showEvent(module, mediator) {
          return Mediator.showEvent(module, mediator);
        };

        ViewMgr.hideEvent = function hideEvent(module, mediator) {
          return Mediator.hideEvent(module, mediator);
        };

        var _proto = ViewMgr.prototype;

        _proto.show = function show(moduleName, mediatorName, param) {
          var module = facade.retrieveModule(moduleName);

          if (module) {
            module.showView(mediatorName, param);
          }
        };

        _proto.hide = function hide(moduleName, mediatorName) {
          var module = facade.retrieveModule(moduleName);

          if (module) {
            module.hideView(mediatorName);
          }
        };

        return ViewMgr;
      }(Singleton()));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/warningCircle.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './gameManager.ts', './poolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, tween, Vec3, Component, GameManager, PoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      tween = module.tween;
      Vec3 = module.Vec3;
      Component = module.Component;
    }, function (module) {
      GameManager = module.GameManager;
    }, function (module) {
      PoolManager = module.PoolManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "f4b57yoodpAooaYvsjlnvtZ", "warningCircle", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //圆圈预警脚本

      var WarningCircle = exports('WarningCircle', (_dec = ccclass('WarningCircle'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(WarningCircle, _Component);

        function WarningCircle() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._tweenLoop = null; //循环缩小放大tween实例

          _this._tweenHide = null; //缩小消失tween实例

          _this._targetWorPos = new Vec3();
          _this._targetScale_1 = new Vec3();
          _this._targetScale_2 = new Vec3();
          _this._targetScale_3 = new Vec3();
          _this._scriptParent = null;
          return _this;
        }

        var _proto = WarningCircle.prototype;

        _proto.start = function start() {// [3]
        };

        _proto.init = function init(scale, scriptParent) {
          scriptParent.recycleWarning();
          this._scriptParent = scriptParent;

          this._targetScale_1.set(scale, scale, scale);

          this._targetScale_2.set(scale * 0.8, scale * 0.8, scale * 0.8);

          this.node.setScale(this._targetScale_3);
          var playerWorPos = GameManager.ndPlayer.worldPosition;

          this._targetWorPos.set(playerWorPos.x, playerWorPos.y + 0.2, playerWorPos.z);

          this.node.setWorldPosition(this._targetWorPos);

          this._closeTween();

          this.showWarning();
        };

        _proto.showWarning = function showWarning() {
          var showTime = 0.4;
          this._tweenLoop = tween(this.node).to(showTime, {
            scale: this._targetScale_1
          }, {
            easing: "smooth"
          }).start();
        };

        _proto.hideWarning = function hideWarning() {
          var _this2 = this;

          this._closeTween();

          this._tweenHide = tween(this.node).to(0.3, {
            scale: this._targetScale_3
          }, {
            easing: "backInOut"
          }).call(function () {
            PoolManager.instance.putNode(_this2.node);

            _this2._closeTween();
          }).start();
        };

        _proto._closeTween = function _closeTween() {
          if (this._tweenHide) {
            this._tweenHide.stop();

            this._tweenHide = null;
          }

          if (this._tweenLoop) {
            this._tweenLoop.stop();

            this._tweenLoop = null;
          }
        };

        return WarningCircle;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/warningLine.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './poolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component, PoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      PoolManager = module.PoolManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "249fettRepLDLPIq30iHueC", "warningLine", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //直线预警脚本

      var WarningLine = exports('WarningLine', (_dec = ccclass('WarningLine'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(WarningLine, _Component);

        function WarningLine() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._scriptParent = null;
          return _this;
        }

        var _proto = WarningLine.prototype;

        _proto.start = function start() {// [3]
        };

        _proto.init = function init(scale, scriptParent) {
          scriptParent.recycleWarning();
          this._scriptParent = scriptParent;
          this.node.setWorldPosition(scriptParent.node.worldPosition.x, 2.5, scriptParent.node.worldPosition.z);
          this.node.forward = scriptParent.attackForward;
          this.node.setScale(1, 1, scale);
          this.showWarning();
        };

        _proto.showWarning = function showWarning() {};

        _proto.hideWarning = function hideWarning() {
          PoolManager.instance.putNode(this.node);
        } // update (deltaTime: number) {
        //     // [4]
        // }
        ;

        return WarningLine;
      }(Component)) || _class));

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/warningStrip.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './poolManager.ts'], function (exports) {
  var _inheritsLoose, cclegacy, _decorator, Component, PoolManager;

  return {
    setters: [function (module) {
      _inheritsLoose = module.inheritsLoose;
    }, function (module) {
      cclegacy = module.cclegacy;
      _decorator = module._decorator;
      Component = module.Component;
    }, function (module) {
      PoolManager = module.PoolManager;
    }],
    execute: function () {
      var _dec, _class;

      cclegacy._RF.push({}, "a816bqAQNtKtp+4XcORW3SO", "warningStrip", undefined);

      var ccclass = _decorator.ccclass,
          property = _decorator.property; //长条状预警脚本

      var WarningStrip = exports('WarningStrip', (_dec = ccclass('WarningStrip'), _dec(_class = /*#__PURE__*/function (_Component) {
        _inheritsLoose(WarningStrip, _Component);

        function WarningStrip() {
          var _this;

          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          _this = _Component.call.apply(_Component, [this].concat(args)) || this;
          _this._scriptParent = null;
          return _this;
        }

        var _proto = WarningStrip.prototype;

        _proto.start = function start() {// [3]
        };

        _proto.init = function init(scale, scriptParent) {
          scriptParent.recycleWarning();
          this._scriptParent = scriptParent;
          this.node.setWorldPosition(scriptParent.node.worldPosition.x, 2.5, scriptParent.node.worldPosition.z);
          this.node.forward = scriptParent.attackForward;
          this.node.setScale(1, 1, scale);
          this.showWarning();
        };

        _proto.showWarning = function showWarning() {};

        _proto.hideWarning = function hideWarning() {
          PoolManager.instance.putNode(this.node);
        };

        return WarningStrip;
      }(Component)) || _class));
      /**
       * [1] Class member could be defined like this.
       * [2] Use `property` decorator if your want the member to be serializable.
       * [3] Your initialization goes here.
       * [4] Your update function goes here.
       *
       * Learn more about scripting: https://docs.cocos.com/creator/3.0/manual/en/scripting/
       * Learn more about CCClass: https://docs.cocos.com/creator/3.0/manual/en/scripting/ccclass.html
       * Learn more about life-cycle callbacks: https://docs.cocos.com/creator/3.0/manual/en/scripting/life-cycle-callbacks.html
       */

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WChannel.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc', './WSocket.ts'], function (exports) {
  var _createClass, cclegacy, WSocket;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      WSocket = module.WSocket;
    }],
    execute: function () {
      cclegacy._RF.push({}, "a4d40/kkSVMRIxuhcex/CZw", "WChannel", undefined);

      var ProtoMap = {};
      var WChannel = exports('WChannel', /*#__PURE__*/function () {
        function WChannel() {
          this._socket = void 0;
          this.onCreated = null;
          this.onLost = null;
          this.onError = null;
          this.onMsgReceive = null;
        }

        WChannel.encode = function encode(proto) {
          if (proto == null) return null;
          if (typeof proto != "object") return null;
          var cls = proto.constructor;
          var msgId = cls["msgId"];
          if (isNaN(msgId) || msgId <= 0) return null;
          var protoBytes = proto.constructor["encode"](proto).finish();
          var typedArray = new Uint8Array(protoBytes.length + 2);
          new DataView(typedArray.buffer).setUint16(0, msgId);
          typedArray.set(protoBytes, 2);
          return typedArray;
        };

        WChannel.decode = function decode(buffer) {
          var id = new DataView(buffer).getUint16(0);
          var protoBytes = new Uint8Array(buffer, 2);
          var cls = ProtoMap[id];

          if (cls && cls.decode) {
            try {
              var proto = cls.decode(protoBytes);
              return proto;
            } catch (e) {
              console.error("wchannel decode error: id======> " + id);
              return null;
            }
          }
        };

        var _proto = WChannel.prototype;

        _proto.init = function init() {
          if (this.checkInit(true)) {
            return;
          }

          this._socket = new WSocket();

          this._socket.bindHandler(this);
        };

        _proto.checkInit = function checkInit(log) {
          if (log === void 0) {
            log = false;
          }

          var isInit = this._socket == null;

          if (!isInit && log) {
            console.warn("wchannal is not init!", this._socket);
          }

          return isInit;
        };

        _proto.connect = function connect(url) {
          if (!this.checkInit(true)) return;

          this._socket.connect(url);
        };

        _proto.disconnect = function disconnect() {
          if (!this.checkInit(true)) return;

          this._socket.close();
        };

        _proto.send = function send(proto) {
          if (proto == null) return;
          if (!this.checkInit()) return;
          if (!this.isConnected) return;
          var typedArray = WChannel.encode(proto);
          if (typedArray) this._socket.send(typedArray.buffer);
        };

        _proto.dispose = function dispose() {
          if (!this._socket) return;
          this.onCreated = this.onLost = this.onError = this.onMsgReceive = null;
        };

        _proto.onWSOpen = function onWSOpen() {
          throw new Error("Method not implemented.");
        };

        _proto.onWSClose = function onWSClose() {
          throw new Error("Method not implemented.");
        };

        _proto.onWSError = function onWSError() {
          throw new Error("Method not implemented.");
        };

        _proto.onWSMessage = function onWSMessage(buffer) {
          var proto = WChannel.decode(buffer);

          if (proto && this.onMsgReceive) {
            this.onMsgReceive.exec([proto]);
          }
        };

        _createClass(WChannel, [{
          key: "isConnected",
          get: function get() {
            return this._socket.isConnected;
          }
        }]);

        return WChannel;
      }());

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WService.ts", ['cc', './WChannel.ts'], function (exports) {
  var cclegacy, WChannel;
  return {
    setters: [function (module) {
      cclegacy = module.cclegacy;
    }, function (module) {
      WChannel = module.WChannel;
    }],
    execute: function () {
      cclegacy._RF.push({}, "82f589/kGlHvaa3mdW205u4", "WService", undefined);

      var WService = exports('WService', /*#__PURE__*/function () {
        function WService() {
          this._recvTick = void 0;
          this._connection = null;
          this._recvTick = 0;
          this.init();
        }

        var _proto = WService.prototype;

        _proto.init = function init() {};

        _proto.isConnected = function isConnected() {
          return this.socketConnected() && !this.socketTimeOut();
        };

        _proto.socketConnected = function socketConnected() {
          return this._connection == null ? false : this._connection.isConnected;
        };

        _proto.socketTimeOut = function socketTimeOut() {
          return Date.now() - this._recvTick >= WService.INTERVAL;
        };

        _proto.connectTo = function connectTo(host, port) {
          if (this._connection) {
            this._connection.dispose();

            this._connection = null;
          }

          this._connection = new WChannel(); // this._connection.onCreated = this.
        };

        _proto.sendProto = function sendProto(proto) {
          this._connection && this._connection.send(proto);
        };

        _proto.close = function close() {
          this._connection && this._connection.disconnect();
        };

        _proto.onCreated = function onCreated() {// event wsocket connect create
        };

        _proto.onMsgReceive = function onMsgReceive() {
          this._recvTick = Date.now(); // event msg proto
        };

        _proto.onLost = function onLost() {// event wsocket connect lost
        };

        _proto.onError = function onError() {// event wsocket connect error
        };

        _proto.onNotification = function onNotification() {};

        _proto.offNotification = function offNotification() {};

        return WService;
      }());
      WService.INTERVAL = 60000;

      cclegacy._RF.pop();
    }
  };
});

System.register("chunks:///_virtual/WSocket.ts", ['./rollupPluginModLoBabelHelpers.js', 'cc'], function (exports) {
  var _createClass, cclegacy;

  return {
    setters: [function (module) {
      _createClass = module.createClass;
    }, function (module) {
      cclegacy = module.cclegacy;
    }],
    execute: function () {
      cclegacy._RF.push({}, "59411CMxSdD3biTKJBAU6WI", "WSocket", undefined);

      var WSocket = exports('WSocket', /*#__PURE__*/function () {
        function WSocket() {
          this._url = void 0;
          this._createT = void 0;
          this._connected = false;
          this._connecting = false;
          this._socket = null;
          this._handler = null;
        }

        var _proto = WSocket.prototype;

        _proto.connect = function connect(url) {
          if (this.isConnected || this._connecting) return;
          this._url = url;
          this._connecting = true;

          try {
            this._createT = Date.now();
            var socket = this._socket = new WebSocket(url);
            socket.binaryType = "arraybuffer";
            this.bindEvent(socket);
          } catch (e) {
            this.onWSConnectError(e);
          }
        };

        _proto.bindHandler = function bindHandler(handler) {
          if (handler == null) {
            console.warn("wsocket can not bind null: ", handler);
            return;
          }

          if (this._handler != null) {
            console.warn("wsocket can not bind null: ", this._handler);
          }

          this._handler = handler;
        };

        _proto.close = function close() {
          if (!this._connected) return;
          this.reset();
          this._handler && this._handler.onWSClose();
        };

        _proto.send = function send(buffer) {
          if (!this._connected) return;

          this._socket.send(buffer);
        };

        _proto.dispose = function dispose() {
          this.reset();
          this._handler = null;
        };

        _proto.bindEvent = function bindEvent(socket) {
          socket.onopen = this.onSocketOpen.bind(this);
          socket.onclose = this.onSocketClose.bind(this);
          socket.onerror = this.onSocketError.bind(this);
          socket.onmessage = this.onSocketMessage.bind(this);
        };

        _proto.onWSConnectError = function onWSConnectError(e) {
          console.error("<<websocket connect error>> url: ", this._url, "error: ", e);
          this.reset();
          this._handler && this._handler.onWSError();
        };

        _proto.onSocketOpen = function onSocketOpen(e) {
          var _this$_socket;

          console.info("<<websocket open>> connection cost:", Date.now() - this._createT);
          this._connected = true;
          this._connecting = false;
          console.log("socket.readyState:=======", (_this$_socket = this._socket) == null ? void 0 : _this$_socket.readyState);
          this._handler && this._handler.onWSOpen();
        };

        _proto.onSocketClose = function onSocketClose(e) {
          var _this$_socket2;

          console.info("<<websocket close>> close code: ", e.code, " reason: ", e.reason);
          this.reset();
          console.log("socket.readyState:=======", (_this$_socket2 = this._socket) == null ? void 0 : _this$_socket2.readyState);
          this._handler && this._handler.onWSClose();
        };

        _proto.onSocketError = function onSocketError(e) {
          var _this$_socket3;

          console.warn("<<websocket error>> url: ", this._url, "error: ", e);
          console.log("socket.readyState:=======", (_this$_socket3 = this._socket) == null ? void 0 : _this$_socket3.readyState);
          this.reset();
          this._handler && this._handler.onWSError();
        };

        _proto.onSocketMessage = function onSocketMessage(e) {
          // console.warn("<<websocket message>> url: ", this._url, "message: ", e.data);
          var message = e.data;
          var buffer = message;

          if (typeof message == "string") {
            buffer = new TextEncoder().encode(message).buffer;
          }

          this._handler && this._handler.onWSMessage(buffer);
        };

        _proto.reset = function reset() {
          this._url = undefined;
          this._createT = undefined;
          this._connected = false;
          this._connecting = false;
          var socket = this._socket;

          if (socket) {
            socket.onopen = socket.onclose = socket.onerror = socket.onmessage = null;
          }

          this._socket = null; // 如果此时socket未关闭 则手动关闭

          if (socket && socket.readyState !== WebSocket.CLOSED && socket.readyState !== WebSocket.CLOSING) {
            try {
              socket.close();
            } catch (e) {}
          }
        };

        _createClass(WSocket, [{
          key: "isConnected",
          get:
          /**
           *是否链接成功
           */
          function get() {
            return this._connected;
          }
        }]);

        return WSocket;
      }());

      cclegacy._RF.pop();
    }
  };
});

(function(r) {
  r('virtual:///prerequisite-imports/main', 'chunks:///_virtual/main'); 
})(function(mid, cid) {
    System.register(mid, [cid], function (_export, _context) {
    return {
        setters: [function(_m) {
            var _exportObj = {};

            for (var _key in _m) {
              if (_key !== "default" && _key !== "__esModule") _exportObj[_key] = _m[_key];
            }
      
            _export(_exportObj);
        }],
        execute: function () { }
    };
    });
});